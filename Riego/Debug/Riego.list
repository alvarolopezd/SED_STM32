
Riego.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08005e10  08005e10  00015e10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060c0  080060c0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080060c0  080060c0  000160c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060c8  080060c8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060c8  080060c8  000160c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060cc  080060cc  000160cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080060d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  200001dc  080062ac  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  080062ac  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bba8  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001818  00000000  00000000  0002bdb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c88  00000000  00000000  0002d5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be8  00000000  00000000  0002e258  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020d54  00000000  00000000  0002ee40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c16  00000000  00000000  0004fb94  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9bc0  00000000  00000000  000597aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012336a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f4c  00000000  00000000  001233e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005df4 	.word	0x08005df4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08005df4 	.word	0x08005df4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b972 	b.w	8000ea4 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	4688      	mov	r8, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14b      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4615      	mov	r5, r2
 8000bea:	d967      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0720 	rsb	r7, r2, #32
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000bfe:	4095      	lsls	r5, r2
 8000c00:	ea47 0803 	orr.w	r8, r7, r3
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c10:	fa1f fc85 	uxth.w	ip, r5
 8000c14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18eb      	adds	r3, r5, r3
 8000c26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2a:	f080 811b 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8118 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c34:	3f02      	subs	r7, #2
 8000c36:	442b      	add	r3, r5
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4c:	45a4      	cmp	ip, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	192c      	adds	r4, r5, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8107 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	f240 8104 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c60:	3802      	subs	r0, #2
 8000c62:	442c      	add	r4, r5
 8000c64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c68:	eba4 040c 	sub.w	r4, r4, ip
 8000c6c:	2700      	movs	r7, #0
 8000c6e:	b11e      	cbz	r6, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c6 4300 	strd	r4, r3, [r6]
 8000c78:	4639      	mov	r1, r7
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0xbe>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80eb 	beq.w	8000e5e <__udivmoddi4+0x286>
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c8e:	4638      	mov	r0, r7
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f783 	clz	r7, r3
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d147      	bne.n	8000d2e <__udivmoddi4+0x156>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xd0>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2c4>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb61 0303 	sbc.w	r3, r1, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d0e0      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000cb6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cba:	e7dd      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000cbc:	b902      	cbnz	r2, 8000cc0 <__udivmoddi4+0xe8>
 8000cbe:	deff      	udf	#255	; 0xff
 8000cc0:	fab2 f282 	clz	r2, r2
 8000cc4:	2a00      	cmp	r2, #0
 8000cc6:	f040 808f 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cca:	1b49      	subs	r1, r1, r5
 8000ccc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd0:	fa1f f885 	uxth.w	r8, r5
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce4:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce8:	4299      	cmp	r1, r3
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cec:	18eb      	adds	r3, r5, r3
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	f200 80cd 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1a59      	subs	r1, r3, r1
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x14c>
 8000d14:	192c      	adds	r4, r5, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x14a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80b6 	bhi.w	8000e8e <__udivmoddi4+0x2b6>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e79f      	b.n	8000c6e <__udivmoddi4+0x96>
 8000d2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d32:	40bb      	lsls	r3, r7
 8000d34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d4c:	4325      	orrs	r5, r4
 8000d4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d52:	0c2c      	lsrs	r4, r5, #16
 8000d54:	fb08 3319 	mls	r3, r8, r9, r3
 8000d58:	fa1f fa8e 	uxth.w	sl, lr
 8000d5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d60:	fb09 f40a 	mul.w	r4, r9, sl
 8000d64:	429c      	cmp	r4, r3
 8000d66:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1e 0303 	adds.w	r3, lr, r3
 8000d74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d78:	f080 8087 	bcs.w	8000e8a <__udivmoddi4+0x2b2>
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	f240 8084 	bls.w	8000e8a <__udivmoddi4+0x2b2>
 8000d82:	f1a9 0902 	sub.w	r9, r9, #2
 8000d86:	4473      	add	r3, lr
 8000d88:	1b1b      	subs	r3, r3, r4
 8000d8a:	b2ad      	uxth	r5, r5
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d9c:	45a2      	cmp	sl, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1e 0404 	adds.w	r4, lr, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	d26b      	bcs.n	8000e82 <__udivmoddi4+0x2aa>
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	d969      	bls.n	8000e82 <__udivmoddi4+0x2aa>
 8000dae:	3802      	subs	r0, #2
 8000db0:	4474      	add	r4, lr
 8000db2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000db6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dba:	eba4 040a 	sub.w	r4, r4, sl
 8000dbe:	454c      	cmp	r4, r9
 8000dc0:	46c2      	mov	sl, r8
 8000dc2:	464b      	mov	r3, r9
 8000dc4:	d354      	bcc.n	8000e70 <__udivmoddi4+0x298>
 8000dc6:	d051      	beq.n	8000e6c <__udivmoddi4+0x294>
 8000dc8:	2e00      	cmp	r6, #0
 8000dca:	d069      	beq.n	8000ea0 <__udivmoddi4+0x2c8>
 8000dcc:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd0:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	40fc      	lsrs	r4, r7
 8000ddc:	ea4c 0505 	orr.w	r5, ip, r5
 8000de0:	e9c6 5400 	strd	r5, r4, [r6]
 8000de4:	2700      	movs	r7, #0
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f703 	lsr.w	r7, r0, r3
 8000df0:	4095      	lsls	r5, r2
 8000df2:	fa01 f002 	lsl.w	r0, r1, r2
 8000df6:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dfe:	4338      	orrs	r0, r7
 8000e00:	0c01      	lsrs	r1, r0, #16
 8000e02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e06:	fa1f f885 	uxth.w	r8, r5
 8000e0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e12:	fb07 f308 	mul.w	r3, r7, r8
 8000e16:	428b      	cmp	r3, r1
 8000e18:	fa04 f402 	lsl.w	r4, r4, r2
 8000e1c:	d907      	bls.n	8000e2e <__udivmoddi4+0x256>
 8000e1e:	1869      	adds	r1, r5, r1
 8000e20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e24:	d22f      	bcs.n	8000e86 <__udivmoddi4+0x2ae>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d92d      	bls.n	8000e86 <__udivmoddi4+0x2ae>
 8000e2a:	3f02      	subs	r7, #2
 8000e2c:	4429      	add	r1, r5
 8000e2e:	1acb      	subs	r3, r1, r3
 8000e30:	b281      	uxth	r1, r0
 8000e32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3e:	fb00 f308 	mul.w	r3, r0, r8
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d907      	bls.n	8000e56 <__udivmoddi4+0x27e>
 8000e46:	1869      	adds	r1, r5, r1
 8000e48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e4c:	d217      	bcs.n	8000e7e <__udivmoddi4+0x2a6>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d915      	bls.n	8000e7e <__udivmoddi4+0x2a6>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4429      	add	r1, r5
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e5c:	e73b      	b.n	8000cd6 <__udivmoddi4+0xfe>
 8000e5e:	4637      	mov	r7, r6
 8000e60:	4630      	mov	r0, r6
 8000e62:	e709      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e64:	4607      	mov	r7, r0
 8000e66:	e6e7      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6fb      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e6c:	4541      	cmp	r1, r8
 8000e6e:	d2ab      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e74:	eb69 020e 	sbc.w	r2, r9, lr
 8000e78:	3801      	subs	r0, #1
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	e7a4      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e7e:	4660      	mov	r0, ip
 8000e80:	e7e9      	b.n	8000e56 <__udivmoddi4+0x27e>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e795      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e86:	4667      	mov	r7, ip
 8000e88:	e7d1      	b.n	8000e2e <__udivmoddi4+0x256>
 8000e8a:	4681      	mov	r9, r0
 8000e8c:	e77c      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	442c      	add	r4, r5
 8000e92:	e747      	b.n	8000d24 <__udivmoddi4+0x14c>
 8000e94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e98:	442b      	add	r3, r5
 8000e9a:	e72f      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xda>
 8000ea0:	4637      	mov	r7, r6
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0xa0>

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to your setup

void lcd_send_cmd (char cmd)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f023 030f 	bic.w	r3, r3, #15
 8000eb8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	011b      	lsls	r3, r3, #4
 8000ebe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	f043 030c 	orr.w	r3, r3, #12
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	f043 0308 	orr.w	r3, r3, #8
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ed4:	7bbb      	ldrb	r3, [r7, #14]
 8000ed6:	f043 030c 	orr.w	r3, r3, #12
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000ede:	7bbb      	ldrb	r3, [r7, #14]
 8000ee0:	f043 0308 	orr.w	r3, r3, #8
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ee8:	f107 0208 	add.w	r2, r7, #8
 8000eec:	2364      	movs	r3, #100	; 0x64
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	214e      	movs	r1, #78	; 0x4e
 8000ef4:	4803      	ldr	r0, [pc, #12]	; (8000f04 <lcd_send_cmd+0x5c>)
 8000ef6:	f001 fb41 	bl	800257c <HAL_I2C_Master_Transmit>
}
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000210 	.word	0x20000210

08000f08 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af02      	add	r7, sp, #8
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f023 030f 	bic.w	r3, r3, #15
 8000f18:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	011b      	lsls	r3, r3, #4
 8000f1e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	f043 030d 	orr.w	r3, r3, #13
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	f043 0309 	orr.w	r3, r3, #9
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000f34:	7bbb      	ldrb	r3, [r7, #14]
 8000f36:	f043 030d 	orr.w	r3, r3, #13
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000f3e:	7bbb      	ldrb	r3, [r7, #14]
 8000f40:	f043 0309 	orr.w	r3, r3, #9
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000f48:	f107 0208 	add.w	r2, r7, #8
 8000f4c:	2364      	movs	r3, #100	; 0x64
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2304      	movs	r3, #4
 8000f52:	214e      	movs	r1, #78	; 0x4e
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <lcd_send_data+0x5c>)
 8000f56:	f001 fb11 	bl	800257c <HAL_I2C_Master_Transmit>
}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000210 	.word	0x20000210

08000f68 <lcd_clear>:

void lcd_clear (void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f7ff ff9b 	bl	8000ea8 <lcd_send_cmd>
	HAL_Delay(10);
 8000f72:	200a      	movs	r0, #10
 8000f74:	f000 feb2 	bl	8001cdc <HAL_Delay>
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
    switch (row)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d002      	beq.n	8000f92 <lcd_put_cur+0x16>
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d005      	beq.n	8000f9c <lcd_put_cur+0x20>
 8000f90:	e009      	b.n	8000fa6 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f98:	603b      	str	r3, [r7, #0]
            break;
 8000f9a:	e004      	b.n	8000fa6 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000fa2:	603b      	str	r3, [r7, #0]
            break;
 8000fa4:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff7c 	bl	8000ea8 <lcd_send_cmd>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <lcd_init>:


void lcd_init (void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000fbc:	2032      	movs	r0, #50	; 0x32
 8000fbe:	f000 fe8d 	bl	8001cdc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fc2:	2030      	movs	r0, #48	; 0x30
 8000fc4:	f7ff ff70 	bl	8000ea8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000fc8:	2005      	movs	r0, #5
 8000fca:	f000 fe87 	bl	8001cdc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fce:	2030      	movs	r0, #48	; 0x30
 8000fd0:	f7ff ff6a 	bl	8000ea8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f000 fe81 	bl	8001cdc <HAL_Delay>
	lcd_send_cmd (0x30);
 8000fda:	2030      	movs	r0, #48	; 0x30
 8000fdc:	f7ff ff64 	bl	8000ea8 <lcd_send_cmd>
	HAL_Delay(10);
 8000fe0:	200a      	movs	r0, #10
 8000fe2:	f000 fe7b 	bl	8001cdc <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000fe6:	2020      	movs	r0, #32
 8000fe8:	f7ff ff5e 	bl	8000ea8 <lcd_send_cmd>
	HAL_Delay(10);
 8000fec:	200a      	movs	r0, #10
 8000fee:	f000 fe75 	bl	8001cdc <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000ff2:	2028      	movs	r0, #40	; 0x28
 8000ff4:	f7ff ff58 	bl	8000ea8 <lcd_send_cmd>
	HAL_Delay(1);
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f000 fe6f 	bl	8001cdc <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000ffe:	2008      	movs	r0, #8
 8001000:	f7ff ff52 	bl	8000ea8 <lcd_send_cmd>
	HAL_Delay(1);
 8001004:	2001      	movs	r0, #1
 8001006:	f000 fe69 	bl	8001cdc <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff ff4c 	bl	8000ea8 <lcd_send_cmd>
	HAL_Delay(1);
 8001010:	2001      	movs	r0, #1
 8001012:	f000 fe63 	bl	8001cdc <HAL_Delay>
	HAL_Delay(1);
 8001016:	2001      	movs	r0, #1
 8001018:	f000 fe60 	bl	8001cdc <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800101c:	2006      	movs	r0, #6
 800101e:	f7ff ff43 	bl	8000ea8 <lcd_send_cmd>
	HAL_Delay(1);
 8001022:	2001      	movs	r0, #1
 8001024:	f000 fe5a 	bl	8001cdc <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001028:	200c      	movs	r0, #12
 800102a:	f7ff ff3d 	bl	8000ea8 <lcd_send_cmd>
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}

08001032 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800103a:	e006      	b.n	800104a <lcd_send_string+0x18>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff5f 	bl	8000f08 <lcd_send_data>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f4      	bne.n	800103c <lcd_send_string+0xa>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <delay>:
/* USER CODE BEGIN 0 */

/****************** DELAY CON TIM6 Y CLOCK INTERNO ******************/

void delay (uint16_t time)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <delay+0x2c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim6))<time);
 800106e:	bf00      	nop
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <delay+0x2c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	429a      	cmp	r2, r3
 800107a:	d3f9      	bcc.n	8001070 <delay+0x14>
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	2000026c 	.word	0x2000026c

0800108c <Set_Pin_Output>:

/********************** SET PIN (INPUT Y OUTPUT)************************/

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80010a8:	887b      	ldrh	r3, [r7, #2]
 80010aa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	4619      	mov	r1, r3
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 ff42 	bl	8001f44 <HAL_GPIO_Init>
}
 80010c0:	bf00      	nop
 80010c2:	3720      	adds	r7, #32
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80010e4:	887b      	ldrh	r3, [r7, #2]
 80010e6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e8:	2300      	movs	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	4619      	mov	r1, r3
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 ff24 	bl	8001f44 <HAL_GPIO_Init>
}
 80010fc:	bf00      	nop
 80010fe:	3720      	adds	r7, #32
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <Display_ModoAutom>:

/******************** FUNCIONES DISPLAY LCD ********************/

void Display_ModoAutom ()
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
	char str[20] = {0};
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
	lcd_put_cur(0, 2);
 8001118:	2102      	movs	r1, #2
 800111a:	2000      	movs	r0, #0
 800111c:	f7ff ff2e 	bl	8000f7c <lcd_put_cur>

	sprintf (str, " MODO AUTOM. ");
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	4a07      	ldr	r2, [pc, #28]	; (8001140 <Display_ModoAutom+0x3c>)
 8001124:	461c      	mov	r4, r3
 8001126:	4613      	mov	r3, r2
 8001128:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800112a:	c407      	stmia	r4!, {r0, r1, r2}
 800112c:	8023      	strh	r3, [r4, #0]
	lcd_send_string(str);
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff7e 	bl	8001032 <lcd_send_string>
}
 8001136:	bf00      	nop
 8001138:	371c      	adds	r7, #28
 800113a:	46bd      	mov	sp, r7
 800113c:	bd90      	pop	{r4, r7, pc}
 800113e:	bf00      	nop
 8001140:	08005e10 	.word	0x08005e10

08001144 <Display_ModoManual>:

void Display_ModoManual ()
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
	char str[20] = {0};
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
	lcd_put_cur(0, 2);
 8001158:	2102      	movs	r1, #2
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff ff0e 	bl	8000f7c <lcd_put_cur>

	sprintf (str, " MODO MANUAL ");
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	4a07      	ldr	r2, [pc, #28]	; (8001180 <Display_ModoManual+0x3c>)
 8001164:	461c      	mov	r4, r3
 8001166:	4613      	mov	r3, r2
 8001168:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800116a:	c407      	stmia	r4!, {r0, r1, r2}
 800116c:	8023      	strh	r3, [r4, #0]
	lcd_send_string(str);
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff5e 	bl	8001032 <lcd_send_string>
}
 8001176:	bf00      	nop
 8001178:	371c      	adds	r7, #28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd90      	pop	{r4, r7, pc}
 800117e:	bf00      	nop
 8001180:	08005e20 	.word	0x08005e20

08001184 <Display_Temp>:

void Display_Temp (float Temp)
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b089      	sub	sp, #36	; 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	ed87 0a01 	vstr	s0, [r7, #4]
	char str[20] = {0};
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]
	lcd_put_cur(1, 1);
 800119e:	2101      	movs	r1, #1
 80011a0:	2001      	movs	r0, #1
 80011a2:	f7ff feeb 	bl	8000f7c <lcd_put_cur>

	sprintf (str, "TEMP: %.2f ", Temp);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff f9ce 	bl	8000548 <__aeabi_f2d>
 80011ac:	4603      	mov	r3, r0
 80011ae:	460c      	mov	r4, r1
 80011b0:	f107 000c 	add.w	r0, r7, #12
 80011b4:	461a      	mov	r2, r3
 80011b6:	4623      	mov	r3, r4
 80011b8:	4907      	ldr	r1, [pc, #28]	; (80011d8 <Display_Temp+0x54>)
 80011ba:	f003 fa2d 	bl	8004618 <siprintf>
	lcd_send_string(str);
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff35 	bl	8001032 <lcd_send_string>
	lcd_send_data('C');
 80011c8:	2043      	movs	r0, #67	; 0x43
 80011ca:	f7ff fe9d 	bl	8000f08 <lcd_send_data>
}
 80011ce:	bf00      	nop
 80011d0:	3724      	adds	r7, #36	; 0x24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd90      	pop	{r4, r7, pc}
 80011d6:	bf00      	nop
 80011d8:	08005e30 	.word	0x08005e30

080011dc <DS18B20_Start>:
}*/

/************************ FUNCIONES DS18B20 *******************************/

uint8_t DS18B20_Start (void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 80011e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ea:	4815      	ldr	r0, [pc, #84]	; (8001240 <DS18B20_Start+0x64>)
 80011ec:	f7ff ff4e 	bl	800108c <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 80011f0:	2200      	movs	r2, #0
 80011f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f6:	4812      	ldr	r0, [pc, #72]	; (8001240 <DS18B20_Start+0x64>)
 80011f8:	f001 f856 	bl	80022a8 <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 80011fc:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8001200:	f7ff ff2c 	bl	800105c <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 8001204:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <DS18B20_Start+0x64>)
 800120a:	f7ff ff5d 	bl	80010c8 <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 800120e:	2050      	movs	r0, #80	; 0x50
 8001210:	f7ff ff24 	bl	800105c <delay>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8001214:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001218:	4809      	ldr	r0, [pc, #36]	; (8001240 <DS18B20_Start+0x64>)
 800121a:	f001 f82d 	bl	8002278 <HAL_GPIO_ReadPin>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <DS18B20_Start+0x4e>
 8001224:	2301      	movs	r3, #1
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	e001      	b.n	800122e <DS18B20_Start+0x52>
	else Response = -1;
 800122a:	23ff      	movs	r3, #255	; 0xff
 800122c:	71fb      	strb	r3, [r7, #7]

	delay (400); // 480 us delay totally.
 800122e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001232:	f7ff ff13 	bl	800105c <delay>

	return Response;
 8001236:	79fb      	ldrb	r3, [r7, #7]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40020400 	.word	0x40020400

08001244 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 800124e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001252:	4821      	ldr	r0, [pc, #132]	; (80012d8 <DS18B20_Write+0x94>)
 8001254:	f7ff ff1a 	bl	800108c <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	e034      	b.n	80012c8 <DS18B20_Write+0x84>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 800125e:	79fa      	ldrb	r2, [r7, #7]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	fa42 f303 	asr.w	r3, r2, r3
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d016      	beq.n	800129c <DS18B20_Write+0x58>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 800126e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001272:	4819      	ldr	r0, [pc, #100]	; (80012d8 <DS18B20_Write+0x94>)
 8001274:	f7ff ff0a 	bl	800108c <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800127e:	4816      	ldr	r0, [pc, #88]	; (80012d8 <DS18B20_Write+0x94>)
 8001280:	f001 f812 	bl	80022a8 <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 8001284:	2001      	movs	r0, #1
 8001286:	f7ff fee9 	bl	800105c <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 800128a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800128e:	4812      	ldr	r0, [pc, #72]	; (80012d8 <DS18B20_Write+0x94>)
 8001290:	f7ff ff1a 	bl	80010c8 <Set_Pin_Input>
			delay (50);  // wait for 60 us
 8001294:	2032      	movs	r0, #50	; 0x32
 8001296:	f7ff fee1 	bl	800105c <delay>
 800129a:	e012      	b.n	80012c2 <DS18B20_Write+0x7e>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 800129c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <DS18B20_Write+0x94>)
 80012a2:	f7ff fef3 	bl	800108c <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ac:	480a      	ldr	r0, [pc, #40]	; (80012d8 <DS18B20_Write+0x94>)
 80012ae:	f000 fffb 	bl	80022a8 <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 80012b2:	2032      	movs	r0, #50	; 0x32
 80012b4:	f7ff fed2 	bl	800105c <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80012b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012bc:	4806      	ldr	r0, [pc, #24]	; (80012d8 <DS18B20_Write+0x94>)
 80012be:	f7ff ff03 	bl	80010c8 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3301      	adds	r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2b07      	cmp	r3, #7
 80012cc:	ddc7      	ble.n	800125e <DS18B20_Write+0x1a>
		}
	}
}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40020400 	.word	0x40020400

080012dc <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
	uint8_t value=0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80012e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ea:	481c      	ldr	r0, [pc, #112]	; (800135c <DS18B20_Read+0x80>)
 80012ec:	f7ff feec 	bl	80010c8 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 80012f0:	2300      	movs	r3, #0
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	e02a      	b.n	800134c <DS18B20_Read+0x70>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 80012f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012fa:	4818      	ldr	r0, [pc, #96]	; (800135c <DS18B20_Read+0x80>)
 80012fc:	f7ff fec6 	bl	800108c <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the data pin LOW
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001306:	4815      	ldr	r0, [pc, #84]	; (800135c <DS18B20_Read+0x80>)
 8001308:	f000 ffce 	bl	80022a8 <HAL_GPIO_WritePin>
		delay (1);  // wait for > 1us
 800130c:	2001      	movs	r0, #1
 800130e:	f7ff fea5 	bl	800105c <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8001312:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001316:	4811      	ldr	r0, [pc, #68]	; (800135c <DS18B20_Read+0x80>)
 8001318:	f7ff fed6 	bl	80010c8 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 800131c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001320:	480e      	ldr	r0, [pc, #56]	; (800135c <DS18B20_Read+0x80>)
 8001322:	f000 ffa9 	bl	8002278 <HAL_GPIO_ReadPin>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d009      	beq.n	8001340 <DS18B20_Read+0x64>
		{
			value |= 1<<i;  // read = 1
 800132c:	2201      	movs	r2, #1
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	b25a      	sxtb	r2, r3
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	4313      	orrs	r3, r2
 800133c:	b25b      	sxtb	r3, r3
 800133e:	71fb      	strb	r3, [r7, #7]
		}
		delay (50);  // wait for 60 us
 8001340:	2032      	movs	r0, #50	; 0x32
 8001342:	f7ff fe8b 	bl	800105c <delay>
	for (int i=0;i<8;i++)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	3301      	adds	r3, #1
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	2b07      	cmp	r3, #7
 8001350:	ddd1      	ble.n	80012f6 <DS18B20_Read+0x1a>
	}
	return value;
 8001352:	79fb      	ldrb	r3, [r7, #7]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40020400 	.word	0x40020400

08001360 <avanceMotor>:
}*/


/*********************** FUNCIONES DE MOTOR ****************************/
void avanceMotor(int s)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	//TIM9->CCR1=s;
	__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, s);
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <avanceMotor+0x30>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(MOTOR_PORT, INI2_PIN,GPIO_PIN_SET);
 8001370:	2201      	movs	r2, #1
 8001372:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001376:	4807      	ldr	r0, [pc, #28]	; (8001394 <avanceMotor+0x34>)
 8001378:	f000 ff96 	bl	80022a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_PORT, INI1_PIN,GPIO_PIN_RESET);
 800137c:	2200      	movs	r2, #0
 800137e:	2180      	movs	r1, #128	; 0x80
 8001380:	4804      	ldr	r0, [pc, #16]	; (8001394 <avanceMotor+0x34>)
 8001382:	f000 ff91 	bl	80022a8 <HAL_GPIO_WritePin>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200002ac 	.word	0x200002ac
 8001394:	40020800 	.word	0x40020800

08001398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139c:	f000 fc2c 	bl	8001bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a0:	f000 f8ae 	bl	8001500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a4:	f000 f9be 	bl	8001724 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013a8:	f000 f912 	bl	80015d0 <MX_I2C1_Init>
  MX_TIM6_Init();
 80013ac:	f000 f93e 	bl	800162c <MX_TIM6_Init>
  MX_TIM9_Init();
 80013b0:	f000 f972 	bl	8001698 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  // PWM MOTOR
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 80013b4:	2104      	movs	r1, #4
 80013b6:	4848      	ldr	r0, [pc, #288]	; (80014d8 <main+0x140>)
 80013b8:	f002 f8b0 	bl	800351c <HAL_TIM_PWM_Start>


  // RELOJ INTERNO PARA DELAY
  HAL_TIM_Base_Start(&htim6);
 80013bc:	4847      	ldr	r0, [pc, #284]	; (80014dc <main+0x144>)
 80013be:	f002 f85e 	bl	800347e <HAL_TIM_Base_Start>

  // INICIO DE LCD
   lcd_init();
 80013c2:	f7ff fdf9 	bl	8000fb8 <lcd_init>
   lcd_send_string("INICIANDO>>>>");
 80013c6:	4846      	ldr	r0, [pc, #280]	; (80014e0 <main+0x148>)
 80013c8:	f7ff fe33 	bl	8001032 <lcd_send_string>
   HAL_Delay(2000);
 80013cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013d0:	f000 fc84 	bl	8001cdc <HAL_Delay>
   lcd_clear ();
 80013d4:	f7ff fdc8 	bl	8000f68 <lcd_clear>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(modo==0) // MODO AUTOMATICO
 80013d8:	4b42      	ldr	r3, [pc, #264]	; (80014e4 <main+0x14c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d160      	bne.n	80014a2 <main+0x10a>
	  {
		  HAL_GPIO_WritePin(PORT_LED,LED_AUTOM,1); // Enciendo led autom
 80013e0:	2201      	movs	r2, #1
 80013e2:	2104      	movs	r1, #4
 80013e4:	4840      	ldr	r0, [pc, #256]	; (80014e8 <main+0x150>)
 80013e6:	f000 ff5f 	bl	80022a8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(PORT_LED,LED_MANUAL,0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2110      	movs	r1, #16
 80013ee:	483e      	ldr	r0, [pc, #248]	; (80014e8 <main+0x150>)
 80013f0:	f000 ff5a 	bl	80022a8 <HAL_GPIO_WritePin>


		  /********* LCD ********/
		  Display_ModoAutom();
 80013f4:	f7ff fe86 	bl	8001104 <Display_ModoAutom>
		  Display_Temp(Temperature);
 80013f8:	4b3c      	ldr	r3, [pc, #240]	; (80014ec <main+0x154>)
 80013fa:	edd3 7a00 	vldr	s15, [r3]
 80013fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001402:	f7ff febf 	bl	8001184 <Display_Temp>
		  //Display_Rh(Humidity);


		  /********************** DS18B20 ***********************/

		  Presence = DS18B20_Start ();
 8001406:	f7ff fee9 	bl	80011dc <DS18B20_Start>
 800140a:	4603      	mov	r3, r0
 800140c:	461a      	mov	r2, r3
 800140e:	4b38      	ldr	r3, [pc, #224]	; (80014f0 <main+0x158>)
 8001410:	701a      	strb	r2, [r3, #0]
		  HAL_Delay (1);
 8001412:	2001      	movs	r0, #1
 8001414:	f000 fc62 	bl	8001cdc <HAL_Delay>
		  DS18B20_Write (0xCC);  // skip ROM
 8001418:	20cc      	movs	r0, #204	; 0xcc
 800141a:	f7ff ff13 	bl	8001244 <DS18B20_Write>
		  DS18B20_Write (0x44);  // convert t
 800141e:	2044      	movs	r0, #68	; 0x44
 8001420:	f7ff ff10 	bl	8001244 <DS18B20_Write>
		  HAL_Delay (800);
 8001424:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001428:	f000 fc58 	bl	8001cdc <HAL_Delay>

		  Presence = DS18B20_Start ();
 800142c:	f7ff fed6 	bl	80011dc <DS18B20_Start>
 8001430:	4603      	mov	r3, r0
 8001432:	461a      	mov	r2, r3
 8001434:	4b2e      	ldr	r3, [pc, #184]	; (80014f0 <main+0x158>)
 8001436:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(1);
 8001438:	2001      	movs	r0, #1
 800143a:	f000 fc4f 	bl	8001cdc <HAL_Delay>
		  DS18B20_Write (0xCC);  // skip ROM
 800143e:	20cc      	movs	r0, #204	; 0xcc
 8001440:	f7ff ff00 	bl	8001244 <DS18B20_Write>
		  DS18B20_Write (0xBE);  // Read Scratch-pad
 8001444:	20be      	movs	r0, #190	; 0xbe
 8001446:	f7ff fefd 	bl	8001244 <DS18B20_Write>

		  Temp_byte1 = DS18B20_Read();
 800144a:	f7ff ff47 	bl	80012dc <DS18B20_Read>
 800144e:	4603      	mov	r3, r0
 8001450:	461a      	mov	r2, r3
 8001452:	4b28      	ldr	r3, [pc, #160]	; (80014f4 <main+0x15c>)
 8001454:	701a      	strb	r2, [r3, #0]
		  Temp_byte2 = DS18B20_Read();
 8001456:	f7ff ff41 	bl	80012dc <DS18B20_Read>
 800145a:	4603      	mov	r3, r0
 800145c:	461a      	mov	r2, r3
 800145e:	4b26      	ldr	r3, [pc, #152]	; (80014f8 <main+0x160>)
 8001460:	701a      	strb	r2, [r3, #0]
		  TEMP = (Temp_byte2<<8)|Temp_byte1;
 8001462:	4b25      	ldr	r3, [pc, #148]	; (80014f8 <main+0x160>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	b21a      	sxth	r2, r3
 800146a:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <main+0x15c>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	b21b      	sxth	r3, r3
 8001470:	4313      	orrs	r3, r2
 8001472:	b21b      	sxth	r3, r3
 8001474:	b29a      	uxth	r2, r3
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <main+0x164>)
 8001478:	801a      	strh	r2, [r3, #0]
		  Temperature = (float)TEMP/16;
 800147a:	4b20      	ldr	r3, [pc, #128]	; (80014fc <main+0x164>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	ee07 3a90 	vmov	s15, r3
 8001482:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001486:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800148a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <main+0x154>)
 8001490:	edc3 7a00 	vstr	s15, [r3]

		  lcd_clear ();
 8001494:	f7ff fd68 	bl	8000f68 <lcd_clear>

		  // PWM MOTOR

		  //__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, 100);

		  avanceMotor(500); // (0-2000)
 8001498:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800149c:	f7ff ff60 	bl	8001360 <avanceMotor>
 80014a0:	e79a      	b.n	80013d8 <main+0x40>
		  //HAL_Delay(1);


	  }
	  else if(modo==1)
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <main+0x14c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d196      	bne.n	80013d8 <main+0x40>
	  {
		  HAL_GPIO_WritePin(PORT_LED,LED_MANUAL,1); // Enciendo led manual
 80014aa:	2201      	movs	r2, #1
 80014ac:	2110      	movs	r1, #16
 80014ae:	480e      	ldr	r0, [pc, #56]	; (80014e8 <main+0x150>)
 80014b0:	f000 fefa 	bl	80022a8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(PORT_LED,LED_AUTOM,0);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2104      	movs	r1, #4
 80014b8:	480b      	ldr	r0, [pc, #44]	; (80014e8 <main+0x150>)
 80014ba:	f000 fef5 	bl	80022a8 <HAL_GPIO_WritePin>

		  // Imprimir por lcd modo 1
		  Display_ModoManual();
 80014be:	f7ff fe41 	bl	8001144 <Display_ModoManual>

		  HAL_Delay(1000); //NO ES NECESARIO. Se pone incialmente para visualizar el texto por la lcd
 80014c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014c6:	f000 fc09 	bl	8001cdc <HAL_Delay>

		  lcd_clear ();
 80014ca:	f7ff fd4d 	bl	8000f68 <lcd_clear>

		  //PWM MOTOR
		  //pareMotor();
		  avanceMotor(50);
 80014ce:	2032      	movs	r0, #50	; 0x32
 80014d0:	f7ff ff46 	bl	8001360 <avanceMotor>
	  if(modo==0) // MODO AUTOMATICO
 80014d4:	e780      	b.n	80013d8 <main+0x40>
 80014d6:	bf00      	nop
 80014d8:	200002ac 	.word	0x200002ac
 80014dc:	2000026c 	.word	0x2000026c
 80014e0:	08005e3c 	.word	0x08005e3c
 80014e4:	200001f8 	.word	0x200001f8
 80014e8:	40021000 	.word	0x40021000
 80014ec:	200001fc 	.word	0x200001fc
 80014f0:	20000200 	.word	0x20000200
 80014f4:	2000026a 	.word	0x2000026a
 80014f8:	200002ee 	.word	0x200002ee
 80014fc:	20000268 	.word	0x20000268

08001500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b094      	sub	sp, #80	; 0x50
 8001504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001506:	f107 0320 	add.w	r3, r7, #32
 800150a:	2230      	movs	r2, #48	; 0x30
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f002 fc1e 	bl	8003d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <SystemClock_Config+0xc8>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	4a26      	ldr	r2, [pc, #152]	; (80015c8 <SystemClock_Config+0xc8>)
 800152e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001532:	6413      	str	r3, [r2, #64]	; 0x40
 8001534:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <SystemClock_Config+0xc8>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001540:	2300      	movs	r3, #0
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	4b21      	ldr	r3, [pc, #132]	; (80015cc <SystemClock_Config+0xcc>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a20      	ldr	r2, [pc, #128]	; (80015cc <SystemClock_Config+0xcc>)
 800154a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <SystemClock_Config+0xcc>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001558:	607b      	str	r3, [r7, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800155c:	2301      	movs	r3, #1
 800155e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001560:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001566:	2302      	movs	r3, #2
 8001568:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800156a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800156e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001570:	2304      	movs	r3, #4
 8001572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001574:	2332      	movs	r3, #50	; 0x32
 8001576:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001578:	2302      	movs	r3, #2
 800157a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800157c:	2304      	movs	r3, #4
 800157e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001580:	f107 0320 	add.w	r3, r7, #32
 8001584:	4618      	mov	r0, r3
 8001586:	f001 fb01 	bl	8002b8c <HAL_RCC_OscConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001590:	f000 f9ce 	bl	8001930 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001594:	230f      	movs	r3, #15
 8001596:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001598:	2302      	movs	r3, #2
 800159a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015aa:	f107 030c 	add.w	r3, r7, #12
 80015ae:	2101      	movs	r1, #1
 80015b0:	4618      	mov	r0, r3
 80015b2:	f001 fd5b 	bl	800306c <HAL_RCC_ClockConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80015bc:	f000 f9b8 	bl	8001930 <Error_Handler>
  }
}
 80015c0:	bf00      	nop
 80015c2:	3750      	adds	r7, #80	; 0x50
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40007000 	.word	0x40007000

080015d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <MX_I2C1_Init+0x50>)
 80015d6:	4a13      	ldr	r2, [pc, #76]	; (8001624 <MX_I2C1_Init+0x54>)
 80015d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <MX_I2C1_Init+0x50>)
 80015dc:	4a12      	ldr	r2, [pc, #72]	; (8001628 <MX_I2C1_Init+0x58>)
 80015de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <MX_I2C1_Init+0x50>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <MX_I2C1_Init+0x50>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <MX_I2C1_Init+0x50>)
 80015ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f4:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <MX_I2C1_Init+0x50>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <MX_I2C1_Init+0x50>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <MX_I2C1_Init+0x50>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <MX_I2C1_Init+0x50>)
 8001608:	2200      	movs	r2, #0
 800160a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800160c:	4804      	ldr	r0, [pc, #16]	; (8001620 <MX_I2C1_Init+0x50>)
 800160e:	f000 fe7d 	bl	800230c <HAL_I2C_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001618:	f000 f98a 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800161c:	bf00      	nop
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000210 	.word	0x20000210
 8001624:	40005400 	.word	0x40005400
 8001628:	000186a0 	.word	0x000186a0

0800162c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001632:	463b      	mov	r3, r7
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <MX_TIM6_Init+0x64>)
 800163c:	4a15      	ldr	r2, [pc, #84]	; (8001694 <MX_TIM6_Init+0x68>)
 800163e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 50-1;
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <MX_TIM6_Init+0x64>)
 8001642:	2231      	movs	r2, #49	; 0x31
 8001644:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <MX_TIM6_Init+0x64>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff-1;
 800164c:	4b10      	ldr	r3, [pc, #64]	; (8001690 <MX_TIM6_Init+0x64>)
 800164e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001652:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_TIM6_Init+0x64>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800165a:	480d      	ldr	r0, [pc, #52]	; (8001690 <MX_TIM6_Init+0x64>)
 800165c:	f001 fee4 	bl	8003428 <HAL_TIM_Base_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001666:	f000 f963 	bl	8001930 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001672:	463b      	mov	r3, r7
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_TIM6_Init+0x64>)
 8001678:	f002 faca 	bl	8003c10 <HAL_TIMEx_MasterConfigSynchronization>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001682:	f000 f955 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000026c 	.word	0x2000026c
 8001694:	40001000 	.word	0x40001000

08001698 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
 80016ac:	615a      	str	r2, [r3, #20]
 80016ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <MX_TIM9_Init+0x84>)
 80016b2:	4a1b      	ldr	r2, [pc, #108]	; (8001720 <MX_TIM9_Init+0x88>)
 80016b4:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 500-1;
 80016b6:	4b19      	ldr	r3, [pc, #100]	; (800171c <MX_TIM9_Init+0x84>)
 80016b8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80016bc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016be:	4b17      	ldr	r3, [pc, #92]	; (800171c <MX_TIM9_Init+0x84>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 2000-1;
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <MX_TIM9_Init+0x84>)
 80016c6:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80016ca:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <MX_TIM9_Init+0x84>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <MX_TIM9_Init+0x84>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80016d8:	4810      	ldr	r0, [pc, #64]	; (800171c <MX_TIM9_Init+0x84>)
 80016da:	f001 fef4 	bl	80034c6 <HAL_TIM_PWM_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM9_Init+0x50>
  {
    Error_Handler();
 80016e4:	f000 f924 	bl	8001930 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e8:	2360      	movs	r3, #96	; 0x60
 80016ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	2204      	movs	r2, #4
 80016fc:	4619      	mov	r1, r3
 80016fe:	4807      	ldr	r0, [pc, #28]	; (800171c <MX_TIM9_Init+0x84>)
 8001700:	f001 ff4a 	bl	8003598 <HAL_TIM_PWM_ConfigChannel>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 800170a:	f000 f911 	bl	8001930 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800170e:	4803      	ldr	r0, [pc, #12]	; (800171c <MX_TIM9_Init+0x84>)
 8001710:	f000 f9c6 	bl	8001aa0 <HAL_TIM_MspPostInit>

}
 8001714:	bf00      	nop
 8001716:	3720      	adds	r7, #32
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200002ac 	.word	0x200002ac
 8001720:	40014000 	.word	0x40014000

08001724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08c      	sub	sp, #48	; 0x30
 8001728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
 800173e:	4b5e      	ldr	r3, [pc, #376]	; (80018b8 <MX_GPIO_Init+0x194>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a5d      	ldr	r2, [pc, #372]	; (80018b8 <MX_GPIO_Init+0x194>)
 8001744:	f043 0310 	orr.w	r3, r3, #16
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b5b      	ldr	r3, [pc, #364]	; (80018b8 <MX_GPIO_Init+0x194>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0310 	and.w	r3, r3, #16
 8001752:	61bb      	str	r3, [r7, #24]
 8001754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	4b57      	ldr	r3, [pc, #348]	; (80018b8 <MX_GPIO_Init+0x194>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a56      	ldr	r2, [pc, #344]	; (80018b8 <MX_GPIO_Init+0x194>)
 8001760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b54      	ldr	r3, [pc, #336]	; (80018b8 <MX_GPIO_Init+0x194>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	4b50      	ldr	r3, [pc, #320]	; (80018b8 <MX_GPIO_Init+0x194>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a4f      	ldr	r2, [pc, #316]	; (80018b8 <MX_GPIO_Init+0x194>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b4d      	ldr	r3, [pc, #308]	; (80018b8 <MX_GPIO_Init+0x194>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b49      	ldr	r3, [pc, #292]	; (80018b8 <MX_GPIO_Init+0x194>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a48      	ldr	r2, [pc, #288]	; (80018b8 <MX_GPIO_Init+0x194>)
 8001798:	f043 0304 	orr.w	r3, r3, #4
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b46      	ldr	r3, [pc, #280]	; (80018b8 <MX_GPIO_Init+0x194>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	4b42      	ldr	r3, [pc, #264]	; (80018b8 <MX_GPIO_Init+0x194>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a41      	ldr	r2, [pc, #260]	; (80018b8 <MX_GPIO_Init+0x194>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <MX_GPIO_Init+0x194>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	4b3b      	ldr	r3, [pc, #236]	; (80018b8 <MX_GPIO_Init+0x194>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a3a      	ldr	r2, [pc, #232]	; (80018b8 <MX_GPIO_Init+0x194>)
 80017d0:	f043 0308 	orr.w	r3, r3, #8
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b38      	ldr	r3, [pc, #224]	; (80018b8 <MX_GPIO_Init+0x194>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_AUTOM_Pin|LED_MANUAL_Pin, GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2114      	movs	r1, #20
 80017e6:	4835      	ldr	r0, [pc, #212]	; (80018bc <MX_GPIO_Init+0x198>)
 80017e8:	f000 fd5e 	bl	80022a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DATA_DS18B20_GPIO_Port, DATA_DS18B20_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017f2:	4833      	ldr	r0, [pc, #204]	; (80018c0 <MX_GPIO_Init+0x19c>)
 80017f4:	f000 fd58 	bl	80022a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_INI1_Pin|MOTOR_INI2_Pin, GPIO_PIN_RESET);
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 7120 	mov.w	r1, #640	; 0x280
 80017fe:	4831      	ldr	r0, [pc, #196]	; (80018c4 <MX_GPIO_Init+0x1a0>)
 8001800:	f000 fd52 	bl	80022a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DATA_DHT11_GPIO_Port, DATA_DHT11_Pin, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800180a:	482f      	ldr	r0, [pc, #188]	; (80018c8 <MX_GPIO_Init+0x1a4>)
 800180c:	f000 fd4c 	bl	80022a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_AUTOM_Pin LED_MANUAL_Pin */
  GPIO_InitStruct.Pin = LED_AUTOM_Pin|LED_MANUAL_Pin;
 8001810:	2314      	movs	r3, #20
 8001812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001814:	2301      	movs	r3, #1
 8001816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001820:	f107 031c 	add.w	r3, r7, #28
 8001824:	4619      	mov	r1, r3
 8001826:	4825      	ldr	r0, [pc, #148]	; (80018bc <MX_GPIO_Init+0x198>)
 8001828:	f000 fb8c 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : DATA_DS18B20_Pin */
  GPIO_InitStruct.Pin = DATA_DS18B20_Pin;
 800182c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001832:	2301      	movs	r3, #1
 8001834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DATA_DS18B20_GPIO_Port, &GPIO_InitStruct);
 800183e:	f107 031c 	add.w	r3, r7, #28
 8001842:	4619      	mov	r1, r3
 8001844:	481e      	ldr	r0, [pc, #120]	; (80018c0 <MX_GPIO_Init+0x19c>)
 8001846:	f000 fb7d 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_INI1_Pin MOTOR_INI2_Pin */
  GPIO_InitStruct.Pin = MOTOR_INI1_Pin|MOTOR_INI2_Pin;
 800184a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800184e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	2301      	movs	r3, #1
 8001852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	4619      	mov	r1, r3
 8001862:	4818      	ldr	r0, [pc, #96]	; (80018c4 <MX_GPIO_Init+0x1a0>)
 8001864:	f000 fb6e 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : DATA_DHT11_Pin */
  GPIO_InitStruct.Pin = DATA_DHT11_Pin;
 8001868:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800186c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186e:	2301      	movs	r3, #1
 8001870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DATA_DHT11_GPIO_Port, &GPIO_InitStruct);
 800187a:	f107 031c 	add.w	r3, r7, #28
 800187e:	4619      	mov	r1, r3
 8001880:	4811      	ldr	r0, [pc, #68]	; (80018c8 <MX_GPIO_Init+0x1a4>)
 8001882:	f000 fb5f 	bl	8001f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PULSADOR_MODE_Pin */
  GPIO_InitStruct.Pin = PULSADOR_MODE_Pin;
 8001886:	2302      	movs	r3, #2
 8001888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <MX_GPIO_Init+0x1a8>)
 800188c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PULSADOR_MODE_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	4619      	mov	r1, r3
 8001898:	480d      	ldr	r0, [pc, #52]	; (80018d0 <MX_GPIO_Init+0x1ac>)
 800189a:	f000 fb53 	bl	8001f44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2100      	movs	r1, #0
 80018a2:	2007      	movs	r0, #7
 80018a4:	f000 fb17 	bl	8001ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80018a8:	2007      	movs	r0, #7
 80018aa:	f000 fb30 	bl	8001f0e <HAL_NVIC_EnableIRQ>

}
 80018ae:	bf00      	nop
 80018b0:	3730      	adds	r7, #48	; 0x30
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40021000 	.word	0x40021000
 80018c0:	40020400 	.word	0x40020400
 80018c4:	40020800 	.word	0x40020800
 80018c8:	40020000 	.word	0x40020000
 80018cc:	10110000 	.word	0x10110000
 80018d0:	40020c00 	.word	0x40020c00

080018d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	80fb      	strh	r3, [r7, #6]
	  if(GPIO_Pin==GPIO_PIN_1)
 80018de:	88fb      	ldrh	r3, [r7, #6]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d11c      	bne.n	800191e <HAL_GPIO_EXTI_Callback+0x4a>
	  	{
		  if(HAL_GPIO_ReadPin(PORT_PUSH,PUSH)&&(modo==0)) 		// Si estoy en modo automatico
 80018e4:	2102      	movs	r1, #2
 80018e6:	4810      	ldr	r0, [pc, #64]	; (8001928 <HAL_GPIO_EXTI_Callback+0x54>)
 80018e8:	f000 fcc6 	bl	8002278 <HAL_GPIO_ReadPin>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d007      	beq.n	8001902 <HAL_GPIO_EXTI_Callback+0x2e>
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_GPIO_EXTI_Callback+0x58>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d103      	bne.n	8001902 <HAL_GPIO_EXTI_Callback+0x2e>
		  {
			  modo=1; 											// Cambio a modo manual
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <HAL_GPIO_EXTI_Callback+0x58>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	601a      	str	r2, [r3, #0]
		  else if(HAL_GPIO_ReadPin(PORT_PUSH,PUSH)&&(modo==1)) 	// Si estoy en modo manual
		  {
			  modo=0; 											// Cambio a modo automatico
		  }
	  	}
}
 8001900:	e00d      	b.n	800191e <HAL_GPIO_EXTI_Callback+0x4a>
		  else if(HAL_GPIO_ReadPin(PORT_PUSH,PUSH)&&(modo==1)) 	// Si estoy en modo manual
 8001902:	2102      	movs	r1, #2
 8001904:	4808      	ldr	r0, [pc, #32]	; (8001928 <HAL_GPIO_EXTI_Callback+0x54>)
 8001906:	f000 fcb7 	bl	8002278 <HAL_GPIO_ReadPin>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d006      	beq.n	800191e <HAL_GPIO_EXTI_Callback+0x4a>
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_GPIO_EXTI_Callback+0x58>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d102      	bne.n	800191e <HAL_GPIO_EXTI_Callback+0x4a>
			  modo=0; 											// Cambio a modo automatico
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <HAL_GPIO_EXTI_Callback+0x58>)
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40020c00 	.word	0x40020c00
 800192c:	200001f8 	.word	0x200001f8

08001930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001934:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001936:	e7fe      	b.n	8001936 <Error_Handler+0x6>

08001938 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <HAL_MspInit+0x4c>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	4a0f      	ldr	r2, [pc, #60]	; (8001984 <HAL_MspInit+0x4c>)
 8001948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800194c:	6453      	str	r3, [r2, #68]	; 0x44
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <HAL_MspInit+0x4c>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	603b      	str	r3, [r7, #0]
 800195e:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_MspInit+0x4c>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	4a08      	ldr	r2, [pc, #32]	; (8001984 <HAL_MspInit+0x4c>)
 8001964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001968:	6413      	str	r3, [r2, #64]	; 0x40
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_MspInit+0x4c>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800

08001988 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a19      	ldr	r2, [pc, #100]	; (8001a0c <HAL_I2C_MspInit+0x84>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d12b      	bne.n	8001a02 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <HAL_I2C_MspInit+0x88>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a17      	ldr	r2, [pc, #92]	; (8001a10 <HAL_I2C_MspInit+0x88>)
 80019b4:	f043 0302 	orr.w	r3, r3, #2
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <HAL_I2C_MspInit+0x88>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	613b      	str	r3, [r7, #16]
 80019c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019c6:	23c0      	movs	r3, #192	; 0xc0
 80019c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019ca:	2312      	movs	r3, #18
 80019cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ce:	2301      	movs	r3, #1
 80019d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d2:	2303      	movs	r3, #3
 80019d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019d6:	2304      	movs	r3, #4
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	480c      	ldr	r0, [pc, #48]	; (8001a14 <HAL_I2C_MspInit+0x8c>)
 80019e2:	f000 faaf 	bl	8001f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_I2C_MspInit+0x88>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	4a08      	ldr	r2, [pc, #32]	; (8001a10 <HAL_I2C_MspInit+0x88>)
 80019f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019f4:	6413      	str	r3, [r2, #64]	; 0x40
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <HAL_I2C_MspInit+0x88>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a02:	bf00      	nop
 8001a04:	3728      	adds	r7, #40	; 0x28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40005400 	.word	0x40005400
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020400 	.word	0x40020400

08001a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <HAL_TIM_Base_MspInit+0x3c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d10d      	bne.n	8001a46 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <HAL_TIM_Base_MspInit+0x40>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <HAL_TIM_Base_MspInit+0x40>)
 8001a34:	f043 0310 	orr.w	r3, r3, #16
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <HAL_TIM_Base_MspInit+0x40>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40001000 	.word	0x40001000
 8001a58:	40023800 	.word	0x40023800

08001a5c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0b      	ldr	r2, [pc, #44]	; (8001a98 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d10d      	bne.n	8001a8a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_TIM_PWM_MspInit+0x40>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	4a09      	ldr	r2, [pc, #36]	; (8001a9c <HAL_TIM_PWM_MspInit+0x40>)
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7e:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <HAL_TIM_PWM_MspInit+0x40>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40014000 	.word	0x40014000
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <HAL_TIM_MspPostInit+0x68>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d11d      	bne.n	8001afe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_TIM_MspPostInit+0x6c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a10      	ldr	r2, [pc, #64]	; (8001b0c <HAL_TIM_MspPostInit+0x6c>)
 8001acc:	f043 0310 	orr.w	r3, r3, #16
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_TIM_MspPostInit+0x6c>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_TEMP_Pin;
 8001ade:	2340      	movs	r3, #64	; 0x40
 8001ae0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001aee:	2303      	movs	r3, #3
 8001af0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PWM_TEMP_GPIO_Port, &GPIO_InitStruct);
 8001af2:	f107 030c 	add.w	r3, r7, #12
 8001af6:	4619      	mov	r1, r3
 8001af8:	4805      	ldr	r0, [pc, #20]	; (8001b10 <HAL_TIM_MspPostInit+0x70>)
 8001afa:	f000 fa23 	bl	8001f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001afe:	bf00      	nop
 8001b00:	3720      	adds	r7, #32
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40014000 	.word	0x40014000
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40021000 	.word	0x40021000

08001b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <NMI_Handler+0x4>

08001b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <HardFault_Handler+0x4>

08001b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <MemManage_Handler+0x4>

08001b26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2a:	e7fe      	b.n	8001b2a <BusFault_Handler+0x4>

08001b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <UsageFault_Handler+0x4>

08001b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b60:	f000 f89c 	bl	8001c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001b6c:	2002      	movs	r0, #2
 8001b6e:	f000 fbb5 	bl	80022dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <SystemInit+0x28>)
 8001b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b82:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <SystemInit+0x28>)
 8001b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b8c:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <SystemInit+0x28>)
 8001b8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b92:	609a      	str	r2, [r3, #8]
#endif
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bdc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ba8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001baa:	e003      	b.n	8001bb4 <LoopCopyDataInit>

08001bac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bb2:	3104      	adds	r1, #4

08001bb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bb4:	480b      	ldr	r0, [pc, #44]	; (8001be4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bbc:	d3f6      	bcc.n	8001bac <CopyDataInit>
  ldr  r2, =_sbss
 8001bbe:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bc0:	e002      	b.n	8001bc8 <LoopFillZerobss>

08001bc2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bc2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bc4:	f842 3b04 	str.w	r3, [r2], #4

08001bc8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bcc:	d3f9      	bcc.n	8001bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bce:	f7ff ffd3 	bl	8001b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bd2:	f002 f899 	bl	8003d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bd6:	f7ff fbdf 	bl	8001398 <main>
  bx  lr    
 8001bda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bdc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001be0:	080060d0 	.word	0x080060d0
  ldr  r0, =_sdata
 8001be4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001be8:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001bec:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001bf0:	200002f8 	.word	0x200002f8

08001bf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bf4:	e7fe      	b.n	8001bf4 <ADC_IRQHandler>
	...

08001bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <HAL_Init+0x40>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0d      	ldr	r2, [pc, #52]	; (8001c38 <HAL_Init+0x40>)
 8001c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <HAL_Init+0x40>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <HAL_Init+0x40>)
 8001c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <HAL_Init+0x40>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a07      	ldr	r2, [pc, #28]	; (8001c38 <HAL_Init+0x40>)
 8001c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c20:	2003      	movs	r0, #3
 8001c22:	f000 f94d 	bl	8001ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c26:	2000      	movs	r0, #0
 8001c28:	f000 f808 	bl	8001c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c2c:	f7ff fe84 	bl	8001938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40023c00 	.word	0x40023c00

08001c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_InitTick+0x54>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_InitTick+0x58>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 f965 	bl	8001f2a <HAL_SYSTICK_Config>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00e      	b.n	8001c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b0f      	cmp	r3, #15
 8001c6e:	d80a      	bhi.n	8001c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c70:	2200      	movs	r2, #0
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f000 f92d 	bl	8001ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c7c:	4a06      	ldr	r2, [pc, #24]	; (8001c98 <HAL_InitTick+0x5c>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e000      	b.n	8001c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000000 	.word	0x20000000
 8001c94:	20000008 	.word	0x20000008
 8001c98:	20000004 	.word	0x20000004

08001c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_IncTick+0x20>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_IncTick+0x24>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <HAL_IncTick+0x24>)
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	200002f0 	.word	0x200002f0

08001cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <HAL_GetTick+0x14>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	200002f0 	.word	0x200002f0

08001cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce4:	f7ff ffee 	bl	8001cc4 <HAL_GetTick>
 8001ce8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf4:	d005      	beq.n	8001d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_Delay+0x40>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d02:	bf00      	nop
 8001d04:	f7ff ffde 	bl	8001cc4 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d8f7      	bhi.n	8001d04 <HAL_Delay+0x28>
  {
  }
}
 8001d14:	bf00      	nop
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000008 	.word	0x20000008

08001d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d52:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	60d3      	str	r3, [r2, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <__NVIC_GetPriorityGrouping+0x18>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	f003 0307 	and.w	r3, r3, #7
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	db0b      	blt.n	8001dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	f003 021f 	and.w	r2, r3, #31
 8001d9c:	4907      	ldr	r1, [pc, #28]	; (8001dbc <__NVIC_EnableIRQ+0x38>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	2001      	movs	r0, #1
 8001da6:	fa00 f202 	lsl.w	r2, r0, r2
 8001daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	e000e100 	.word	0xe000e100

08001dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	db0a      	blt.n	8001dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	490c      	ldr	r1, [pc, #48]	; (8001e0c <__NVIC_SetPriority+0x4c>)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	0112      	lsls	r2, r2, #4
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	440b      	add	r3, r1
 8001de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de8:	e00a      	b.n	8001e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	4908      	ldr	r1, [pc, #32]	; (8001e10 <__NVIC_SetPriority+0x50>)
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	3b04      	subs	r3, #4
 8001df8:	0112      	lsls	r2, r2, #4
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	761a      	strb	r2, [r3, #24]
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000e100 	.word	0xe000e100
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b089      	sub	sp, #36	; 0x24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f1c3 0307 	rsb	r3, r3, #7
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	bf28      	it	cs
 8001e32:	2304      	movcs	r3, #4
 8001e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3304      	adds	r3, #4
 8001e3a:	2b06      	cmp	r3, #6
 8001e3c:	d902      	bls.n	8001e44 <NVIC_EncodePriority+0x30>
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3b03      	subs	r3, #3
 8001e42:	e000      	b.n	8001e46 <NVIC_EncodePriority+0x32>
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	f04f 32ff 	mov.w	r2, #4294967295
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43da      	mvns	r2, r3
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	401a      	ands	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fa01 f303 	lsl.w	r3, r1, r3
 8001e66:	43d9      	mvns	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e6c:	4313      	orrs	r3, r2
         );
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3724      	adds	r7, #36	; 0x24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e8c:	d301      	bcc.n	8001e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e00f      	b.n	8001eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <SysTick_Config+0x40>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9a:	210f      	movs	r1, #15
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea0:	f7ff ff8e 	bl	8001dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <SysTick_Config+0x40>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eaa:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <SysTick_Config+0x40>)
 8001eac:	2207      	movs	r2, #7
 8001eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	e000e010 	.word	0xe000e010

08001ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ff29 	bl	8001d20 <__NVIC_SetPriorityGrouping>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee8:	f7ff ff3e 	bl	8001d68 <__NVIC_GetPriorityGrouping>
 8001eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	6978      	ldr	r0, [r7, #20]
 8001ef4:	f7ff ff8e 	bl	8001e14 <NVIC_EncodePriority>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff5d 	bl	8001dc0 <__NVIC_SetPriority>
}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff31 	bl	8001d84 <__NVIC_EnableIRQ>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff ffa2 	bl	8001e7c <SysTick_Config>
 8001f38:	4603      	mov	r3, r0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b089      	sub	sp, #36	; 0x24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
 8001f5e:	e16b      	b.n	8002238 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f60:	2201      	movs	r2, #1
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	4013      	ands	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	f040 815a 	bne.w	8002232 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d00b      	beq.n	8001f9e <HAL_GPIO_Init+0x5a>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d007      	beq.n	8001f9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f92:	2b11      	cmp	r3, #17
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b12      	cmp	r3, #18
 8001f9c:	d130      	bne.n	8002000 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	2203      	movs	r2, #3
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	f003 0201 	and.w	r2, r3, #1
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	2203      	movs	r2, #3
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0xfc>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b12      	cmp	r3, #18
 800203e:	d123      	bne.n	8002088 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	08da      	lsrs	r2, r3, #3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3208      	adds	r2, #8
 8002048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800204c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	220f      	movs	r2, #15
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	08da      	lsrs	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3208      	adds	r2, #8
 8002082:	69b9      	ldr	r1, [r7, #24]
 8002084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	2203      	movs	r2, #3
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0203 	and.w	r2, r3, #3
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 80b4 	beq.w	8002232 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	4b5f      	ldr	r3, [pc, #380]	; (800224c <HAL_GPIO_Init+0x308>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	4a5e      	ldr	r2, [pc, #376]	; (800224c <HAL_GPIO_Init+0x308>)
 80020d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d8:	6453      	str	r3, [r2, #68]	; 0x44
 80020da:	4b5c      	ldr	r3, [pc, #368]	; (800224c <HAL_GPIO_Init+0x308>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020e6:	4a5a      	ldr	r2, [pc, #360]	; (8002250 <HAL_GPIO_Init+0x30c>)
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	089b      	lsrs	r3, r3, #2
 80020ec:	3302      	adds	r3, #2
 80020ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	220f      	movs	r2, #15
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a51      	ldr	r2, [pc, #324]	; (8002254 <HAL_GPIO_Init+0x310>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d02b      	beq.n	800216a <HAL_GPIO_Init+0x226>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a50      	ldr	r2, [pc, #320]	; (8002258 <HAL_GPIO_Init+0x314>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d025      	beq.n	8002166 <HAL_GPIO_Init+0x222>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4f      	ldr	r2, [pc, #316]	; (800225c <HAL_GPIO_Init+0x318>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d01f      	beq.n	8002162 <HAL_GPIO_Init+0x21e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4e      	ldr	r2, [pc, #312]	; (8002260 <HAL_GPIO_Init+0x31c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d019      	beq.n	800215e <HAL_GPIO_Init+0x21a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a4d      	ldr	r2, [pc, #308]	; (8002264 <HAL_GPIO_Init+0x320>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d013      	beq.n	800215a <HAL_GPIO_Init+0x216>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a4c      	ldr	r2, [pc, #304]	; (8002268 <HAL_GPIO_Init+0x324>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d00d      	beq.n	8002156 <HAL_GPIO_Init+0x212>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a4b      	ldr	r2, [pc, #300]	; (800226c <HAL_GPIO_Init+0x328>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d007      	beq.n	8002152 <HAL_GPIO_Init+0x20e>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a4a      	ldr	r2, [pc, #296]	; (8002270 <HAL_GPIO_Init+0x32c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d101      	bne.n	800214e <HAL_GPIO_Init+0x20a>
 800214a:	2307      	movs	r3, #7
 800214c:	e00e      	b.n	800216c <HAL_GPIO_Init+0x228>
 800214e:	2308      	movs	r3, #8
 8002150:	e00c      	b.n	800216c <HAL_GPIO_Init+0x228>
 8002152:	2306      	movs	r3, #6
 8002154:	e00a      	b.n	800216c <HAL_GPIO_Init+0x228>
 8002156:	2305      	movs	r3, #5
 8002158:	e008      	b.n	800216c <HAL_GPIO_Init+0x228>
 800215a:	2304      	movs	r3, #4
 800215c:	e006      	b.n	800216c <HAL_GPIO_Init+0x228>
 800215e:	2303      	movs	r3, #3
 8002160:	e004      	b.n	800216c <HAL_GPIO_Init+0x228>
 8002162:	2302      	movs	r3, #2
 8002164:	e002      	b.n	800216c <HAL_GPIO_Init+0x228>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <HAL_GPIO_Init+0x228>
 800216a:	2300      	movs	r3, #0
 800216c:	69fa      	ldr	r2, [r7, #28]
 800216e:	f002 0203 	and.w	r2, r2, #3
 8002172:	0092      	lsls	r2, r2, #2
 8002174:	4093      	lsls	r3, r2
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800217c:	4934      	ldr	r1, [pc, #208]	; (8002250 <HAL_GPIO_Init+0x30c>)
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	3302      	adds	r3, #2
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800218a:	4b3a      	ldr	r3, [pc, #232]	; (8002274 <HAL_GPIO_Init+0x330>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021ae:	4a31      	ldr	r2, [pc, #196]	; (8002274 <HAL_GPIO_Init+0x330>)
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021b4:	4b2f      	ldr	r3, [pc, #188]	; (8002274 <HAL_GPIO_Init+0x330>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021d8:	4a26      	ldr	r2, [pc, #152]	; (8002274 <HAL_GPIO_Init+0x330>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021de:	4b25      	ldr	r3, [pc, #148]	; (8002274 <HAL_GPIO_Init+0x330>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002202:	4a1c      	ldr	r2, [pc, #112]	; (8002274 <HAL_GPIO_Init+0x330>)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002208:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <HAL_GPIO_Init+0x330>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800222c:	4a11      	ldr	r2, [pc, #68]	; (8002274 <HAL_GPIO_Init+0x330>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3301      	adds	r3, #1
 8002236:	61fb      	str	r3, [r7, #28]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	2b0f      	cmp	r3, #15
 800223c:	f67f ae90 	bls.w	8001f60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002240:	bf00      	nop
 8002242:	3724      	adds	r7, #36	; 0x24
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	40023800 	.word	0x40023800
 8002250:	40013800 	.word	0x40013800
 8002254:	40020000 	.word	0x40020000
 8002258:	40020400 	.word	0x40020400
 800225c:	40020800 	.word	0x40020800
 8002260:	40020c00 	.word	0x40020c00
 8002264:	40021000 	.word	0x40021000
 8002268:	40021400 	.word	0x40021400
 800226c:	40021800 	.word	0x40021800
 8002270:	40021c00 	.word	0x40021c00
 8002274:	40013c00 	.word	0x40013c00

08002278 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	887b      	ldrh	r3, [r7, #2]
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d002      	beq.n	8002296 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002290:	2301      	movs	r3, #1
 8002292:	73fb      	strb	r3, [r7, #15]
 8002294:	e001      	b.n	800229a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800229a:	7bfb      	ldrb	r3, [r7, #15]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	807b      	strh	r3, [r7, #2]
 80022b4:	4613      	mov	r3, r2
 80022b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022b8:	787b      	ldrb	r3, [r7, #1]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022be:	887a      	ldrh	r2, [r7, #2]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022c4:	e003      	b.n	80022ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022c6:	887b      	ldrh	r3, [r7, #2]
 80022c8:	041a      	lsls	r2, r3, #16
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	619a      	str	r2, [r3, #24]
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	4013      	ands	r3, r2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d006      	beq.n	8002300 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022f2:	4a05      	ldr	r2, [pc, #20]	; (8002308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff faea 	bl	80018d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40013c00 	.word	0x40013c00

0800230c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e11f      	b.n	800255e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff fb28 	bl	8001988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2224      	movs	r2, #36	; 0x24
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0201 	bic.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800235e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800236e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002370:	f001 f846 	bl	8003400 <HAL_RCC_GetPCLK1Freq>
 8002374:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	4a7b      	ldr	r2, [pc, #492]	; (8002568 <HAL_I2C_Init+0x25c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d807      	bhi.n	8002390 <HAL_I2C_Init+0x84>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4a7a      	ldr	r2, [pc, #488]	; (800256c <HAL_I2C_Init+0x260>)
 8002384:	4293      	cmp	r3, r2
 8002386:	bf94      	ite	ls
 8002388:	2301      	movls	r3, #1
 800238a:	2300      	movhi	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	e006      	b.n	800239e <HAL_I2C_Init+0x92>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4a77      	ldr	r2, [pc, #476]	; (8002570 <HAL_I2C_Init+0x264>)
 8002394:	4293      	cmp	r3, r2
 8002396:	bf94      	ite	ls
 8002398:	2301      	movls	r3, #1
 800239a:	2300      	movhi	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e0db      	b.n	800255e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4a72      	ldr	r2, [pc, #456]	; (8002574 <HAL_I2C_Init+0x268>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	0c9b      	lsrs	r3, r3, #18
 80023b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a64      	ldr	r2, [pc, #400]	; (8002568 <HAL_I2C_Init+0x25c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d802      	bhi.n	80023e0 <HAL_I2C_Init+0xd4>
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	3301      	adds	r3, #1
 80023de:	e009      	b.n	80023f4 <HAL_I2C_Init+0xe8>
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023e6:	fb02 f303 	mul.w	r3, r2, r3
 80023ea:	4a63      	ldr	r2, [pc, #396]	; (8002578 <HAL_I2C_Init+0x26c>)
 80023ec:	fba2 2303 	umull	r2, r3, r2, r3
 80023f0:	099b      	lsrs	r3, r3, #6
 80023f2:	3301      	adds	r3, #1
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	430b      	orrs	r3, r1
 80023fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002406:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4956      	ldr	r1, [pc, #344]	; (8002568 <HAL_I2C_Init+0x25c>)
 8002410:	428b      	cmp	r3, r1
 8002412:	d80d      	bhi.n	8002430 <HAL_I2C_Init+0x124>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1e59      	subs	r1, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002422:	3301      	adds	r3, #1
 8002424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002428:	2b04      	cmp	r3, #4
 800242a:	bf38      	it	cc
 800242c:	2304      	movcc	r3, #4
 800242e:	e04f      	b.n	80024d0 <HAL_I2C_Init+0x1c4>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d111      	bne.n	800245c <HAL_I2C_Init+0x150>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	1e58      	subs	r0, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	440b      	add	r3, r1
 8002446:	fbb0 f3f3 	udiv	r3, r0, r3
 800244a:	3301      	adds	r3, #1
 800244c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002450:	2b00      	cmp	r3, #0
 8002452:	bf0c      	ite	eq
 8002454:	2301      	moveq	r3, #1
 8002456:	2300      	movne	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	e012      	b.n	8002482 <HAL_I2C_Init+0x176>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1e58      	subs	r0, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6859      	ldr	r1, [r3, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	0099      	lsls	r1, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002472:	3301      	adds	r3, #1
 8002474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002478:	2b00      	cmp	r3, #0
 800247a:	bf0c      	ite	eq
 800247c:	2301      	moveq	r3, #1
 800247e:	2300      	movne	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_I2C_Init+0x17e>
 8002486:	2301      	movs	r3, #1
 8002488:	e022      	b.n	80024d0 <HAL_I2C_Init+0x1c4>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10e      	bne.n	80024b0 <HAL_I2C_Init+0x1a4>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1e58      	subs	r0, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6859      	ldr	r1, [r3, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	440b      	add	r3, r1
 80024a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80024a4:	3301      	adds	r3, #1
 80024a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024ae:	e00f      	b.n	80024d0 <HAL_I2C_Init+0x1c4>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1e58      	subs	r0, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	0099      	lsls	r1, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024c6:	3301      	adds	r3, #1
 80024c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	6809      	ldr	r1, [r1, #0]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69da      	ldr	r2, [r3, #28]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	431a      	orrs	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6911      	ldr	r1, [r2, #16]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68d2      	ldr	r2, [r2, #12]
 800250a:	4311      	orrs	r1, r2
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	430b      	orrs	r3, r1
 8002512:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695a      	ldr	r2, [r3, #20]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0201 	orr.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2220      	movs	r2, #32
 800254a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	000186a0 	.word	0x000186a0
 800256c:	001e847f 	.word	0x001e847f
 8002570:	003d08ff 	.word	0x003d08ff
 8002574:	431bde83 	.word	0x431bde83
 8002578:	10624dd3 	.word	0x10624dd3

0800257c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af02      	add	r7, sp, #8
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	461a      	mov	r2, r3
 8002588:	460b      	mov	r3, r1
 800258a:	817b      	strh	r3, [r7, #10]
 800258c:	4613      	mov	r3, r2
 800258e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002590:	f7ff fb98 	bl	8001cc4 <HAL_GetTick>
 8002594:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b20      	cmp	r3, #32
 80025a0:	f040 80e0 	bne.w	8002764 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	2319      	movs	r3, #25
 80025aa:	2201      	movs	r2, #1
 80025ac:	4970      	ldr	r1, [pc, #448]	; (8002770 <HAL_I2C_Master_Transmit+0x1f4>)
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f964 	bl	800287c <I2C_WaitOnFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025ba:	2302      	movs	r3, #2
 80025bc:	e0d3      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_I2C_Master_Transmit+0x50>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e0cc      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1ea>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d007      	beq.n	80025f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0201 	orr.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002600:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2221      	movs	r2, #33	; 0x21
 8002606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2210      	movs	r2, #16
 800260e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	893a      	ldrh	r2, [r7, #8]
 8002622:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4a50      	ldr	r2, [pc, #320]	; (8002774 <HAL_I2C_Master_Transmit+0x1f8>)
 8002632:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002634:	8979      	ldrh	r1, [r7, #10]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	6a3a      	ldr	r2, [r7, #32]
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 f89c 	bl	8002778 <I2C_MasterRequestWrite>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e08d      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800264a:	2300      	movs	r3, #0
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002660:	e066      	b.n	8002730 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	6a39      	ldr	r1, [r7, #32]
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 f9de 	bl	8002a28 <I2C_WaitOnTXEFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00d      	beq.n	800268e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	2b04      	cmp	r3, #4
 8002678:	d107      	bne.n	800268a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002688:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e06b      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	781a      	ldrb	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	1c5a      	adds	r2, r3, #1
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d11b      	bne.n	8002704 <HAL_I2C_Master_Transmit+0x188>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d017      	beq.n	8002704 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	781a      	ldrb	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	6a39      	ldr	r1, [r7, #32]
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 f9ce 	bl	8002aaa <I2C_WaitOnBTFFlagUntilTimeout>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00d      	beq.n	8002730 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002718:	2b04      	cmp	r3, #4
 800271a:	d107      	bne.n	800272c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e01a      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002734:	2b00      	cmp	r3, #0
 8002736:	d194      	bne.n	8002662 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	e000      	b.n	8002766 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002764:	2302      	movs	r3, #2
  }
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	00100002 	.word	0x00100002
 8002774:	ffff0000 	.word	0xffff0000

08002778 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af02      	add	r7, sp, #8
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	460b      	mov	r3, r1
 8002786:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2b08      	cmp	r3, #8
 8002792:	d006      	beq.n	80027a2 <I2C_MasterRequestWrite+0x2a>
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d003      	beq.n	80027a2 <I2C_MasterRequestWrite+0x2a>
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027a0:	d108      	bne.n	80027b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	e00b      	b.n	80027cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	2b12      	cmp	r3, #18
 80027ba:	d107      	bne.n	80027cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f84f 	bl	800287c <I2C_WaitOnFlagUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00d      	beq.n	8002800 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027f2:	d103      	bne.n	80027fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e035      	b.n	800286c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002808:	d108      	bne.n	800281c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800280a:	897b      	ldrh	r3, [r7, #10]
 800280c:	b2db      	uxtb	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002818:	611a      	str	r2, [r3, #16]
 800281a:	e01b      	b.n	8002854 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800281c:	897b      	ldrh	r3, [r7, #10]
 800281e:	11db      	asrs	r3, r3, #7
 8002820:	b2db      	uxtb	r3, r3
 8002822:	f003 0306 	and.w	r3, r3, #6
 8002826:	b2db      	uxtb	r3, r3
 8002828:	f063 030f 	orn	r3, r3, #15
 800282c:	b2da      	uxtb	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	490e      	ldr	r1, [pc, #56]	; (8002874 <I2C_MasterRequestWrite+0xfc>)
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 f875 	bl	800292a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e010      	b.n	800286c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800284a:	897b      	ldrh	r3, [r7, #10]
 800284c:	b2da      	uxtb	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	4907      	ldr	r1, [pc, #28]	; (8002878 <I2C_MasterRequestWrite+0x100>)
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f865 	bl	800292a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	00010008 	.word	0x00010008
 8002878:	00010002 	.word	0x00010002

0800287c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	4613      	mov	r3, r2
 800288a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800288c:	e025      	b.n	80028da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002894:	d021      	beq.n	80028da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002896:	f7ff fa15 	bl	8001cc4 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d302      	bcc.n	80028ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d116      	bne.n	80028da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f043 0220 	orr.w	r2, r3, #32
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e023      	b.n	8002922 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	0c1b      	lsrs	r3, r3, #16
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d10d      	bne.n	8002900 <I2C_WaitOnFlagUntilTimeout+0x84>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	43da      	mvns	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4013      	ands	r3, r2
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	bf0c      	ite	eq
 80028f6:	2301      	moveq	r3, #1
 80028f8:	2300      	movne	r3, #0
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	e00c      	b.n	800291a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	43da      	mvns	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4013      	ands	r3, r2
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	bf0c      	ite	eq
 8002912:	2301      	moveq	r3, #1
 8002914:	2300      	movne	r3, #0
 8002916:	b2db      	uxtb	r3, r3
 8002918:	461a      	mov	r2, r3
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	429a      	cmp	r2, r3
 800291e:	d0b6      	beq.n	800288e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b084      	sub	sp, #16
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
 8002936:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002938:	e051      	b.n	80029de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002948:	d123      	bne.n	8002992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002958:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002962:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f043 0204 	orr.w	r2, r3, #4
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e046      	b.n	8002a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002998:	d021      	beq.n	80029de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800299a:	f7ff f993 	bl	8001cc4 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d302      	bcc.n	80029b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d116      	bne.n	80029de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f043 0220 	orr.w	r2, r3, #32
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e020      	b.n	8002a20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	0c1b      	lsrs	r3, r3, #16
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d10c      	bne.n	8002a02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	43da      	mvns	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	4013      	ands	r3, r2
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	bf14      	ite	ne
 80029fa:	2301      	movne	r3, #1
 80029fc:	2300      	moveq	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	e00b      	b.n	8002a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	43da      	mvns	r2, r3
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	bf14      	ite	ne
 8002a14:	2301      	movne	r3, #1
 8002a16:	2300      	moveq	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d18d      	bne.n	800293a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a34:	e02d      	b.n	8002a92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f878 	bl	8002b2c <I2C_IsAcknowledgeFailed>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e02d      	b.n	8002aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4c:	d021      	beq.n	8002a92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a4e:	f7ff f939 	bl	8001cc4 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d302      	bcc.n	8002a64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d116      	bne.n	8002a92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f043 0220 	orr.w	r2, r3, #32
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e007      	b.n	8002aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9c:	2b80      	cmp	r3, #128	; 0x80
 8002a9e:	d1ca      	bne.n	8002a36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b084      	sub	sp, #16
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ab6:	e02d      	b.n	8002b14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 f837 	bl	8002b2c <I2C_IsAcknowledgeFailed>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e02d      	b.n	8002b24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ace:	d021      	beq.n	8002b14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad0:	f7ff f8f8 	bl	8001cc4 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d302      	bcc.n	8002ae6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d116      	bne.n	8002b14 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	f043 0220 	orr.w	r2, r3, #32
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e007      	b.n	8002b24 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b04      	cmp	r3, #4
 8002b20:	d1ca      	bne.n	8002ab8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3710      	adds	r7, #16
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b42:	d11b      	bne.n	8002b7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	f043 0204 	orr.w	r2, r3, #4
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e000      	b.n	8002b7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e25b      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d075      	beq.n	8002c96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002baa:	4ba3      	ldr	r3, [pc, #652]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	d00c      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bb6:	4ba0      	ldr	r3, [pc, #640]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d112      	bne.n	8002be8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bc2:	4b9d      	ldr	r3, [pc, #628]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bce:	d10b      	bne.n	8002be8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bd0:	4b99      	ldr	r3, [pc, #612]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d05b      	beq.n	8002c94 <HAL_RCC_OscConfig+0x108>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d157      	bne.n	8002c94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e236      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf0:	d106      	bne.n	8002c00 <HAL_RCC_OscConfig+0x74>
 8002bf2:	4b91      	ldr	r3, [pc, #580]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a90      	ldr	r2, [pc, #576]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	e01d      	b.n	8002c3c <HAL_RCC_OscConfig+0xb0>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c08:	d10c      	bne.n	8002c24 <HAL_RCC_OscConfig+0x98>
 8002c0a:	4b8b      	ldr	r3, [pc, #556]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a8a      	ldr	r2, [pc, #552]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	4b88      	ldr	r3, [pc, #544]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a87      	ldr	r2, [pc, #540]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e00b      	b.n	8002c3c <HAL_RCC_OscConfig+0xb0>
 8002c24:	4b84      	ldr	r3, [pc, #528]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a83      	ldr	r2, [pc, #524]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	4b81      	ldr	r3, [pc, #516]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a80      	ldr	r2, [pc, #512]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d013      	beq.n	8002c6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c44:	f7ff f83e 	bl	8001cc4 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7ff f83a 	bl	8001cc4 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	; 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e1fb      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c5e:	4b76      	ldr	r3, [pc, #472]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0xc0>
 8002c6a:	e014      	b.n	8002c96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6c:	f7ff f82a 	bl	8001cc4 <HAL_GetTick>
 8002c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c74:	f7ff f826 	bl	8001cc4 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b64      	cmp	r3, #100	; 0x64
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e1e7      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c86:	4b6c      	ldr	r3, [pc, #432]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f0      	bne.n	8002c74 <HAL_RCC_OscConfig+0xe8>
 8002c92:	e000      	b.n	8002c96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d063      	beq.n	8002d6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ca2:	4b65      	ldr	r3, [pc, #404]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00b      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cae:	4b62      	ldr	r3, [pc, #392]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d11c      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cba:	4b5f      	ldr	r3, [pc, #380]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d116      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc6:	4b5c      	ldr	r3, [pc, #368]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d005      	beq.n	8002cde <HAL_RCC_OscConfig+0x152>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d001      	beq.n	8002cde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e1bb      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cde:	4b56      	ldr	r3, [pc, #344]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4952      	ldr	r1, [pc, #328]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cf2:	e03a      	b.n	8002d6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d020      	beq.n	8002d3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cfc:	4b4f      	ldr	r3, [pc, #316]	; (8002e3c <HAL_RCC_OscConfig+0x2b0>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d02:	f7fe ffdf 	bl	8001cc4 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d0a:	f7fe ffdb 	bl	8001cc4 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e19c      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d1c:	4b46      	ldr	r3, [pc, #280]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d28:	4b43      	ldr	r3, [pc, #268]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4940      	ldr	r1, [pc, #256]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	600b      	str	r3, [r1, #0]
 8002d3c:	e015      	b.n	8002d6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d3e:	4b3f      	ldr	r3, [pc, #252]	; (8002e3c <HAL_RCC_OscConfig+0x2b0>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fe ffbe 	bl	8001cc4 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d4c:	f7fe ffba 	bl	8001cc4 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e17b      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5e:	4b36      	ldr	r3, [pc, #216]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d030      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d016      	beq.n	8002dac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d7e:	4b30      	ldr	r3, [pc, #192]	; (8002e40 <HAL_RCC_OscConfig+0x2b4>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d84:	f7fe ff9e 	bl	8001cc4 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d8c:	f7fe ff9a 	bl	8001cc4 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e15b      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d9e:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCC_OscConfig+0x200>
 8002daa:	e015      	b.n	8002dd8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dac:	4b24      	ldr	r3, [pc, #144]	; (8002e40 <HAL_RCC_OscConfig+0x2b4>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db2:	f7fe ff87 	bl	8001cc4 <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dba:	f7fe ff83 	bl	8001cc4 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e144      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dcc:	4b1a      	ldr	r3, [pc, #104]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1f0      	bne.n	8002dba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 80a0 	beq.w	8002f26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de6:	2300      	movs	r3, #0
 8002de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dea:	4b13      	ldr	r3, [pc, #76]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10f      	bne.n	8002e16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	4a0e      	ldr	r2, [pc, #56]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e04:	6413      	str	r3, [r2, #64]	; 0x40
 8002e06:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <HAL_RCC_OscConfig+0x2ac>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e12:	2301      	movs	r3, #1
 8002e14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e16:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_OscConfig+0x2b8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d121      	bne.n	8002e66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <HAL_RCC_OscConfig+0x2b8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a07      	ldr	r2, [pc, #28]	; (8002e44 <HAL_RCC_OscConfig+0x2b8>)
 8002e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e2e:	f7fe ff49 	bl	8001cc4 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e34:	e011      	b.n	8002e5a <HAL_RCC_OscConfig+0x2ce>
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	42470000 	.word	0x42470000
 8002e40:	42470e80 	.word	0x42470e80
 8002e44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e48:	f7fe ff3c 	bl	8001cc4 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e0fd      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5a:	4b81      	ldr	r3, [pc, #516]	; (8003060 <HAL_RCC_OscConfig+0x4d4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d106      	bne.n	8002e7c <HAL_RCC_OscConfig+0x2f0>
 8002e6e:	4b7d      	ldr	r3, [pc, #500]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	4a7c      	ldr	r2, [pc, #496]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7a:	e01c      	b.n	8002eb6 <HAL_RCC_OscConfig+0x32a>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b05      	cmp	r3, #5
 8002e82:	d10c      	bne.n	8002e9e <HAL_RCC_OscConfig+0x312>
 8002e84:	4b77      	ldr	r3, [pc, #476]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e88:	4a76      	ldr	r2, [pc, #472]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002e8a:	f043 0304 	orr.w	r3, r3, #4
 8002e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e90:	4b74      	ldr	r3, [pc, #464]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	4a73      	ldr	r2, [pc, #460]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e9c:	e00b      	b.n	8002eb6 <HAL_RCC_OscConfig+0x32a>
 8002e9e:	4b71      	ldr	r3, [pc, #452]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea2:	4a70      	ldr	r2, [pc, #448]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eaa:	4b6e      	ldr	r3, [pc, #440]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eae:	4a6d      	ldr	r2, [pc, #436]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002eb0:	f023 0304 	bic.w	r3, r3, #4
 8002eb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d015      	beq.n	8002eea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ebe:	f7fe ff01 	bl	8001cc4 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec4:	e00a      	b.n	8002edc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec6:	f7fe fefd 	bl	8001cc4 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e0bc      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002edc:	4b61      	ldr	r3, [pc, #388]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0ee      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x33a>
 8002ee8:	e014      	b.n	8002f14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eea:	f7fe feeb 	bl	8001cc4 <HAL_GetTick>
 8002eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef0:	e00a      	b.n	8002f08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef2:	f7fe fee7 	bl	8001cc4 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d901      	bls.n	8002f08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e0a6      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f08:	4b56      	ldr	r3, [pc, #344]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1ee      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f14:	7dfb      	ldrb	r3, [r7, #23]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d105      	bne.n	8002f26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f1a:	4b52      	ldr	r3, [pc, #328]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	4a51      	ldr	r2, [pc, #324]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 8092 	beq.w	8003054 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f30:	4b4c      	ldr	r3, [pc, #304]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 030c 	and.w	r3, r3, #12
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d05c      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d141      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f44:	4b48      	ldr	r3, [pc, #288]	; (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4a:	f7fe febb 	bl	8001cc4 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f52:	f7fe feb7 	bl	8001cc4 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e078      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f64:	4b3f      	ldr	r3, [pc, #252]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1f0      	bne.n	8002f52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69da      	ldr	r2, [r3, #28]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	019b      	lsls	r3, r3, #6
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	085b      	lsrs	r3, r3, #1
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	041b      	lsls	r3, r3, #16
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	061b      	lsls	r3, r3, #24
 8002f94:	4933      	ldr	r1, [pc, #204]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f9a:	4b33      	ldr	r3, [pc, #204]	; (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fe90 	bl	8001cc4 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7fe fe8c 	bl	8001cc4 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e04d      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fba:	4b2a      	ldr	r3, [pc, #168]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f0      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x41c>
 8002fc6:	e045      	b.n	8003054 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc8:	4b27      	ldr	r3, [pc, #156]	; (8003068 <HAL_RCC_OscConfig+0x4dc>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fce:	f7fe fe79 	bl	8001cc4 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fd6:	f7fe fe75 	bl	8001cc4 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e036      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fe8:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f0      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x44a>
 8002ff4:	e02e      	b.n	8003054 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e029      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003002:	4b18      	ldr	r3, [pc, #96]	; (8003064 <HAL_RCC_OscConfig+0x4d8>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	429a      	cmp	r2, r3
 8003014:	d11c      	bne.n	8003050 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003020:	429a      	cmp	r2, r3
 8003022:	d115      	bne.n	8003050 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800302a:	4013      	ands	r3, r2
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003030:	4293      	cmp	r3, r2
 8003032:	d10d      	bne.n	8003050 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800303e:	429a      	cmp	r2, r3
 8003040:	d106      	bne.n	8003050 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d001      	beq.n	8003054 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40007000 	.word	0x40007000
 8003064:	40023800 	.word	0x40023800
 8003068:	42470060 	.word	0x42470060

0800306c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0cc      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003080:	4b68      	ldr	r3, [pc, #416]	; (8003224 <HAL_RCC_ClockConfig+0x1b8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d90c      	bls.n	80030a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308e:	4b65      	ldr	r3, [pc, #404]	; (8003224 <HAL_RCC_ClockConfig+0x1b8>)
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003096:	4b63      	ldr	r3, [pc, #396]	; (8003224 <HAL_RCC_ClockConfig+0x1b8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e0b8      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d020      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d005      	beq.n	80030cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030c0:	4b59      	ldr	r3, [pc, #356]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	4a58      	ldr	r2, [pc, #352]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030d8:	4b53      	ldr	r3, [pc, #332]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	4a52      	ldr	r2, [pc, #328]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e4:	4b50      	ldr	r3, [pc, #320]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	494d      	ldr	r1, [pc, #308]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d044      	beq.n	800318c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d107      	bne.n	800311a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310a:	4b47      	ldr	r3, [pc, #284]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d119      	bne.n	800314a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e07f      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d003      	beq.n	800312a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003126:	2b03      	cmp	r3, #3
 8003128:	d107      	bne.n	800313a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312a:	4b3f      	ldr	r3, [pc, #252]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d109      	bne.n	800314a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e06f      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313a:	4b3b      	ldr	r3, [pc, #236]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e067      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800314a:	4b37      	ldr	r3, [pc, #220]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f023 0203 	bic.w	r2, r3, #3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	4934      	ldr	r1, [pc, #208]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	4313      	orrs	r3, r2
 800315a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800315c:	f7fe fdb2 	bl	8001cc4 <HAL_GetTick>
 8003160:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003162:	e00a      	b.n	800317a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003164:	f7fe fdae 	bl	8001cc4 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003172:	4293      	cmp	r3, r2
 8003174:	d901      	bls.n	800317a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e04f      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317a:	4b2b      	ldr	r3, [pc, #172]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 020c 	and.w	r2, r3, #12
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	429a      	cmp	r2, r3
 800318a:	d1eb      	bne.n	8003164 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800318c:	4b25      	ldr	r3, [pc, #148]	; (8003224 <HAL_RCC_ClockConfig+0x1b8>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d20c      	bcs.n	80031b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319a:	4b22      	ldr	r3, [pc, #136]	; (8003224 <HAL_RCC_ClockConfig+0x1b8>)
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a2:	4b20      	ldr	r3, [pc, #128]	; (8003224 <HAL_RCC_ClockConfig+0x1b8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d001      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e032      	b.n	800321a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c0:	4b19      	ldr	r3, [pc, #100]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4916      	ldr	r1, [pc, #88]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d009      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031de:	4b12      	ldr	r3, [pc, #72]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	490e      	ldr	r1, [pc, #56]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031f2:	f000 f821 	bl	8003238 <HAL_RCC_GetSysClockFreq>
 80031f6:	4601      	mov	r1, r0
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	091b      	lsrs	r3, r3, #4
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	4a0a      	ldr	r2, [pc, #40]	; (800322c <HAL_RCC_ClockConfig+0x1c0>)
 8003204:	5cd3      	ldrb	r3, [r2, r3]
 8003206:	fa21 f303 	lsr.w	r3, r1, r3
 800320a:	4a09      	ldr	r2, [pc, #36]	; (8003230 <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800320e:	4b09      	ldr	r3, [pc, #36]	; (8003234 <HAL_RCC_ClockConfig+0x1c8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7fe fd12 	bl	8001c3c <HAL_InitTick>

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40023c00 	.word	0x40023c00
 8003228:	40023800 	.word	0x40023800
 800322c:	08005e4c 	.word	0x08005e4c
 8003230:	20000000 	.word	0x20000000
 8003234:	20000004 	.word	0x20000004

08003238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	607b      	str	r3, [r7, #4]
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	2300      	movs	r3, #0
 8003248:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800324e:	4b63      	ldr	r3, [pc, #396]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b04      	cmp	r3, #4
 8003258:	d007      	beq.n	800326a <HAL_RCC_GetSysClockFreq+0x32>
 800325a:	2b08      	cmp	r3, #8
 800325c:	d008      	beq.n	8003270 <HAL_RCC_GetSysClockFreq+0x38>
 800325e:	2b00      	cmp	r3, #0
 8003260:	f040 80b4 	bne.w	80033cc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003264:	4b5e      	ldr	r3, [pc, #376]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003266:	60bb      	str	r3, [r7, #8]
       break;
 8003268:	e0b3      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800326a:	4b5e      	ldr	r3, [pc, #376]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800326c:	60bb      	str	r3, [r7, #8]
      break;
 800326e:	e0b0      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003270:	4b5a      	ldr	r3, [pc, #360]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003278:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800327a:	4b58      	ldr	r3, [pc, #352]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d04a      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003286:	4b55      	ldr	r3, [pc, #340]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	099b      	lsrs	r3, r3, #6
 800328c:	f04f 0400 	mov.w	r4, #0
 8003290:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	ea03 0501 	and.w	r5, r3, r1
 800329c:	ea04 0602 	and.w	r6, r4, r2
 80032a0:	4629      	mov	r1, r5
 80032a2:	4632      	mov	r2, r6
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	f04f 0400 	mov.w	r4, #0
 80032ac:	0154      	lsls	r4, r2, #5
 80032ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032b2:	014b      	lsls	r3, r1, #5
 80032b4:	4619      	mov	r1, r3
 80032b6:	4622      	mov	r2, r4
 80032b8:	1b49      	subs	r1, r1, r5
 80032ba:	eb62 0206 	sbc.w	r2, r2, r6
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	f04f 0400 	mov.w	r4, #0
 80032c6:	0194      	lsls	r4, r2, #6
 80032c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032cc:	018b      	lsls	r3, r1, #6
 80032ce:	1a5b      	subs	r3, r3, r1
 80032d0:	eb64 0402 	sbc.w	r4, r4, r2
 80032d4:	f04f 0100 	mov.w	r1, #0
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	00e2      	lsls	r2, r4, #3
 80032de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032e2:	00d9      	lsls	r1, r3, #3
 80032e4:	460b      	mov	r3, r1
 80032e6:	4614      	mov	r4, r2
 80032e8:	195b      	adds	r3, r3, r5
 80032ea:	eb44 0406 	adc.w	r4, r4, r6
 80032ee:	f04f 0100 	mov.w	r1, #0
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	0262      	lsls	r2, r4, #9
 80032f8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80032fc:	0259      	lsls	r1, r3, #9
 80032fe:	460b      	mov	r3, r1
 8003300:	4614      	mov	r4, r2
 8003302:	4618      	mov	r0, r3
 8003304:	4621      	mov	r1, r4
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f04f 0400 	mov.w	r4, #0
 800330c:	461a      	mov	r2, r3
 800330e:	4623      	mov	r3, r4
 8003310:	f7fd fc4a 	bl	8000ba8 <__aeabi_uldivmod>
 8003314:	4603      	mov	r3, r0
 8003316:	460c      	mov	r4, r1
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	e049      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800331c:	4b2f      	ldr	r3, [pc, #188]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	099b      	lsrs	r3, r3, #6
 8003322:	f04f 0400 	mov.w	r4, #0
 8003326:	f240 11ff 	movw	r1, #511	; 0x1ff
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	ea03 0501 	and.w	r5, r3, r1
 8003332:	ea04 0602 	and.w	r6, r4, r2
 8003336:	4629      	mov	r1, r5
 8003338:	4632      	mov	r2, r6
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	f04f 0400 	mov.w	r4, #0
 8003342:	0154      	lsls	r4, r2, #5
 8003344:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003348:	014b      	lsls	r3, r1, #5
 800334a:	4619      	mov	r1, r3
 800334c:	4622      	mov	r2, r4
 800334e:	1b49      	subs	r1, r1, r5
 8003350:	eb62 0206 	sbc.w	r2, r2, r6
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	f04f 0400 	mov.w	r4, #0
 800335c:	0194      	lsls	r4, r2, #6
 800335e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003362:	018b      	lsls	r3, r1, #6
 8003364:	1a5b      	subs	r3, r3, r1
 8003366:	eb64 0402 	sbc.w	r4, r4, r2
 800336a:	f04f 0100 	mov.w	r1, #0
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	00e2      	lsls	r2, r4, #3
 8003374:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003378:	00d9      	lsls	r1, r3, #3
 800337a:	460b      	mov	r3, r1
 800337c:	4614      	mov	r4, r2
 800337e:	195b      	adds	r3, r3, r5
 8003380:	eb44 0406 	adc.w	r4, r4, r6
 8003384:	f04f 0100 	mov.w	r1, #0
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	02a2      	lsls	r2, r4, #10
 800338e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003392:	0299      	lsls	r1, r3, #10
 8003394:	460b      	mov	r3, r1
 8003396:	4614      	mov	r4, r2
 8003398:	4618      	mov	r0, r3
 800339a:	4621      	mov	r1, r4
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f04f 0400 	mov.w	r4, #0
 80033a2:	461a      	mov	r2, r3
 80033a4:	4623      	mov	r3, r4
 80033a6:	f7fd fbff 	bl	8000ba8 <__aeabi_uldivmod>
 80033aa:	4603      	mov	r3, r0
 80033ac:	460c      	mov	r4, r1
 80033ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033b0:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	0c1b      	lsrs	r3, r3, #16
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	3301      	adds	r3, #1
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c8:	60bb      	str	r3, [r7, #8]
      break;
 80033ca:	e002      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033cc:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80033ce:	60bb      	str	r3, [r7, #8]
      break;
 80033d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033d2:	68bb      	ldr	r3, [r7, #8]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033dc:	40023800 	.word	0x40023800
 80033e0:	00f42400 	.word	0x00f42400
 80033e4:	007a1200 	.word	0x007a1200

080033e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000000 	.word	0x20000000

08003400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003404:	f7ff fff0 	bl	80033e8 <HAL_RCC_GetHCLKFreq>
 8003408:	4601      	mov	r1, r0
 800340a:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	0a9b      	lsrs	r3, r3, #10
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	4a03      	ldr	r2, [pc, #12]	; (8003424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003416:	5cd3      	ldrb	r3, [r2, r3]
 8003418:	fa21 f303 	lsr.w	r3, r1, r3
}
 800341c:	4618      	mov	r0, r3
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40023800 	.word	0x40023800
 8003424:	08005e5c 	.word	0x08005e5c

08003428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e01d      	b.n	8003476 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d106      	bne.n	8003454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fe fae2 	bl	8001a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3304      	adds	r3, #4
 8003464:	4619      	mov	r1, r3
 8003466:	4610      	mov	r0, r2
 8003468:	f000 f95c 	bl	8003724 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800347e:	b480      	push	{r7}
 8003480:	b085      	sub	sp, #20
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2202      	movs	r2, #2
 800348a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2b06      	cmp	r3, #6
 800349e:	d007      	beq.n	80034b0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b082      	sub	sp, #8
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e01d      	b.n	8003514 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d106      	bne.n	80034f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7fe fab5 	bl	8001a5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2202      	movs	r2, #2
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3304      	adds	r3, #4
 8003502:	4619      	mov	r1, r3
 8003504:	4610      	mov	r0, r2
 8003506:	f000 f90d 	bl	8003724 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2201      	movs	r2, #1
 800352c:	6839      	ldr	r1, [r7, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fb48 	bl	8003bc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a15      	ldr	r2, [pc, #84]	; (8003590 <HAL_TIM_PWM_Start+0x74>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d004      	beq.n	8003548 <HAL_TIM_PWM_Start+0x2c>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a14      	ldr	r2, [pc, #80]	; (8003594 <HAL_TIM_PWM_Start+0x78>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d101      	bne.n	800354c <HAL_TIM_PWM_Start+0x30>
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <HAL_TIM_PWM_Start+0x32>
 800354c:	2300      	movs	r3, #0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003560:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2b06      	cmp	r3, #6
 8003572:	d007      	beq.n	8003584 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40010000 	.word	0x40010000
 8003594:	40010400 	.word	0x40010400

08003598 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e0b4      	b.n	800371c <HAL_TIM_PWM_ConfigChannel+0x184>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2202      	movs	r2, #2
 80035be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b0c      	cmp	r3, #12
 80035c6:	f200 809f 	bhi.w	8003708 <HAL_TIM_PWM_ConfigChannel+0x170>
 80035ca:	a201      	add	r2, pc, #4	; (adr r2, 80035d0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80035cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d0:	08003605 	.word	0x08003605
 80035d4:	08003709 	.word	0x08003709
 80035d8:	08003709 	.word	0x08003709
 80035dc:	08003709 	.word	0x08003709
 80035e0:	08003645 	.word	0x08003645
 80035e4:	08003709 	.word	0x08003709
 80035e8:	08003709 	.word	0x08003709
 80035ec:	08003709 	.word	0x08003709
 80035f0:	08003687 	.word	0x08003687
 80035f4:	08003709 	.word	0x08003709
 80035f8:	08003709 	.word	0x08003709
 80035fc:	08003709 	.word	0x08003709
 8003600:	080036c7 	.word	0x080036c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	4618      	mov	r0, r3
 800360c:	f000 f92a 	bl	8003864 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0208 	orr.w	r2, r2, #8
 800361e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699a      	ldr	r2, [r3, #24]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 0204 	bic.w	r2, r2, #4
 800362e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6999      	ldr	r1, [r3, #24]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	619a      	str	r2, [r3, #24]
      break;
 8003642:	e062      	b.n	800370a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68b9      	ldr	r1, [r7, #8]
 800364a:	4618      	mov	r0, r3
 800364c:	f000 f97a 	bl	8003944 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699a      	ldr	r2, [r3, #24]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800365e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699a      	ldr	r2, [r3, #24]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800366e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6999      	ldr	r1, [r3, #24]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	021a      	lsls	r2, r3, #8
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	619a      	str	r2, [r3, #24]
      break;
 8003684:	e041      	b.n	800370a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	4618      	mov	r0, r3
 800368e:	f000 f9cf 	bl	8003a30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	69da      	ldr	r2, [r3, #28]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0208 	orr.w	r2, r2, #8
 80036a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	69da      	ldr	r2, [r3, #28]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0204 	bic.w	r2, r2, #4
 80036b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	69d9      	ldr	r1, [r3, #28]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	61da      	str	r2, [r3, #28]
      break;
 80036c4:	e021      	b.n	800370a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68b9      	ldr	r1, [r7, #8]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fa23 	bl	8003b18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69da      	ldr	r2, [r3, #28]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	69da      	ldr	r2, [r3, #28]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69d9      	ldr	r1, [r3, #28]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	021a      	lsls	r2, r3, #8
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	61da      	str	r2, [r3, #28]
      break;
 8003706:	e000      	b.n	800370a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003708:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a40      	ldr	r2, [pc, #256]	; (8003838 <TIM_Base_SetConfig+0x114>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d013      	beq.n	8003764 <TIM_Base_SetConfig+0x40>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003742:	d00f      	beq.n	8003764 <TIM_Base_SetConfig+0x40>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a3d      	ldr	r2, [pc, #244]	; (800383c <TIM_Base_SetConfig+0x118>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d00b      	beq.n	8003764 <TIM_Base_SetConfig+0x40>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a3c      	ldr	r2, [pc, #240]	; (8003840 <TIM_Base_SetConfig+0x11c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d007      	beq.n	8003764 <TIM_Base_SetConfig+0x40>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a3b      	ldr	r2, [pc, #236]	; (8003844 <TIM_Base_SetConfig+0x120>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d003      	beq.n	8003764 <TIM_Base_SetConfig+0x40>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a3a      	ldr	r2, [pc, #232]	; (8003848 <TIM_Base_SetConfig+0x124>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d108      	bne.n	8003776 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a2f      	ldr	r2, [pc, #188]	; (8003838 <TIM_Base_SetConfig+0x114>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d02b      	beq.n	80037d6 <TIM_Base_SetConfig+0xb2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003784:	d027      	beq.n	80037d6 <TIM_Base_SetConfig+0xb2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a2c      	ldr	r2, [pc, #176]	; (800383c <TIM_Base_SetConfig+0x118>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d023      	beq.n	80037d6 <TIM_Base_SetConfig+0xb2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a2b      	ldr	r2, [pc, #172]	; (8003840 <TIM_Base_SetConfig+0x11c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d01f      	beq.n	80037d6 <TIM_Base_SetConfig+0xb2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a2a      	ldr	r2, [pc, #168]	; (8003844 <TIM_Base_SetConfig+0x120>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d01b      	beq.n	80037d6 <TIM_Base_SetConfig+0xb2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a29      	ldr	r2, [pc, #164]	; (8003848 <TIM_Base_SetConfig+0x124>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d017      	beq.n	80037d6 <TIM_Base_SetConfig+0xb2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a28      	ldr	r2, [pc, #160]	; (800384c <TIM_Base_SetConfig+0x128>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d013      	beq.n	80037d6 <TIM_Base_SetConfig+0xb2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a27      	ldr	r2, [pc, #156]	; (8003850 <TIM_Base_SetConfig+0x12c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d00f      	beq.n	80037d6 <TIM_Base_SetConfig+0xb2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a26      	ldr	r2, [pc, #152]	; (8003854 <TIM_Base_SetConfig+0x130>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00b      	beq.n	80037d6 <TIM_Base_SetConfig+0xb2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a25      	ldr	r2, [pc, #148]	; (8003858 <TIM_Base_SetConfig+0x134>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d007      	beq.n	80037d6 <TIM_Base_SetConfig+0xb2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a24      	ldr	r2, [pc, #144]	; (800385c <TIM_Base_SetConfig+0x138>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d003      	beq.n	80037d6 <TIM_Base_SetConfig+0xb2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a23      	ldr	r2, [pc, #140]	; (8003860 <TIM_Base_SetConfig+0x13c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d108      	bne.n	80037e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a0a      	ldr	r2, [pc, #40]	; (8003838 <TIM_Base_SetConfig+0x114>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d003      	beq.n	800381c <TIM_Base_SetConfig+0xf8>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a0c      	ldr	r2, [pc, #48]	; (8003848 <TIM_Base_SetConfig+0x124>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d103      	bne.n	8003824 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	615a      	str	r2, [r3, #20]
}
 800382a:	bf00      	nop
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40010000 	.word	0x40010000
 800383c:	40000400 	.word	0x40000400
 8003840:	40000800 	.word	0x40000800
 8003844:	40000c00 	.word	0x40000c00
 8003848:	40010400 	.word	0x40010400
 800384c:	40014000 	.word	0x40014000
 8003850:	40014400 	.word	0x40014400
 8003854:	40014800 	.word	0x40014800
 8003858:	40001800 	.word	0x40001800
 800385c:	40001c00 	.word	0x40001c00
 8003860:	40002000 	.word	0x40002000

08003864 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	f023 0201 	bic.w	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0303 	bic.w	r3, r3, #3
 800389a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f023 0302 	bic.w	r3, r3, #2
 80038ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a20      	ldr	r2, [pc, #128]	; (800393c <TIM_OC1_SetConfig+0xd8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d003      	beq.n	80038c8 <TIM_OC1_SetConfig+0x64>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a1f      	ldr	r2, [pc, #124]	; (8003940 <TIM_OC1_SetConfig+0xdc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d10c      	bne.n	80038e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f023 0308 	bic.w	r3, r3, #8
 80038ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f023 0304 	bic.w	r3, r3, #4
 80038e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a15      	ldr	r2, [pc, #84]	; (800393c <TIM_OC1_SetConfig+0xd8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d003      	beq.n	80038f2 <TIM_OC1_SetConfig+0x8e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a14      	ldr	r2, [pc, #80]	; (8003940 <TIM_OC1_SetConfig+0xdc>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d111      	bne.n	8003916 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	621a      	str	r2, [r3, #32]
}
 8003930:	bf00      	nop
 8003932:	371c      	adds	r7, #28
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	40010000 	.word	0x40010000
 8003940:	40010400 	.word	0x40010400

08003944 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003944:	b480      	push	{r7}
 8003946:	b087      	sub	sp, #28
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	f023 0210 	bic.w	r2, r3, #16
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800397a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	021b      	lsls	r3, r3, #8
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4313      	orrs	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f023 0320 	bic.w	r3, r3, #32
 800398e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	4313      	orrs	r3, r2
 800399a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a22      	ldr	r2, [pc, #136]	; (8003a28 <TIM_OC2_SetConfig+0xe4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d003      	beq.n	80039ac <TIM_OC2_SetConfig+0x68>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a21      	ldr	r2, [pc, #132]	; (8003a2c <TIM_OC2_SetConfig+0xe8>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d10d      	bne.n	80039c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4313      	orrs	r3, r2
 80039be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a17      	ldr	r2, [pc, #92]	; (8003a28 <TIM_OC2_SetConfig+0xe4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d003      	beq.n	80039d8 <TIM_OC2_SetConfig+0x94>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a16      	ldr	r2, [pc, #88]	; (8003a2c <TIM_OC2_SetConfig+0xe8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d113      	bne.n	8003a00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	621a      	str	r2, [r3, #32]
}
 8003a1a:	bf00      	nop
 8003a1c:	371c      	adds	r7, #28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	40010000 	.word	0x40010000
 8003a2c:	40010400 	.word	0x40010400

08003a30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 0303 	bic.w	r3, r3, #3
 8003a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	021b      	lsls	r3, r3, #8
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a21      	ldr	r2, [pc, #132]	; (8003b10 <TIM_OC3_SetConfig+0xe0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d003      	beq.n	8003a96 <TIM_OC3_SetConfig+0x66>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a20      	ldr	r2, [pc, #128]	; (8003b14 <TIM_OC3_SetConfig+0xe4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d10d      	bne.n	8003ab2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	021b      	lsls	r3, r3, #8
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a16      	ldr	r2, [pc, #88]	; (8003b10 <TIM_OC3_SetConfig+0xe0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d003      	beq.n	8003ac2 <TIM_OC3_SetConfig+0x92>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a15      	ldr	r2, [pc, #84]	; (8003b14 <TIM_OC3_SetConfig+0xe4>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d113      	bne.n	8003aea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	621a      	str	r2, [r3, #32]
}
 8003b04:	bf00      	nop
 8003b06:	371c      	adds	r7, #28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	40010000 	.word	0x40010000
 8003b14:	40010400 	.word	0x40010400

08003b18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	031b      	lsls	r3, r3, #12
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a12      	ldr	r2, [pc, #72]	; (8003bbc <TIM_OC4_SetConfig+0xa4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d003      	beq.n	8003b80 <TIM_OC4_SetConfig+0x68>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a11      	ldr	r2, [pc, #68]	; (8003bc0 <TIM_OC4_SetConfig+0xa8>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d109      	bne.n	8003b94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	019b      	lsls	r3, r3, #6
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	621a      	str	r2, [r3, #32]
}
 8003bae:	bf00      	nop
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40010000 	.word	0x40010000
 8003bc0:	40010400 	.word	0x40010400

08003bc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f003 031f 	and.w	r3, r3, #31
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a1a      	ldr	r2, [r3, #32]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	43db      	mvns	r3, r3
 8003be6:	401a      	ands	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a1a      	ldr	r2, [r3, #32]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f003 031f 	and.w	r3, r3, #31
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	621a      	str	r2, [r3, #32]
}
 8003c02:	bf00      	nop
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
	...

08003c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e05a      	b.n	8003cde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a21      	ldr	r2, [pc, #132]	; (8003cec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d022      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c74:	d01d      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a1d      	ldr	r2, [pc, #116]	; (8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d018      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a1b      	ldr	r2, [pc, #108]	; (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d013      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a1a      	ldr	r2, [pc, #104]	; (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d00e      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a18      	ldr	r2, [pc, #96]	; (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d009      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a17      	ldr	r2, [pc, #92]	; (8003d00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d004      	beq.n	8003cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a15      	ldr	r2, [pc, #84]	; (8003d04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d10c      	bne.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40010000 	.word	0x40010000
 8003cf0:	40000400 	.word	0x40000400
 8003cf4:	40000800 	.word	0x40000800
 8003cf8:	40000c00 	.word	0x40000c00
 8003cfc:	40010400 	.word	0x40010400
 8003d00:	40014000 	.word	0x40014000
 8003d04:	40001800 	.word	0x40001800

08003d08 <__libc_init_array>:
 8003d08:	b570      	push	{r4, r5, r6, lr}
 8003d0a:	4e0d      	ldr	r6, [pc, #52]	; (8003d40 <__libc_init_array+0x38>)
 8003d0c:	4c0d      	ldr	r4, [pc, #52]	; (8003d44 <__libc_init_array+0x3c>)
 8003d0e:	1ba4      	subs	r4, r4, r6
 8003d10:	10a4      	asrs	r4, r4, #2
 8003d12:	2500      	movs	r5, #0
 8003d14:	42a5      	cmp	r5, r4
 8003d16:	d109      	bne.n	8003d2c <__libc_init_array+0x24>
 8003d18:	4e0b      	ldr	r6, [pc, #44]	; (8003d48 <__libc_init_array+0x40>)
 8003d1a:	4c0c      	ldr	r4, [pc, #48]	; (8003d4c <__libc_init_array+0x44>)
 8003d1c:	f002 f86a 	bl	8005df4 <_init>
 8003d20:	1ba4      	subs	r4, r4, r6
 8003d22:	10a4      	asrs	r4, r4, #2
 8003d24:	2500      	movs	r5, #0
 8003d26:	42a5      	cmp	r5, r4
 8003d28:	d105      	bne.n	8003d36 <__libc_init_array+0x2e>
 8003d2a:	bd70      	pop	{r4, r5, r6, pc}
 8003d2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d30:	4798      	blx	r3
 8003d32:	3501      	adds	r5, #1
 8003d34:	e7ee      	b.n	8003d14 <__libc_init_array+0xc>
 8003d36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d3a:	4798      	blx	r3
 8003d3c:	3501      	adds	r5, #1
 8003d3e:	e7f2      	b.n	8003d26 <__libc_init_array+0x1e>
 8003d40:	080060c8 	.word	0x080060c8
 8003d44:	080060c8 	.word	0x080060c8
 8003d48:	080060c8 	.word	0x080060c8
 8003d4c:	080060cc 	.word	0x080060cc

08003d50 <memset>:
 8003d50:	4402      	add	r2, r0
 8003d52:	4603      	mov	r3, r0
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d100      	bne.n	8003d5a <memset+0xa>
 8003d58:	4770      	bx	lr
 8003d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d5e:	e7f9      	b.n	8003d54 <memset+0x4>

08003d60 <__cvt>:
 8003d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d64:	ec55 4b10 	vmov	r4, r5, d0
 8003d68:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003d6a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003d6e:	2d00      	cmp	r5, #0
 8003d70:	460e      	mov	r6, r1
 8003d72:	4691      	mov	r9, r2
 8003d74:	4619      	mov	r1, r3
 8003d76:	bfb8      	it	lt
 8003d78:	4622      	movlt	r2, r4
 8003d7a:	462b      	mov	r3, r5
 8003d7c:	f027 0720 	bic.w	r7, r7, #32
 8003d80:	bfbb      	ittet	lt
 8003d82:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003d86:	461d      	movlt	r5, r3
 8003d88:	2300      	movge	r3, #0
 8003d8a:	232d      	movlt	r3, #45	; 0x2d
 8003d8c:	bfb8      	it	lt
 8003d8e:	4614      	movlt	r4, r2
 8003d90:	2f46      	cmp	r7, #70	; 0x46
 8003d92:	700b      	strb	r3, [r1, #0]
 8003d94:	d004      	beq.n	8003da0 <__cvt+0x40>
 8003d96:	2f45      	cmp	r7, #69	; 0x45
 8003d98:	d100      	bne.n	8003d9c <__cvt+0x3c>
 8003d9a:	3601      	adds	r6, #1
 8003d9c:	2102      	movs	r1, #2
 8003d9e:	e000      	b.n	8003da2 <__cvt+0x42>
 8003da0:	2103      	movs	r1, #3
 8003da2:	ab03      	add	r3, sp, #12
 8003da4:	9301      	str	r3, [sp, #4]
 8003da6:	ab02      	add	r3, sp, #8
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	4632      	mov	r2, r6
 8003dac:	4653      	mov	r3, sl
 8003dae:	ec45 4b10 	vmov	d0, r4, r5
 8003db2:	f000 fcdd 	bl	8004770 <_dtoa_r>
 8003db6:	2f47      	cmp	r7, #71	; 0x47
 8003db8:	4680      	mov	r8, r0
 8003dba:	d102      	bne.n	8003dc2 <__cvt+0x62>
 8003dbc:	f019 0f01 	tst.w	r9, #1
 8003dc0:	d026      	beq.n	8003e10 <__cvt+0xb0>
 8003dc2:	2f46      	cmp	r7, #70	; 0x46
 8003dc4:	eb08 0906 	add.w	r9, r8, r6
 8003dc8:	d111      	bne.n	8003dee <__cvt+0x8e>
 8003dca:	f898 3000 	ldrb.w	r3, [r8]
 8003dce:	2b30      	cmp	r3, #48	; 0x30
 8003dd0:	d10a      	bne.n	8003de8 <__cvt+0x88>
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	4629      	mov	r1, r5
 8003dda:	f7fc fe75 	bl	8000ac8 <__aeabi_dcmpeq>
 8003dde:	b918      	cbnz	r0, 8003de8 <__cvt+0x88>
 8003de0:	f1c6 0601 	rsb	r6, r6, #1
 8003de4:	f8ca 6000 	str.w	r6, [sl]
 8003de8:	f8da 3000 	ldr.w	r3, [sl]
 8003dec:	4499      	add	r9, r3
 8003dee:	2200      	movs	r2, #0
 8003df0:	2300      	movs	r3, #0
 8003df2:	4620      	mov	r0, r4
 8003df4:	4629      	mov	r1, r5
 8003df6:	f7fc fe67 	bl	8000ac8 <__aeabi_dcmpeq>
 8003dfa:	b938      	cbnz	r0, 8003e0c <__cvt+0xac>
 8003dfc:	2230      	movs	r2, #48	; 0x30
 8003dfe:	9b03      	ldr	r3, [sp, #12]
 8003e00:	454b      	cmp	r3, r9
 8003e02:	d205      	bcs.n	8003e10 <__cvt+0xb0>
 8003e04:	1c59      	adds	r1, r3, #1
 8003e06:	9103      	str	r1, [sp, #12]
 8003e08:	701a      	strb	r2, [r3, #0]
 8003e0a:	e7f8      	b.n	8003dfe <__cvt+0x9e>
 8003e0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e10:	9b03      	ldr	r3, [sp, #12]
 8003e12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e14:	eba3 0308 	sub.w	r3, r3, r8
 8003e18:	4640      	mov	r0, r8
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	b004      	add	sp, #16
 8003e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003e22 <__exponent>:
 8003e22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e24:	2900      	cmp	r1, #0
 8003e26:	4604      	mov	r4, r0
 8003e28:	bfba      	itte	lt
 8003e2a:	4249      	neglt	r1, r1
 8003e2c:	232d      	movlt	r3, #45	; 0x2d
 8003e2e:	232b      	movge	r3, #43	; 0x2b
 8003e30:	2909      	cmp	r1, #9
 8003e32:	f804 2b02 	strb.w	r2, [r4], #2
 8003e36:	7043      	strb	r3, [r0, #1]
 8003e38:	dd20      	ble.n	8003e7c <__exponent+0x5a>
 8003e3a:	f10d 0307 	add.w	r3, sp, #7
 8003e3e:	461f      	mov	r7, r3
 8003e40:	260a      	movs	r6, #10
 8003e42:	fb91 f5f6 	sdiv	r5, r1, r6
 8003e46:	fb06 1115 	mls	r1, r6, r5, r1
 8003e4a:	3130      	adds	r1, #48	; 0x30
 8003e4c:	2d09      	cmp	r5, #9
 8003e4e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003e52:	f103 32ff 	add.w	r2, r3, #4294967295
 8003e56:	4629      	mov	r1, r5
 8003e58:	dc09      	bgt.n	8003e6e <__exponent+0x4c>
 8003e5a:	3130      	adds	r1, #48	; 0x30
 8003e5c:	3b02      	subs	r3, #2
 8003e5e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003e62:	42bb      	cmp	r3, r7
 8003e64:	4622      	mov	r2, r4
 8003e66:	d304      	bcc.n	8003e72 <__exponent+0x50>
 8003e68:	1a10      	subs	r0, r2, r0
 8003e6a:	b003      	add	sp, #12
 8003e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e6e:	4613      	mov	r3, r2
 8003e70:	e7e7      	b.n	8003e42 <__exponent+0x20>
 8003e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e76:	f804 2b01 	strb.w	r2, [r4], #1
 8003e7a:	e7f2      	b.n	8003e62 <__exponent+0x40>
 8003e7c:	2330      	movs	r3, #48	; 0x30
 8003e7e:	4419      	add	r1, r3
 8003e80:	7083      	strb	r3, [r0, #2]
 8003e82:	1d02      	adds	r2, r0, #4
 8003e84:	70c1      	strb	r1, [r0, #3]
 8003e86:	e7ef      	b.n	8003e68 <__exponent+0x46>

08003e88 <_printf_float>:
 8003e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e8c:	b08d      	sub	sp, #52	; 0x34
 8003e8e:	460c      	mov	r4, r1
 8003e90:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003e94:	4616      	mov	r6, r2
 8003e96:	461f      	mov	r7, r3
 8003e98:	4605      	mov	r5, r0
 8003e9a:	f001 fa21 	bl	80052e0 <_localeconv_r>
 8003e9e:	6803      	ldr	r3, [r0, #0]
 8003ea0:	9304      	str	r3, [sp, #16]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fc f994 	bl	80001d0 <strlen>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	930a      	str	r3, [sp, #40]	; 0x28
 8003eac:	f8d8 3000 	ldr.w	r3, [r8]
 8003eb0:	9005      	str	r0, [sp, #20]
 8003eb2:	3307      	adds	r3, #7
 8003eb4:	f023 0307 	bic.w	r3, r3, #7
 8003eb8:	f103 0208 	add.w	r2, r3, #8
 8003ebc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003ec0:	f8d4 b000 	ldr.w	fp, [r4]
 8003ec4:	f8c8 2000 	str.w	r2, [r8]
 8003ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ecc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ed0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003ed4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003ed8:	9307      	str	r3, [sp, #28]
 8003eda:	f8cd 8018 	str.w	r8, [sp, #24]
 8003ede:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee2:	4ba7      	ldr	r3, [pc, #668]	; (8004180 <_printf_float+0x2f8>)
 8003ee4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ee8:	f7fc fe20 	bl	8000b2c <__aeabi_dcmpun>
 8003eec:	bb70      	cbnz	r0, 8003f4c <_printf_float+0xc4>
 8003eee:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef2:	4ba3      	ldr	r3, [pc, #652]	; (8004180 <_printf_float+0x2f8>)
 8003ef4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ef8:	f7fc fdfa 	bl	8000af0 <__aeabi_dcmple>
 8003efc:	bb30      	cbnz	r0, 8003f4c <_printf_float+0xc4>
 8003efe:	2200      	movs	r2, #0
 8003f00:	2300      	movs	r3, #0
 8003f02:	4640      	mov	r0, r8
 8003f04:	4649      	mov	r1, r9
 8003f06:	f7fc fde9 	bl	8000adc <__aeabi_dcmplt>
 8003f0a:	b110      	cbz	r0, 8003f12 <_printf_float+0x8a>
 8003f0c:	232d      	movs	r3, #45	; 0x2d
 8003f0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f12:	4a9c      	ldr	r2, [pc, #624]	; (8004184 <_printf_float+0x2fc>)
 8003f14:	4b9c      	ldr	r3, [pc, #624]	; (8004188 <_printf_float+0x300>)
 8003f16:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003f1a:	bf8c      	ite	hi
 8003f1c:	4690      	movhi	r8, r2
 8003f1e:	4698      	movls	r8, r3
 8003f20:	2303      	movs	r3, #3
 8003f22:	f02b 0204 	bic.w	r2, fp, #4
 8003f26:	6123      	str	r3, [r4, #16]
 8003f28:	6022      	str	r2, [r4, #0]
 8003f2a:	f04f 0900 	mov.w	r9, #0
 8003f2e:	9700      	str	r7, [sp, #0]
 8003f30:	4633      	mov	r3, r6
 8003f32:	aa0b      	add	r2, sp, #44	; 0x2c
 8003f34:	4621      	mov	r1, r4
 8003f36:	4628      	mov	r0, r5
 8003f38:	f000 f9e6 	bl	8004308 <_printf_common>
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	f040 808d 	bne.w	800405c <_printf_float+0x1d4>
 8003f42:	f04f 30ff 	mov.w	r0, #4294967295
 8003f46:	b00d      	add	sp, #52	; 0x34
 8003f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f4c:	4642      	mov	r2, r8
 8003f4e:	464b      	mov	r3, r9
 8003f50:	4640      	mov	r0, r8
 8003f52:	4649      	mov	r1, r9
 8003f54:	f7fc fdea 	bl	8000b2c <__aeabi_dcmpun>
 8003f58:	b110      	cbz	r0, 8003f60 <_printf_float+0xd8>
 8003f5a:	4a8c      	ldr	r2, [pc, #560]	; (800418c <_printf_float+0x304>)
 8003f5c:	4b8c      	ldr	r3, [pc, #560]	; (8004190 <_printf_float+0x308>)
 8003f5e:	e7da      	b.n	8003f16 <_printf_float+0x8e>
 8003f60:	6861      	ldr	r1, [r4, #4]
 8003f62:	1c4b      	adds	r3, r1, #1
 8003f64:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003f68:	a80a      	add	r0, sp, #40	; 0x28
 8003f6a:	d13e      	bne.n	8003fea <_printf_float+0x162>
 8003f6c:	2306      	movs	r3, #6
 8003f6e:	6063      	str	r3, [r4, #4]
 8003f70:	2300      	movs	r3, #0
 8003f72:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003f76:	ab09      	add	r3, sp, #36	; 0x24
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	ec49 8b10 	vmov	d0, r8, r9
 8003f7e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003f82:	6022      	str	r2, [r4, #0]
 8003f84:	f8cd a004 	str.w	sl, [sp, #4]
 8003f88:	6861      	ldr	r1, [r4, #4]
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	f7ff fee8 	bl	8003d60 <__cvt>
 8003f90:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003f94:	2b47      	cmp	r3, #71	; 0x47
 8003f96:	4680      	mov	r8, r0
 8003f98:	d109      	bne.n	8003fae <_printf_float+0x126>
 8003f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f9c:	1cd8      	adds	r0, r3, #3
 8003f9e:	db02      	blt.n	8003fa6 <_printf_float+0x11e>
 8003fa0:	6862      	ldr	r2, [r4, #4]
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	dd47      	ble.n	8004036 <_printf_float+0x1ae>
 8003fa6:	f1aa 0a02 	sub.w	sl, sl, #2
 8003faa:	fa5f fa8a 	uxtb.w	sl, sl
 8003fae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003fb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003fb4:	d824      	bhi.n	8004000 <_printf_float+0x178>
 8003fb6:	3901      	subs	r1, #1
 8003fb8:	4652      	mov	r2, sl
 8003fba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003fbe:	9109      	str	r1, [sp, #36]	; 0x24
 8003fc0:	f7ff ff2f 	bl	8003e22 <__exponent>
 8003fc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003fc6:	1813      	adds	r3, r2, r0
 8003fc8:	2a01      	cmp	r2, #1
 8003fca:	4681      	mov	r9, r0
 8003fcc:	6123      	str	r3, [r4, #16]
 8003fce:	dc02      	bgt.n	8003fd6 <_printf_float+0x14e>
 8003fd0:	6822      	ldr	r2, [r4, #0]
 8003fd2:	07d1      	lsls	r1, r2, #31
 8003fd4:	d501      	bpl.n	8003fda <_printf_float+0x152>
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	6123      	str	r3, [r4, #16]
 8003fda:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0a5      	beq.n	8003f2e <_printf_float+0xa6>
 8003fe2:	232d      	movs	r3, #45	; 0x2d
 8003fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fe8:	e7a1      	b.n	8003f2e <_printf_float+0xa6>
 8003fea:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003fee:	f000 8177 	beq.w	80042e0 <_printf_float+0x458>
 8003ff2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003ff6:	d1bb      	bne.n	8003f70 <_printf_float+0xe8>
 8003ff8:	2900      	cmp	r1, #0
 8003ffa:	d1b9      	bne.n	8003f70 <_printf_float+0xe8>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e7b6      	b.n	8003f6e <_printf_float+0xe6>
 8004000:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004004:	d119      	bne.n	800403a <_printf_float+0x1b2>
 8004006:	2900      	cmp	r1, #0
 8004008:	6863      	ldr	r3, [r4, #4]
 800400a:	dd0c      	ble.n	8004026 <_printf_float+0x19e>
 800400c:	6121      	str	r1, [r4, #16]
 800400e:	b913      	cbnz	r3, 8004016 <_printf_float+0x18e>
 8004010:	6822      	ldr	r2, [r4, #0]
 8004012:	07d2      	lsls	r2, r2, #31
 8004014:	d502      	bpl.n	800401c <_printf_float+0x194>
 8004016:	3301      	adds	r3, #1
 8004018:	440b      	add	r3, r1
 800401a:	6123      	str	r3, [r4, #16]
 800401c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800401e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004020:	f04f 0900 	mov.w	r9, #0
 8004024:	e7d9      	b.n	8003fda <_printf_float+0x152>
 8004026:	b913      	cbnz	r3, 800402e <_printf_float+0x1a6>
 8004028:	6822      	ldr	r2, [r4, #0]
 800402a:	07d0      	lsls	r0, r2, #31
 800402c:	d501      	bpl.n	8004032 <_printf_float+0x1aa>
 800402e:	3302      	adds	r3, #2
 8004030:	e7f3      	b.n	800401a <_printf_float+0x192>
 8004032:	2301      	movs	r3, #1
 8004034:	e7f1      	b.n	800401a <_printf_float+0x192>
 8004036:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800403a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800403e:	4293      	cmp	r3, r2
 8004040:	db05      	blt.n	800404e <_printf_float+0x1c6>
 8004042:	6822      	ldr	r2, [r4, #0]
 8004044:	6123      	str	r3, [r4, #16]
 8004046:	07d1      	lsls	r1, r2, #31
 8004048:	d5e8      	bpl.n	800401c <_printf_float+0x194>
 800404a:	3301      	adds	r3, #1
 800404c:	e7e5      	b.n	800401a <_printf_float+0x192>
 800404e:	2b00      	cmp	r3, #0
 8004050:	bfd4      	ite	le
 8004052:	f1c3 0302 	rsble	r3, r3, #2
 8004056:	2301      	movgt	r3, #1
 8004058:	4413      	add	r3, r2
 800405a:	e7de      	b.n	800401a <_printf_float+0x192>
 800405c:	6823      	ldr	r3, [r4, #0]
 800405e:	055a      	lsls	r2, r3, #21
 8004060:	d407      	bmi.n	8004072 <_printf_float+0x1ea>
 8004062:	6923      	ldr	r3, [r4, #16]
 8004064:	4642      	mov	r2, r8
 8004066:	4631      	mov	r1, r6
 8004068:	4628      	mov	r0, r5
 800406a:	47b8      	blx	r7
 800406c:	3001      	adds	r0, #1
 800406e:	d12b      	bne.n	80040c8 <_printf_float+0x240>
 8004070:	e767      	b.n	8003f42 <_printf_float+0xba>
 8004072:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004076:	f240 80dc 	bls.w	8004232 <_printf_float+0x3aa>
 800407a:	2200      	movs	r2, #0
 800407c:	2300      	movs	r3, #0
 800407e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004082:	f7fc fd21 	bl	8000ac8 <__aeabi_dcmpeq>
 8004086:	2800      	cmp	r0, #0
 8004088:	d033      	beq.n	80040f2 <_printf_float+0x26a>
 800408a:	2301      	movs	r3, #1
 800408c:	4a41      	ldr	r2, [pc, #260]	; (8004194 <_printf_float+0x30c>)
 800408e:	4631      	mov	r1, r6
 8004090:	4628      	mov	r0, r5
 8004092:	47b8      	blx	r7
 8004094:	3001      	adds	r0, #1
 8004096:	f43f af54 	beq.w	8003f42 <_printf_float+0xba>
 800409a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800409e:	429a      	cmp	r2, r3
 80040a0:	db02      	blt.n	80040a8 <_printf_float+0x220>
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	07d8      	lsls	r0, r3, #31
 80040a6:	d50f      	bpl.n	80040c8 <_printf_float+0x240>
 80040a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040ac:	4631      	mov	r1, r6
 80040ae:	4628      	mov	r0, r5
 80040b0:	47b8      	blx	r7
 80040b2:	3001      	adds	r0, #1
 80040b4:	f43f af45 	beq.w	8003f42 <_printf_float+0xba>
 80040b8:	f04f 0800 	mov.w	r8, #0
 80040bc:	f104 091a 	add.w	r9, r4, #26
 80040c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040c2:	3b01      	subs	r3, #1
 80040c4:	4543      	cmp	r3, r8
 80040c6:	dc09      	bgt.n	80040dc <_printf_float+0x254>
 80040c8:	6823      	ldr	r3, [r4, #0]
 80040ca:	079b      	lsls	r3, r3, #30
 80040cc:	f100 8103 	bmi.w	80042d6 <_printf_float+0x44e>
 80040d0:	68e0      	ldr	r0, [r4, #12]
 80040d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040d4:	4298      	cmp	r0, r3
 80040d6:	bfb8      	it	lt
 80040d8:	4618      	movlt	r0, r3
 80040da:	e734      	b.n	8003f46 <_printf_float+0xbe>
 80040dc:	2301      	movs	r3, #1
 80040de:	464a      	mov	r2, r9
 80040e0:	4631      	mov	r1, r6
 80040e2:	4628      	mov	r0, r5
 80040e4:	47b8      	blx	r7
 80040e6:	3001      	adds	r0, #1
 80040e8:	f43f af2b 	beq.w	8003f42 <_printf_float+0xba>
 80040ec:	f108 0801 	add.w	r8, r8, #1
 80040f0:	e7e6      	b.n	80040c0 <_printf_float+0x238>
 80040f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	dc2b      	bgt.n	8004150 <_printf_float+0x2c8>
 80040f8:	2301      	movs	r3, #1
 80040fa:	4a26      	ldr	r2, [pc, #152]	; (8004194 <_printf_float+0x30c>)
 80040fc:	4631      	mov	r1, r6
 80040fe:	4628      	mov	r0, r5
 8004100:	47b8      	blx	r7
 8004102:	3001      	adds	r0, #1
 8004104:	f43f af1d 	beq.w	8003f42 <_printf_float+0xba>
 8004108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800410a:	b923      	cbnz	r3, 8004116 <_printf_float+0x28e>
 800410c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800410e:	b913      	cbnz	r3, 8004116 <_printf_float+0x28e>
 8004110:	6823      	ldr	r3, [r4, #0]
 8004112:	07d9      	lsls	r1, r3, #31
 8004114:	d5d8      	bpl.n	80040c8 <_printf_float+0x240>
 8004116:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800411a:	4631      	mov	r1, r6
 800411c:	4628      	mov	r0, r5
 800411e:	47b8      	blx	r7
 8004120:	3001      	adds	r0, #1
 8004122:	f43f af0e 	beq.w	8003f42 <_printf_float+0xba>
 8004126:	f04f 0900 	mov.w	r9, #0
 800412a:	f104 0a1a 	add.w	sl, r4, #26
 800412e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004130:	425b      	negs	r3, r3
 8004132:	454b      	cmp	r3, r9
 8004134:	dc01      	bgt.n	800413a <_printf_float+0x2b2>
 8004136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004138:	e794      	b.n	8004064 <_printf_float+0x1dc>
 800413a:	2301      	movs	r3, #1
 800413c:	4652      	mov	r2, sl
 800413e:	4631      	mov	r1, r6
 8004140:	4628      	mov	r0, r5
 8004142:	47b8      	blx	r7
 8004144:	3001      	adds	r0, #1
 8004146:	f43f aefc 	beq.w	8003f42 <_printf_float+0xba>
 800414a:	f109 0901 	add.w	r9, r9, #1
 800414e:	e7ee      	b.n	800412e <_printf_float+0x2a6>
 8004150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004152:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004154:	429a      	cmp	r2, r3
 8004156:	bfa8      	it	ge
 8004158:	461a      	movge	r2, r3
 800415a:	2a00      	cmp	r2, #0
 800415c:	4691      	mov	r9, r2
 800415e:	dd07      	ble.n	8004170 <_printf_float+0x2e8>
 8004160:	4613      	mov	r3, r2
 8004162:	4631      	mov	r1, r6
 8004164:	4642      	mov	r2, r8
 8004166:	4628      	mov	r0, r5
 8004168:	47b8      	blx	r7
 800416a:	3001      	adds	r0, #1
 800416c:	f43f aee9 	beq.w	8003f42 <_printf_float+0xba>
 8004170:	f104 031a 	add.w	r3, r4, #26
 8004174:	f04f 0b00 	mov.w	fp, #0
 8004178:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800417c:	9306      	str	r3, [sp, #24]
 800417e:	e015      	b.n	80041ac <_printf_float+0x324>
 8004180:	7fefffff 	.word	0x7fefffff
 8004184:	08005e68 	.word	0x08005e68
 8004188:	08005e64 	.word	0x08005e64
 800418c:	08005e70 	.word	0x08005e70
 8004190:	08005e6c 	.word	0x08005e6c
 8004194:	08005e74 	.word	0x08005e74
 8004198:	2301      	movs	r3, #1
 800419a:	9a06      	ldr	r2, [sp, #24]
 800419c:	4631      	mov	r1, r6
 800419e:	4628      	mov	r0, r5
 80041a0:	47b8      	blx	r7
 80041a2:	3001      	adds	r0, #1
 80041a4:	f43f aecd 	beq.w	8003f42 <_printf_float+0xba>
 80041a8:	f10b 0b01 	add.w	fp, fp, #1
 80041ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80041b0:	ebaa 0309 	sub.w	r3, sl, r9
 80041b4:	455b      	cmp	r3, fp
 80041b6:	dcef      	bgt.n	8004198 <_printf_float+0x310>
 80041b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041bc:	429a      	cmp	r2, r3
 80041be:	44d0      	add	r8, sl
 80041c0:	db15      	blt.n	80041ee <_printf_float+0x366>
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	07da      	lsls	r2, r3, #31
 80041c6:	d412      	bmi.n	80041ee <_printf_float+0x366>
 80041c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80041cc:	eba3 020a 	sub.w	r2, r3, sl
 80041d0:	eba3 0a01 	sub.w	sl, r3, r1
 80041d4:	4592      	cmp	sl, r2
 80041d6:	bfa8      	it	ge
 80041d8:	4692      	movge	sl, r2
 80041da:	f1ba 0f00 	cmp.w	sl, #0
 80041de:	dc0e      	bgt.n	80041fe <_printf_float+0x376>
 80041e0:	f04f 0800 	mov.w	r8, #0
 80041e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80041e8:	f104 091a 	add.w	r9, r4, #26
 80041ec:	e019      	b.n	8004222 <_printf_float+0x39a>
 80041ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041f2:	4631      	mov	r1, r6
 80041f4:	4628      	mov	r0, r5
 80041f6:	47b8      	blx	r7
 80041f8:	3001      	adds	r0, #1
 80041fa:	d1e5      	bne.n	80041c8 <_printf_float+0x340>
 80041fc:	e6a1      	b.n	8003f42 <_printf_float+0xba>
 80041fe:	4653      	mov	r3, sl
 8004200:	4642      	mov	r2, r8
 8004202:	4631      	mov	r1, r6
 8004204:	4628      	mov	r0, r5
 8004206:	47b8      	blx	r7
 8004208:	3001      	adds	r0, #1
 800420a:	d1e9      	bne.n	80041e0 <_printf_float+0x358>
 800420c:	e699      	b.n	8003f42 <_printf_float+0xba>
 800420e:	2301      	movs	r3, #1
 8004210:	464a      	mov	r2, r9
 8004212:	4631      	mov	r1, r6
 8004214:	4628      	mov	r0, r5
 8004216:	47b8      	blx	r7
 8004218:	3001      	adds	r0, #1
 800421a:	f43f ae92 	beq.w	8003f42 <_printf_float+0xba>
 800421e:	f108 0801 	add.w	r8, r8, #1
 8004222:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004226:	1a9b      	subs	r3, r3, r2
 8004228:	eba3 030a 	sub.w	r3, r3, sl
 800422c:	4543      	cmp	r3, r8
 800422e:	dcee      	bgt.n	800420e <_printf_float+0x386>
 8004230:	e74a      	b.n	80040c8 <_printf_float+0x240>
 8004232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004234:	2a01      	cmp	r2, #1
 8004236:	dc01      	bgt.n	800423c <_printf_float+0x3b4>
 8004238:	07db      	lsls	r3, r3, #31
 800423a:	d53a      	bpl.n	80042b2 <_printf_float+0x42a>
 800423c:	2301      	movs	r3, #1
 800423e:	4642      	mov	r2, r8
 8004240:	4631      	mov	r1, r6
 8004242:	4628      	mov	r0, r5
 8004244:	47b8      	blx	r7
 8004246:	3001      	adds	r0, #1
 8004248:	f43f ae7b 	beq.w	8003f42 <_printf_float+0xba>
 800424c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004250:	4631      	mov	r1, r6
 8004252:	4628      	mov	r0, r5
 8004254:	47b8      	blx	r7
 8004256:	3001      	adds	r0, #1
 8004258:	f108 0801 	add.w	r8, r8, #1
 800425c:	f43f ae71 	beq.w	8003f42 <_printf_float+0xba>
 8004260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004262:	2200      	movs	r2, #0
 8004264:	f103 3aff 	add.w	sl, r3, #4294967295
 8004268:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800426c:	2300      	movs	r3, #0
 800426e:	f7fc fc2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004272:	b9c8      	cbnz	r0, 80042a8 <_printf_float+0x420>
 8004274:	4653      	mov	r3, sl
 8004276:	4642      	mov	r2, r8
 8004278:	4631      	mov	r1, r6
 800427a:	4628      	mov	r0, r5
 800427c:	47b8      	blx	r7
 800427e:	3001      	adds	r0, #1
 8004280:	d10e      	bne.n	80042a0 <_printf_float+0x418>
 8004282:	e65e      	b.n	8003f42 <_printf_float+0xba>
 8004284:	2301      	movs	r3, #1
 8004286:	4652      	mov	r2, sl
 8004288:	4631      	mov	r1, r6
 800428a:	4628      	mov	r0, r5
 800428c:	47b8      	blx	r7
 800428e:	3001      	adds	r0, #1
 8004290:	f43f ae57 	beq.w	8003f42 <_printf_float+0xba>
 8004294:	f108 0801 	add.w	r8, r8, #1
 8004298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800429a:	3b01      	subs	r3, #1
 800429c:	4543      	cmp	r3, r8
 800429e:	dcf1      	bgt.n	8004284 <_printf_float+0x3fc>
 80042a0:	464b      	mov	r3, r9
 80042a2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80042a6:	e6de      	b.n	8004066 <_printf_float+0x1de>
 80042a8:	f04f 0800 	mov.w	r8, #0
 80042ac:	f104 0a1a 	add.w	sl, r4, #26
 80042b0:	e7f2      	b.n	8004298 <_printf_float+0x410>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e7df      	b.n	8004276 <_printf_float+0x3ee>
 80042b6:	2301      	movs	r3, #1
 80042b8:	464a      	mov	r2, r9
 80042ba:	4631      	mov	r1, r6
 80042bc:	4628      	mov	r0, r5
 80042be:	47b8      	blx	r7
 80042c0:	3001      	adds	r0, #1
 80042c2:	f43f ae3e 	beq.w	8003f42 <_printf_float+0xba>
 80042c6:	f108 0801 	add.w	r8, r8, #1
 80042ca:	68e3      	ldr	r3, [r4, #12]
 80042cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80042ce:	1a9b      	subs	r3, r3, r2
 80042d0:	4543      	cmp	r3, r8
 80042d2:	dcf0      	bgt.n	80042b6 <_printf_float+0x42e>
 80042d4:	e6fc      	b.n	80040d0 <_printf_float+0x248>
 80042d6:	f04f 0800 	mov.w	r8, #0
 80042da:	f104 0919 	add.w	r9, r4, #25
 80042de:	e7f4      	b.n	80042ca <_printf_float+0x442>
 80042e0:	2900      	cmp	r1, #0
 80042e2:	f43f ae8b 	beq.w	8003ffc <_printf_float+0x174>
 80042e6:	2300      	movs	r3, #0
 80042e8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80042ec:	ab09      	add	r3, sp, #36	; 0x24
 80042ee:	9300      	str	r3, [sp, #0]
 80042f0:	ec49 8b10 	vmov	d0, r8, r9
 80042f4:	6022      	str	r2, [r4, #0]
 80042f6:	f8cd a004 	str.w	sl, [sp, #4]
 80042fa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80042fe:	4628      	mov	r0, r5
 8004300:	f7ff fd2e 	bl	8003d60 <__cvt>
 8004304:	4680      	mov	r8, r0
 8004306:	e648      	b.n	8003f9a <_printf_float+0x112>

08004308 <_printf_common>:
 8004308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800430c:	4691      	mov	r9, r2
 800430e:	461f      	mov	r7, r3
 8004310:	688a      	ldr	r2, [r1, #8]
 8004312:	690b      	ldr	r3, [r1, #16]
 8004314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004318:	4293      	cmp	r3, r2
 800431a:	bfb8      	it	lt
 800431c:	4613      	movlt	r3, r2
 800431e:	f8c9 3000 	str.w	r3, [r9]
 8004322:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004326:	4606      	mov	r6, r0
 8004328:	460c      	mov	r4, r1
 800432a:	b112      	cbz	r2, 8004332 <_printf_common+0x2a>
 800432c:	3301      	adds	r3, #1
 800432e:	f8c9 3000 	str.w	r3, [r9]
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	0699      	lsls	r1, r3, #26
 8004336:	bf42      	ittt	mi
 8004338:	f8d9 3000 	ldrmi.w	r3, [r9]
 800433c:	3302      	addmi	r3, #2
 800433e:	f8c9 3000 	strmi.w	r3, [r9]
 8004342:	6825      	ldr	r5, [r4, #0]
 8004344:	f015 0506 	ands.w	r5, r5, #6
 8004348:	d107      	bne.n	800435a <_printf_common+0x52>
 800434a:	f104 0a19 	add.w	sl, r4, #25
 800434e:	68e3      	ldr	r3, [r4, #12]
 8004350:	f8d9 2000 	ldr.w	r2, [r9]
 8004354:	1a9b      	subs	r3, r3, r2
 8004356:	42ab      	cmp	r3, r5
 8004358:	dc28      	bgt.n	80043ac <_printf_common+0xa4>
 800435a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800435e:	6822      	ldr	r2, [r4, #0]
 8004360:	3300      	adds	r3, #0
 8004362:	bf18      	it	ne
 8004364:	2301      	movne	r3, #1
 8004366:	0692      	lsls	r2, r2, #26
 8004368:	d42d      	bmi.n	80043c6 <_printf_common+0xbe>
 800436a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800436e:	4639      	mov	r1, r7
 8004370:	4630      	mov	r0, r6
 8004372:	47c0      	blx	r8
 8004374:	3001      	adds	r0, #1
 8004376:	d020      	beq.n	80043ba <_printf_common+0xb2>
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	68e5      	ldr	r5, [r4, #12]
 800437c:	f8d9 2000 	ldr.w	r2, [r9]
 8004380:	f003 0306 	and.w	r3, r3, #6
 8004384:	2b04      	cmp	r3, #4
 8004386:	bf08      	it	eq
 8004388:	1aad      	subeq	r5, r5, r2
 800438a:	68a3      	ldr	r3, [r4, #8]
 800438c:	6922      	ldr	r2, [r4, #16]
 800438e:	bf0c      	ite	eq
 8004390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004394:	2500      	movne	r5, #0
 8004396:	4293      	cmp	r3, r2
 8004398:	bfc4      	itt	gt
 800439a:	1a9b      	subgt	r3, r3, r2
 800439c:	18ed      	addgt	r5, r5, r3
 800439e:	f04f 0900 	mov.w	r9, #0
 80043a2:	341a      	adds	r4, #26
 80043a4:	454d      	cmp	r5, r9
 80043a6:	d11a      	bne.n	80043de <_printf_common+0xd6>
 80043a8:	2000      	movs	r0, #0
 80043aa:	e008      	b.n	80043be <_printf_common+0xb6>
 80043ac:	2301      	movs	r3, #1
 80043ae:	4652      	mov	r2, sl
 80043b0:	4639      	mov	r1, r7
 80043b2:	4630      	mov	r0, r6
 80043b4:	47c0      	blx	r8
 80043b6:	3001      	adds	r0, #1
 80043b8:	d103      	bne.n	80043c2 <_printf_common+0xba>
 80043ba:	f04f 30ff 	mov.w	r0, #4294967295
 80043be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043c2:	3501      	adds	r5, #1
 80043c4:	e7c3      	b.n	800434e <_printf_common+0x46>
 80043c6:	18e1      	adds	r1, r4, r3
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	2030      	movs	r0, #48	; 0x30
 80043cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043d0:	4422      	add	r2, r4
 80043d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043da:	3302      	adds	r3, #2
 80043dc:	e7c5      	b.n	800436a <_printf_common+0x62>
 80043de:	2301      	movs	r3, #1
 80043e0:	4622      	mov	r2, r4
 80043e2:	4639      	mov	r1, r7
 80043e4:	4630      	mov	r0, r6
 80043e6:	47c0      	blx	r8
 80043e8:	3001      	adds	r0, #1
 80043ea:	d0e6      	beq.n	80043ba <_printf_common+0xb2>
 80043ec:	f109 0901 	add.w	r9, r9, #1
 80043f0:	e7d8      	b.n	80043a4 <_printf_common+0x9c>
	...

080043f4 <_printf_i>:
 80043f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80043f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80043fc:	460c      	mov	r4, r1
 80043fe:	7e09      	ldrb	r1, [r1, #24]
 8004400:	b085      	sub	sp, #20
 8004402:	296e      	cmp	r1, #110	; 0x6e
 8004404:	4617      	mov	r7, r2
 8004406:	4606      	mov	r6, r0
 8004408:	4698      	mov	r8, r3
 800440a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800440c:	f000 80b3 	beq.w	8004576 <_printf_i+0x182>
 8004410:	d822      	bhi.n	8004458 <_printf_i+0x64>
 8004412:	2963      	cmp	r1, #99	; 0x63
 8004414:	d036      	beq.n	8004484 <_printf_i+0x90>
 8004416:	d80a      	bhi.n	800442e <_printf_i+0x3a>
 8004418:	2900      	cmp	r1, #0
 800441a:	f000 80b9 	beq.w	8004590 <_printf_i+0x19c>
 800441e:	2958      	cmp	r1, #88	; 0x58
 8004420:	f000 8083 	beq.w	800452a <_printf_i+0x136>
 8004424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004428:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800442c:	e032      	b.n	8004494 <_printf_i+0xa0>
 800442e:	2964      	cmp	r1, #100	; 0x64
 8004430:	d001      	beq.n	8004436 <_printf_i+0x42>
 8004432:	2969      	cmp	r1, #105	; 0x69
 8004434:	d1f6      	bne.n	8004424 <_printf_i+0x30>
 8004436:	6820      	ldr	r0, [r4, #0]
 8004438:	6813      	ldr	r3, [r2, #0]
 800443a:	0605      	lsls	r5, r0, #24
 800443c:	f103 0104 	add.w	r1, r3, #4
 8004440:	d52a      	bpl.n	8004498 <_printf_i+0xa4>
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6011      	str	r1, [r2, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	da03      	bge.n	8004452 <_printf_i+0x5e>
 800444a:	222d      	movs	r2, #45	; 0x2d
 800444c:	425b      	negs	r3, r3
 800444e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004452:	486f      	ldr	r0, [pc, #444]	; (8004610 <_printf_i+0x21c>)
 8004454:	220a      	movs	r2, #10
 8004456:	e039      	b.n	80044cc <_printf_i+0xd8>
 8004458:	2973      	cmp	r1, #115	; 0x73
 800445a:	f000 809d 	beq.w	8004598 <_printf_i+0x1a4>
 800445e:	d808      	bhi.n	8004472 <_printf_i+0x7e>
 8004460:	296f      	cmp	r1, #111	; 0x6f
 8004462:	d020      	beq.n	80044a6 <_printf_i+0xb2>
 8004464:	2970      	cmp	r1, #112	; 0x70
 8004466:	d1dd      	bne.n	8004424 <_printf_i+0x30>
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	f043 0320 	orr.w	r3, r3, #32
 800446e:	6023      	str	r3, [r4, #0]
 8004470:	e003      	b.n	800447a <_printf_i+0x86>
 8004472:	2975      	cmp	r1, #117	; 0x75
 8004474:	d017      	beq.n	80044a6 <_printf_i+0xb2>
 8004476:	2978      	cmp	r1, #120	; 0x78
 8004478:	d1d4      	bne.n	8004424 <_printf_i+0x30>
 800447a:	2378      	movs	r3, #120	; 0x78
 800447c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004480:	4864      	ldr	r0, [pc, #400]	; (8004614 <_printf_i+0x220>)
 8004482:	e055      	b.n	8004530 <_printf_i+0x13c>
 8004484:	6813      	ldr	r3, [r2, #0]
 8004486:	1d19      	adds	r1, r3, #4
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6011      	str	r1, [r2, #0]
 800448c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004490:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004494:	2301      	movs	r3, #1
 8004496:	e08c      	b.n	80045b2 <_printf_i+0x1be>
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6011      	str	r1, [r2, #0]
 800449c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044a0:	bf18      	it	ne
 80044a2:	b21b      	sxthne	r3, r3
 80044a4:	e7cf      	b.n	8004446 <_printf_i+0x52>
 80044a6:	6813      	ldr	r3, [r2, #0]
 80044a8:	6825      	ldr	r5, [r4, #0]
 80044aa:	1d18      	adds	r0, r3, #4
 80044ac:	6010      	str	r0, [r2, #0]
 80044ae:	0628      	lsls	r0, r5, #24
 80044b0:	d501      	bpl.n	80044b6 <_printf_i+0xc2>
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	e002      	b.n	80044bc <_printf_i+0xc8>
 80044b6:	0668      	lsls	r0, r5, #25
 80044b8:	d5fb      	bpl.n	80044b2 <_printf_i+0xbe>
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	4854      	ldr	r0, [pc, #336]	; (8004610 <_printf_i+0x21c>)
 80044be:	296f      	cmp	r1, #111	; 0x6f
 80044c0:	bf14      	ite	ne
 80044c2:	220a      	movne	r2, #10
 80044c4:	2208      	moveq	r2, #8
 80044c6:	2100      	movs	r1, #0
 80044c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044cc:	6865      	ldr	r5, [r4, #4]
 80044ce:	60a5      	str	r5, [r4, #8]
 80044d0:	2d00      	cmp	r5, #0
 80044d2:	f2c0 8095 	blt.w	8004600 <_printf_i+0x20c>
 80044d6:	6821      	ldr	r1, [r4, #0]
 80044d8:	f021 0104 	bic.w	r1, r1, #4
 80044dc:	6021      	str	r1, [r4, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d13d      	bne.n	800455e <_printf_i+0x16a>
 80044e2:	2d00      	cmp	r5, #0
 80044e4:	f040 808e 	bne.w	8004604 <_printf_i+0x210>
 80044e8:	4665      	mov	r5, ip
 80044ea:	2a08      	cmp	r2, #8
 80044ec:	d10b      	bne.n	8004506 <_printf_i+0x112>
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	07db      	lsls	r3, r3, #31
 80044f2:	d508      	bpl.n	8004506 <_printf_i+0x112>
 80044f4:	6923      	ldr	r3, [r4, #16]
 80044f6:	6862      	ldr	r2, [r4, #4]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	bfde      	ittt	le
 80044fc:	2330      	movle	r3, #48	; 0x30
 80044fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004502:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004506:	ebac 0305 	sub.w	r3, ip, r5
 800450a:	6123      	str	r3, [r4, #16]
 800450c:	f8cd 8000 	str.w	r8, [sp]
 8004510:	463b      	mov	r3, r7
 8004512:	aa03      	add	r2, sp, #12
 8004514:	4621      	mov	r1, r4
 8004516:	4630      	mov	r0, r6
 8004518:	f7ff fef6 	bl	8004308 <_printf_common>
 800451c:	3001      	adds	r0, #1
 800451e:	d14d      	bne.n	80045bc <_printf_i+0x1c8>
 8004520:	f04f 30ff 	mov.w	r0, #4294967295
 8004524:	b005      	add	sp, #20
 8004526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800452a:	4839      	ldr	r0, [pc, #228]	; (8004610 <_printf_i+0x21c>)
 800452c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004530:	6813      	ldr	r3, [r2, #0]
 8004532:	6821      	ldr	r1, [r4, #0]
 8004534:	1d1d      	adds	r5, r3, #4
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6015      	str	r5, [r2, #0]
 800453a:	060a      	lsls	r2, r1, #24
 800453c:	d50b      	bpl.n	8004556 <_printf_i+0x162>
 800453e:	07ca      	lsls	r2, r1, #31
 8004540:	bf44      	itt	mi
 8004542:	f041 0120 	orrmi.w	r1, r1, #32
 8004546:	6021      	strmi	r1, [r4, #0]
 8004548:	b91b      	cbnz	r3, 8004552 <_printf_i+0x15e>
 800454a:	6822      	ldr	r2, [r4, #0]
 800454c:	f022 0220 	bic.w	r2, r2, #32
 8004550:	6022      	str	r2, [r4, #0]
 8004552:	2210      	movs	r2, #16
 8004554:	e7b7      	b.n	80044c6 <_printf_i+0xd2>
 8004556:	064d      	lsls	r5, r1, #25
 8004558:	bf48      	it	mi
 800455a:	b29b      	uxthmi	r3, r3
 800455c:	e7ef      	b.n	800453e <_printf_i+0x14a>
 800455e:	4665      	mov	r5, ip
 8004560:	fbb3 f1f2 	udiv	r1, r3, r2
 8004564:	fb02 3311 	mls	r3, r2, r1, r3
 8004568:	5cc3      	ldrb	r3, [r0, r3]
 800456a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800456e:	460b      	mov	r3, r1
 8004570:	2900      	cmp	r1, #0
 8004572:	d1f5      	bne.n	8004560 <_printf_i+0x16c>
 8004574:	e7b9      	b.n	80044ea <_printf_i+0xf6>
 8004576:	6813      	ldr	r3, [r2, #0]
 8004578:	6825      	ldr	r5, [r4, #0]
 800457a:	6961      	ldr	r1, [r4, #20]
 800457c:	1d18      	adds	r0, r3, #4
 800457e:	6010      	str	r0, [r2, #0]
 8004580:	0628      	lsls	r0, r5, #24
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	d501      	bpl.n	800458a <_printf_i+0x196>
 8004586:	6019      	str	r1, [r3, #0]
 8004588:	e002      	b.n	8004590 <_printf_i+0x19c>
 800458a:	066a      	lsls	r2, r5, #25
 800458c:	d5fb      	bpl.n	8004586 <_printf_i+0x192>
 800458e:	8019      	strh	r1, [r3, #0]
 8004590:	2300      	movs	r3, #0
 8004592:	6123      	str	r3, [r4, #16]
 8004594:	4665      	mov	r5, ip
 8004596:	e7b9      	b.n	800450c <_printf_i+0x118>
 8004598:	6813      	ldr	r3, [r2, #0]
 800459a:	1d19      	adds	r1, r3, #4
 800459c:	6011      	str	r1, [r2, #0]
 800459e:	681d      	ldr	r5, [r3, #0]
 80045a0:	6862      	ldr	r2, [r4, #4]
 80045a2:	2100      	movs	r1, #0
 80045a4:	4628      	mov	r0, r5
 80045a6:	f7fb fe1b 	bl	80001e0 <memchr>
 80045aa:	b108      	cbz	r0, 80045b0 <_printf_i+0x1bc>
 80045ac:	1b40      	subs	r0, r0, r5
 80045ae:	6060      	str	r0, [r4, #4]
 80045b0:	6863      	ldr	r3, [r4, #4]
 80045b2:	6123      	str	r3, [r4, #16]
 80045b4:	2300      	movs	r3, #0
 80045b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045ba:	e7a7      	b.n	800450c <_printf_i+0x118>
 80045bc:	6923      	ldr	r3, [r4, #16]
 80045be:	462a      	mov	r2, r5
 80045c0:	4639      	mov	r1, r7
 80045c2:	4630      	mov	r0, r6
 80045c4:	47c0      	blx	r8
 80045c6:	3001      	adds	r0, #1
 80045c8:	d0aa      	beq.n	8004520 <_printf_i+0x12c>
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	079b      	lsls	r3, r3, #30
 80045ce:	d413      	bmi.n	80045f8 <_printf_i+0x204>
 80045d0:	68e0      	ldr	r0, [r4, #12]
 80045d2:	9b03      	ldr	r3, [sp, #12]
 80045d4:	4298      	cmp	r0, r3
 80045d6:	bfb8      	it	lt
 80045d8:	4618      	movlt	r0, r3
 80045da:	e7a3      	b.n	8004524 <_printf_i+0x130>
 80045dc:	2301      	movs	r3, #1
 80045de:	464a      	mov	r2, r9
 80045e0:	4639      	mov	r1, r7
 80045e2:	4630      	mov	r0, r6
 80045e4:	47c0      	blx	r8
 80045e6:	3001      	adds	r0, #1
 80045e8:	d09a      	beq.n	8004520 <_printf_i+0x12c>
 80045ea:	3501      	adds	r5, #1
 80045ec:	68e3      	ldr	r3, [r4, #12]
 80045ee:	9a03      	ldr	r2, [sp, #12]
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	42ab      	cmp	r3, r5
 80045f4:	dcf2      	bgt.n	80045dc <_printf_i+0x1e8>
 80045f6:	e7eb      	b.n	80045d0 <_printf_i+0x1dc>
 80045f8:	2500      	movs	r5, #0
 80045fa:	f104 0919 	add.w	r9, r4, #25
 80045fe:	e7f5      	b.n	80045ec <_printf_i+0x1f8>
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1ac      	bne.n	800455e <_printf_i+0x16a>
 8004604:	7803      	ldrb	r3, [r0, #0]
 8004606:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800460a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800460e:	e76c      	b.n	80044ea <_printf_i+0xf6>
 8004610:	08005e76 	.word	0x08005e76
 8004614:	08005e87 	.word	0x08005e87

08004618 <siprintf>:
 8004618:	b40e      	push	{r1, r2, r3}
 800461a:	b500      	push	{lr}
 800461c:	b09c      	sub	sp, #112	; 0x70
 800461e:	ab1d      	add	r3, sp, #116	; 0x74
 8004620:	9002      	str	r0, [sp, #8]
 8004622:	9006      	str	r0, [sp, #24]
 8004624:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004628:	4809      	ldr	r0, [pc, #36]	; (8004650 <siprintf+0x38>)
 800462a:	9107      	str	r1, [sp, #28]
 800462c:	9104      	str	r1, [sp, #16]
 800462e:	4909      	ldr	r1, [pc, #36]	; (8004654 <siprintf+0x3c>)
 8004630:	f853 2b04 	ldr.w	r2, [r3], #4
 8004634:	9105      	str	r1, [sp, #20]
 8004636:	6800      	ldr	r0, [r0, #0]
 8004638:	9301      	str	r3, [sp, #4]
 800463a:	a902      	add	r1, sp, #8
 800463c:	f001 fa5c 	bl	8005af8 <_svfiprintf_r>
 8004640:	9b02      	ldr	r3, [sp, #8]
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	b01c      	add	sp, #112	; 0x70
 8004648:	f85d eb04 	ldr.w	lr, [sp], #4
 800464c:	b003      	add	sp, #12
 800464e:	4770      	bx	lr
 8004650:	2000000c 	.word	0x2000000c
 8004654:	ffff0208 	.word	0xffff0208

08004658 <quorem>:
 8004658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800465c:	6903      	ldr	r3, [r0, #16]
 800465e:	690c      	ldr	r4, [r1, #16]
 8004660:	42a3      	cmp	r3, r4
 8004662:	4680      	mov	r8, r0
 8004664:	f2c0 8082 	blt.w	800476c <quorem+0x114>
 8004668:	3c01      	subs	r4, #1
 800466a:	f101 0714 	add.w	r7, r1, #20
 800466e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004672:	f100 0614 	add.w	r6, r0, #20
 8004676:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800467a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800467e:	eb06 030c 	add.w	r3, r6, ip
 8004682:	3501      	adds	r5, #1
 8004684:	eb07 090c 	add.w	r9, r7, ip
 8004688:	9301      	str	r3, [sp, #4]
 800468a:	fbb0 f5f5 	udiv	r5, r0, r5
 800468e:	b395      	cbz	r5, 80046f6 <quorem+0x9e>
 8004690:	f04f 0a00 	mov.w	sl, #0
 8004694:	4638      	mov	r0, r7
 8004696:	46b6      	mov	lr, r6
 8004698:	46d3      	mov	fp, sl
 800469a:	f850 2b04 	ldr.w	r2, [r0], #4
 800469e:	b293      	uxth	r3, r2
 80046a0:	fb05 a303 	mla	r3, r5, r3, sl
 80046a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	ebab 0303 	sub.w	r3, fp, r3
 80046ae:	0c12      	lsrs	r2, r2, #16
 80046b0:	f8de b000 	ldr.w	fp, [lr]
 80046b4:	fb05 a202 	mla	r2, r5, r2, sl
 80046b8:	fa13 f38b 	uxtah	r3, r3, fp
 80046bc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80046c0:	fa1f fb82 	uxth.w	fp, r2
 80046c4:	f8de 2000 	ldr.w	r2, [lr]
 80046c8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80046cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046d6:	4581      	cmp	r9, r0
 80046d8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80046dc:	f84e 3b04 	str.w	r3, [lr], #4
 80046e0:	d2db      	bcs.n	800469a <quorem+0x42>
 80046e2:	f856 300c 	ldr.w	r3, [r6, ip]
 80046e6:	b933      	cbnz	r3, 80046f6 <quorem+0x9e>
 80046e8:	9b01      	ldr	r3, [sp, #4]
 80046ea:	3b04      	subs	r3, #4
 80046ec:	429e      	cmp	r6, r3
 80046ee:	461a      	mov	r2, r3
 80046f0:	d330      	bcc.n	8004754 <quorem+0xfc>
 80046f2:	f8c8 4010 	str.w	r4, [r8, #16]
 80046f6:	4640      	mov	r0, r8
 80046f8:	f001 f828 	bl	800574c <__mcmp>
 80046fc:	2800      	cmp	r0, #0
 80046fe:	db25      	blt.n	800474c <quorem+0xf4>
 8004700:	3501      	adds	r5, #1
 8004702:	4630      	mov	r0, r6
 8004704:	f04f 0c00 	mov.w	ip, #0
 8004708:	f857 2b04 	ldr.w	r2, [r7], #4
 800470c:	f8d0 e000 	ldr.w	lr, [r0]
 8004710:	b293      	uxth	r3, r2
 8004712:	ebac 0303 	sub.w	r3, ip, r3
 8004716:	0c12      	lsrs	r2, r2, #16
 8004718:	fa13 f38e 	uxtah	r3, r3, lr
 800471c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004720:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004724:	b29b      	uxth	r3, r3
 8004726:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800472a:	45b9      	cmp	r9, r7
 800472c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004730:	f840 3b04 	str.w	r3, [r0], #4
 8004734:	d2e8      	bcs.n	8004708 <quorem+0xb0>
 8004736:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800473a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800473e:	b92a      	cbnz	r2, 800474c <quorem+0xf4>
 8004740:	3b04      	subs	r3, #4
 8004742:	429e      	cmp	r6, r3
 8004744:	461a      	mov	r2, r3
 8004746:	d30b      	bcc.n	8004760 <quorem+0x108>
 8004748:	f8c8 4010 	str.w	r4, [r8, #16]
 800474c:	4628      	mov	r0, r5
 800474e:	b003      	add	sp, #12
 8004750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004754:	6812      	ldr	r2, [r2, #0]
 8004756:	3b04      	subs	r3, #4
 8004758:	2a00      	cmp	r2, #0
 800475a:	d1ca      	bne.n	80046f2 <quorem+0x9a>
 800475c:	3c01      	subs	r4, #1
 800475e:	e7c5      	b.n	80046ec <quorem+0x94>
 8004760:	6812      	ldr	r2, [r2, #0]
 8004762:	3b04      	subs	r3, #4
 8004764:	2a00      	cmp	r2, #0
 8004766:	d1ef      	bne.n	8004748 <quorem+0xf0>
 8004768:	3c01      	subs	r4, #1
 800476a:	e7ea      	b.n	8004742 <quorem+0xea>
 800476c:	2000      	movs	r0, #0
 800476e:	e7ee      	b.n	800474e <quorem+0xf6>

08004770 <_dtoa_r>:
 8004770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004774:	ec57 6b10 	vmov	r6, r7, d0
 8004778:	b097      	sub	sp, #92	; 0x5c
 800477a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800477c:	9106      	str	r1, [sp, #24]
 800477e:	4604      	mov	r4, r0
 8004780:	920b      	str	r2, [sp, #44]	; 0x2c
 8004782:	9312      	str	r3, [sp, #72]	; 0x48
 8004784:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004788:	e9cd 6700 	strd	r6, r7, [sp]
 800478c:	b93d      	cbnz	r5, 800479e <_dtoa_r+0x2e>
 800478e:	2010      	movs	r0, #16
 8004790:	f000 fdb4 	bl	80052fc <malloc>
 8004794:	6260      	str	r0, [r4, #36]	; 0x24
 8004796:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800479a:	6005      	str	r5, [r0, #0]
 800479c:	60c5      	str	r5, [r0, #12]
 800479e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047a0:	6819      	ldr	r1, [r3, #0]
 80047a2:	b151      	cbz	r1, 80047ba <_dtoa_r+0x4a>
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	604a      	str	r2, [r1, #4]
 80047a8:	2301      	movs	r3, #1
 80047aa:	4093      	lsls	r3, r2
 80047ac:	608b      	str	r3, [r1, #8]
 80047ae:	4620      	mov	r0, r4
 80047b0:	f000 fdeb 	bl	800538a <_Bfree>
 80047b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	1e3b      	subs	r3, r7, #0
 80047bc:	bfbb      	ittet	lt
 80047be:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80047c2:	9301      	strlt	r3, [sp, #4]
 80047c4:	2300      	movge	r3, #0
 80047c6:	2201      	movlt	r2, #1
 80047c8:	bfac      	ite	ge
 80047ca:	f8c8 3000 	strge.w	r3, [r8]
 80047ce:	f8c8 2000 	strlt.w	r2, [r8]
 80047d2:	4baf      	ldr	r3, [pc, #700]	; (8004a90 <_dtoa_r+0x320>)
 80047d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80047d8:	ea33 0308 	bics.w	r3, r3, r8
 80047dc:	d114      	bne.n	8004808 <_dtoa_r+0x98>
 80047de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80047e0:	f242 730f 	movw	r3, #9999	; 0x270f
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	9b00      	ldr	r3, [sp, #0]
 80047e8:	b923      	cbnz	r3, 80047f4 <_dtoa_r+0x84>
 80047ea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80047ee:	2800      	cmp	r0, #0
 80047f0:	f000 8542 	beq.w	8005278 <_dtoa_r+0xb08>
 80047f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047f6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004aa4 <_dtoa_r+0x334>
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 8544 	beq.w	8005288 <_dtoa_r+0xb18>
 8004800:	f10b 0303 	add.w	r3, fp, #3
 8004804:	f000 bd3e 	b.w	8005284 <_dtoa_r+0xb14>
 8004808:	e9dd 6700 	ldrd	r6, r7, [sp]
 800480c:	2200      	movs	r2, #0
 800480e:	2300      	movs	r3, #0
 8004810:	4630      	mov	r0, r6
 8004812:	4639      	mov	r1, r7
 8004814:	f7fc f958 	bl	8000ac8 <__aeabi_dcmpeq>
 8004818:	4681      	mov	r9, r0
 800481a:	b168      	cbz	r0, 8004838 <_dtoa_r+0xc8>
 800481c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800481e:	2301      	movs	r3, #1
 8004820:	6013      	str	r3, [r2, #0]
 8004822:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 8524 	beq.w	8005272 <_dtoa_r+0xb02>
 800482a:	4b9a      	ldr	r3, [pc, #616]	; (8004a94 <_dtoa_r+0x324>)
 800482c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800482e:	f103 3bff 	add.w	fp, r3, #4294967295
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	f000 bd28 	b.w	8005288 <_dtoa_r+0xb18>
 8004838:	aa14      	add	r2, sp, #80	; 0x50
 800483a:	a915      	add	r1, sp, #84	; 0x54
 800483c:	ec47 6b10 	vmov	d0, r6, r7
 8004840:	4620      	mov	r0, r4
 8004842:	f000 fffa 	bl	800583a <__d2b>
 8004846:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800484a:	9004      	str	r0, [sp, #16]
 800484c:	2d00      	cmp	r5, #0
 800484e:	d07c      	beq.n	800494a <_dtoa_r+0x1da>
 8004850:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004854:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004858:	46b2      	mov	sl, r6
 800485a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800485e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004862:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004866:	2200      	movs	r2, #0
 8004868:	4b8b      	ldr	r3, [pc, #556]	; (8004a98 <_dtoa_r+0x328>)
 800486a:	4650      	mov	r0, sl
 800486c:	4659      	mov	r1, fp
 800486e:	f7fb fd0b 	bl	8000288 <__aeabi_dsub>
 8004872:	a381      	add	r3, pc, #516	; (adr r3, 8004a78 <_dtoa_r+0x308>)
 8004874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004878:	f7fb febe 	bl	80005f8 <__aeabi_dmul>
 800487c:	a380      	add	r3, pc, #512	; (adr r3, 8004a80 <_dtoa_r+0x310>)
 800487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004882:	f7fb fd03 	bl	800028c <__adddf3>
 8004886:	4606      	mov	r6, r0
 8004888:	4628      	mov	r0, r5
 800488a:	460f      	mov	r7, r1
 800488c:	f7fb fe4a 	bl	8000524 <__aeabi_i2d>
 8004890:	a37d      	add	r3, pc, #500	; (adr r3, 8004a88 <_dtoa_r+0x318>)
 8004892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004896:	f7fb feaf 	bl	80005f8 <__aeabi_dmul>
 800489a:	4602      	mov	r2, r0
 800489c:	460b      	mov	r3, r1
 800489e:	4630      	mov	r0, r6
 80048a0:	4639      	mov	r1, r7
 80048a2:	f7fb fcf3 	bl	800028c <__adddf3>
 80048a6:	4606      	mov	r6, r0
 80048a8:	460f      	mov	r7, r1
 80048aa:	f7fc f955 	bl	8000b58 <__aeabi_d2iz>
 80048ae:	2200      	movs	r2, #0
 80048b0:	4682      	mov	sl, r0
 80048b2:	2300      	movs	r3, #0
 80048b4:	4630      	mov	r0, r6
 80048b6:	4639      	mov	r1, r7
 80048b8:	f7fc f910 	bl	8000adc <__aeabi_dcmplt>
 80048bc:	b148      	cbz	r0, 80048d2 <_dtoa_r+0x162>
 80048be:	4650      	mov	r0, sl
 80048c0:	f7fb fe30 	bl	8000524 <__aeabi_i2d>
 80048c4:	4632      	mov	r2, r6
 80048c6:	463b      	mov	r3, r7
 80048c8:	f7fc f8fe 	bl	8000ac8 <__aeabi_dcmpeq>
 80048cc:	b908      	cbnz	r0, 80048d2 <_dtoa_r+0x162>
 80048ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80048d2:	f1ba 0f16 	cmp.w	sl, #22
 80048d6:	d859      	bhi.n	800498c <_dtoa_r+0x21c>
 80048d8:	4970      	ldr	r1, [pc, #448]	; (8004a9c <_dtoa_r+0x32c>)
 80048da:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80048de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80048e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048e6:	f7fc f917 	bl	8000b18 <__aeabi_dcmpgt>
 80048ea:	2800      	cmp	r0, #0
 80048ec:	d050      	beq.n	8004990 <_dtoa_r+0x220>
 80048ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80048f2:	2300      	movs	r3, #0
 80048f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80048f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80048f8:	1b5d      	subs	r5, r3, r5
 80048fa:	f1b5 0801 	subs.w	r8, r5, #1
 80048fe:	bf49      	itett	mi
 8004900:	f1c5 0301 	rsbmi	r3, r5, #1
 8004904:	2300      	movpl	r3, #0
 8004906:	9305      	strmi	r3, [sp, #20]
 8004908:	f04f 0800 	movmi.w	r8, #0
 800490c:	bf58      	it	pl
 800490e:	9305      	strpl	r3, [sp, #20]
 8004910:	f1ba 0f00 	cmp.w	sl, #0
 8004914:	db3e      	blt.n	8004994 <_dtoa_r+0x224>
 8004916:	2300      	movs	r3, #0
 8004918:	44d0      	add	r8, sl
 800491a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800491e:	9307      	str	r3, [sp, #28]
 8004920:	9b06      	ldr	r3, [sp, #24]
 8004922:	2b09      	cmp	r3, #9
 8004924:	f200 8090 	bhi.w	8004a48 <_dtoa_r+0x2d8>
 8004928:	2b05      	cmp	r3, #5
 800492a:	bfc4      	itt	gt
 800492c:	3b04      	subgt	r3, #4
 800492e:	9306      	strgt	r3, [sp, #24]
 8004930:	9b06      	ldr	r3, [sp, #24]
 8004932:	f1a3 0302 	sub.w	r3, r3, #2
 8004936:	bfcc      	ite	gt
 8004938:	2500      	movgt	r5, #0
 800493a:	2501      	movle	r5, #1
 800493c:	2b03      	cmp	r3, #3
 800493e:	f200 808f 	bhi.w	8004a60 <_dtoa_r+0x2f0>
 8004942:	e8df f003 	tbb	[pc, r3]
 8004946:	7f7d      	.short	0x7f7d
 8004948:	7131      	.short	0x7131
 800494a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800494e:	441d      	add	r5, r3
 8004950:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004954:	2820      	cmp	r0, #32
 8004956:	dd13      	ble.n	8004980 <_dtoa_r+0x210>
 8004958:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800495c:	9b00      	ldr	r3, [sp, #0]
 800495e:	fa08 f800 	lsl.w	r8, r8, r0
 8004962:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004966:	fa23 f000 	lsr.w	r0, r3, r0
 800496a:	ea48 0000 	orr.w	r0, r8, r0
 800496e:	f7fb fdc9 	bl	8000504 <__aeabi_ui2d>
 8004972:	2301      	movs	r3, #1
 8004974:	4682      	mov	sl, r0
 8004976:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800497a:	3d01      	subs	r5, #1
 800497c:	9313      	str	r3, [sp, #76]	; 0x4c
 800497e:	e772      	b.n	8004866 <_dtoa_r+0xf6>
 8004980:	9b00      	ldr	r3, [sp, #0]
 8004982:	f1c0 0020 	rsb	r0, r0, #32
 8004986:	fa03 f000 	lsl.w	r0, r3, r0
 800498a:	e7f0      	b.n	800496e <_dtoa_r+0x1fe>
 800498c:	2301      	movs	r3, #1
 800498e:	e7b1      	b.n	80048f4 <_dtoa_r+0x184>
 8004990:	900f      	str	r0, [sp, #60]	; 0x3c
 8004992:	e7b0      	b.n	80048f6 <_dtoa_r+0x186>
 8004994:	9b05      	ldr	r3, [sp, #20]
 8004996:	eba3 030a 	sub.w	r3, r3, sl
 800499a:	9305      	str	r3, [sp, #20]
 800499c:	f1ca 0300 	rsb	r3, sl, #0
 80049a0:	9307      	str	r3, [sp, #28]
 80049a2:	2300      	movs	r3, #0
 80049a4:	930e      	str	r3, [sp, #56]	; 0x38
 80049a6:	e7bb      	b.n	8004920 <_dtoa_r+0x1b0>
 80049a8:	2301      	movs	r3, #1
 80049aa:	930a      	str	r3, [sp, #40]	; 0x28
 80049ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	dd59      	ble.n	8004a66 <_dtoa_r+0x2f6>
 80049b2:	9302      	str	r3, [sp, #8]
 80049b4:	4699      	mov	r9, r3
 80049b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80049b8:	2200      	movs	r2, #0
 80049ba:	6072      	str	r2, [r6, #4]
 80049bc:	2204      	movs	r2, #4
 80049be:	f102 0014 	add.w	r0, r2, #20
 80049c2:	4298      	cmp	r0, r3
 80049c4:	6871      	ldr	r1, [r6, #4]
 80049c6:	d953      	bls.n	8004a70 <_dtoa_r+0x300>
 80049c8:	4620      	mov	r0, r4
 80049ca:	f000 fcaa 	bl	8005322 <_Balloc>
 80049ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049d0:	6030      	str	r0, [r6, #0]
 80049d2:	f1b9 0f0e 	cmp.w	r9, #14
 80049d6:	f8d3 b000 	ldr.w	fp, [r3]
 80049da:	f200 80e6 	bhi.w	8004baa <_dtoa_r+0x43a>
 80049de:	2d00      	cmp	r5, #0
 80049e0:	f000 80e3 	beq.w	8004baa <_dtoa_r+0x43a>
 80049e4:	ed9d 7b00 	vldr	d7, [sp]
 80049e8:	f1ba 0f00 	cmp.w	sl, #0
 80049ec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80049f0:	dd74      	ble.n	8004adc <_dtoa_r+0x36c>
 80049f2:	4a2a      	ldr	r2, [pc, #168]	; (8004a9c <_dtoa_r+0x32c>)
 80049f4:	f00a 030f 	and.w	r3, sl, #15
 80049f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80049fc:	ed93 7b00 	vldr	d7, [r3]
 8004a00:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004a04:	06f0      	lsls	r0, r6, #27
 8004a06:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004a0a:	d565      	bpl.n	8004ad8 <_dtoa_r+0x368>
 8004a0c:	4b24      	ldr	r3, [pc, #144]	; (8004aa0 <_dtoa_r+0x330>)
 8004a0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004a12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004a16:	f7fb ff19 	bl	800084c <__aeabi_ddiv>
 8004a1a:	e9cd 0100 	strd	r0, r1, [sp]
 8004a1e:	f006 060f 	and.w	r6, r6, #15
 8004a22:	2503      	movs	r5, #3
 8004a24:	4f1e      	ldr	r7, [pc, #120]	; (8004aa0 <_dtoa_r+0x330>)
 8004a26:	e04c      	b.n	8004ac2 <_dtoa_r+0x352>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	930a      	str	r3, [sp, #40]	; 0x28
 8004a2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a2e:	4453      	add	r3, sl
 8004a30:	f103 0901 	add.w	r9, r3, #1
 8004a34:	9302      	str	r3, [sp, #8]
 8004a36:	464b      	mov	r3, r9
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	bfb8      	it	lt
 8004a3c:	2301      	movlt	r3, #1
 8004a3e:	e7ba      	b.n	80049b6 <_dtoa_r+0x246>
 8004a40:	2300      	movs	r3, #0
 8004a42:	e7b2      	b.n	80049aa <_dtoa_r+0x23a>
 8004a44:	2300      	movs	r3, #0
 8004a46:	e7f0      	b.n	8004a2a <_dtoa_r+0x2ba>
 8004a48:	2501      	movs	r5, #1
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	9306      	str	r3, [sp, #24]
 8004a4e:	950a      	str	r5, [sp, #40]	; 0x28
 8004a50:	f04f 33ff 	mov.w	r3, #4294967295
 8004a54:	9302      	str	r3, [sp, #8]
 8004a56:	4699      	mov	r9, r3
 8004a58:	2200      	movs	r2, #0
 8004a5a:	2312      	movs	r3, #18
 8004a5c:	920b      	str	r2, [sp, #44]	; 0x2c
 8004a5e:	e7aa      	b.n	80049b6 <_dtoa_r+0x246>
 8004a60:	2301      	movs	r3, #1
 8004a62:	930a      	str	r3, [sp, #40]	; 0x28
 8004a64:	e7f4      	b.n	8004a50 <_dtoa_r+0x2e0>
 8004a66:	2301      	movs	r3, #1
 8004a68:	9302      	str	r3, [sp, #8]
 8004a6a:	4699      	mov	r9, r3
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	e7f5      	b.n	8004a5c <_dtoa_r+0x2ec>
 8004a70:	3101      	adds	r1, #1
 8004a72:	6071      	str	r1, [r6, #4]
 8004a74:	0052      	lsls	r2, r2, #1
 8004a76:	e7a2      	b.n	80049be <_dtoa_r+0x24e>
 8004a78:	636f4361 	.word	0x636f4361
 8004a7c:	3fd287a7 	.word	0x3fd287a7
 8004a80:	8b60c8b3 	.word	0x8b60c8b3
 8004a84:	3fc68a28 	.word	0x3fc68a28
 8004a88:	509f79fb 	.word	0x509f79fb
 8004a8c:	3fd34413 	.word	0x3fd34413
 8004a90:	7ff00000 	.word	0x7ff00000
 8004a94:	08005e75 	.word	0x08005e75
 8004a98:	3ff80000 	.word	0x3ff80000
 8004a9c:	08005ed0 	.word	0x08005ed0
 8004aa0:	08005ea8 	.word	0x08005ea8
 8004aa4:	08005ea1 	.word	0x08005ea1
 8004aa8:	07f1      	lsls	r1, r6, #31
 8004aaa:	d508      	bpl.n	8004abe <_dtoa_r+0x34e>
 8004aac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ab4:	f7fb fda0 	bl	80005f8 <__aeabi_dmul>
 8004ab8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004abc:	3501      	adds	r5, #1
 8004abe:	1076      	asrs	r6, r6, #1
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	2e00      	cmp	r6, #0
 8004ac4:	d1f0      	bne.n	8004aa8 <_dtoa_r+0x338>
 8004ac6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004aca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ace:	f7fb febd 	bl	800084c <__aeabi_ddiv>
 8004ad2:	e9cd 0100 	strd	r0, r1, [sp]
 8004ad6:	e01a      	b.n	8004b0e <_dtoa_r+0x39e>
 8004ad8:	2502      	movs	r5, #2
 8004ada:	e7a3      	b.n	8004a24 <_dtoa_r+0x2b4>
 8004adc:	f000 80a0 	beq.w	8004c20 <_dtoa_r+0x4b0>
 8004ae0:	f1ca 0600 	rsb	r6, sl, #0
 8004ae4:	4b9f      	ldr	r3, [pc, #636]	; (8004d64 <_dtoa_r+0x5f4>)
 8004ae6:	4fa0      	ldr	r7, [pc, #640]	; (8004d68 <_dtoa_r+0x5f8>)
 8004ae8:	f006 020f 	and.w	r2, r6, #15
 8004aec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004af8:	f7fb fd7e 	bl	80005f8 <__aeabi_dmul>
 8004afc:	e9cd 0100 	strd	r0, r1, [sp]
 8004b00:	1136      	asrs	r6, r6, #4
 8004b02:	2300      	movs	r3, #0
 8004b04:	2502      	movs	r5, #2
 8004b06:	2e00      	cmp	r6, #0
 8004b08:	d17f      	bne.n	8004c0a <_dtoa_r+0x49a>
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1e1      	bne.n	8004ad2 <_dtoa_r+0x362>
 8004b0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 8087 	beq.w	8004c24 <_dtoa_r+0x4b4>
 8004b16:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	4b93      	ldr	r3, [pc, #588]	; (8004d6c <_dtoa_r+0x5fc>)
 8004b1e:	4630      	mov	r0, r6
 8004b20:	4639      	mov	r1, r7
 8004b22:	f7fb ffdb 	bl	8000adc <__aeabi_dcmplt>
 8004b26:	2800      	cmp	r0, #0
 8004b28:	d07c      	beq.n	8004c24 <_dtoa_r+0x4b4>
 8004b2a:	f1b9 0f00 	cmp.w	r9, #0
 8004b2e:	d079      	beq.n	8004c24 <_dtoa_r+0x4b4>
 8004b30:	9b02      	ldr	r3, [sp, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	dd35      	ble.n	8004ba2 <_dtoa_r+0x432>
 8004b36:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004b3a:	9308      	str	r3, [sp, #32]
 8004b3c:	4639      	mov	r1, r7
 8004b3e:	2200      	movs	r2, #0
 8004b40:	4b8b      	ldr	r3, [pc, #556]	; (8004d70 <_dtoa_r+0x600>)
 8004b42:	4630      	mov	r0, r6
 8004b44:	f7fb fd58 	bl	80005f8 <__aeabi_dmul>
 8004b48:	e9cd 0100 	strd	r0, r1, [sp]
 8004b4c:	9f02      	ldr	r7, [sp, #8]
 8004b4e:	3501      	adds	r5, #1
 8004b50:	4628      	mov	r0, r5
 8004b52:	f7fb fce7 	bl	8000524 <__aeabi_i2d>
 8004b56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b5a:	f7fb fd4d 	bl	80005f8 <__aeabi_dmul>
 8004b5e:	2200      	movs	r2, #0
 8004b60:	4b84      	ldr	r3, [pc, #528]	; (8004d74 <_dtoa_r+0x604>)
 8004b62:	f7fb fb93 	bl	800028c <__adddf3>
 8004b66:	4605      	mov	r5, r0
 8004b68:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004b6c:	2f00      	cmp	r7, #0
 8004b6e:	d15d      	bne.n	8004c2c <_dtoa_r+0x4bc>
 8004b70:	2200      	movs	r2, #0
 8004b72:	4b81      	ldr	r3, [pc, #516]	; (8004d78 <_dtoa_r+0x608>)
 8004b74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b78:	f7fb fb86 	bl	8000288 <__aeabi_dsub>
 8004b7c:	462a      	mov	r2, r5
 8004b7e:	4633      	mov	r3, r6
 8004b80:	e9cd 0100 	strd	r0, r1, [sp]
 8004b84:	f7fb ffc8 	bl	8000b18 <__aeabi_dcmpgt>
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	f040 8288 	bne.w	800509e <_dtoa_r+0x92e>
 8004b8e:	462a      	mov	r2, r5
 8004b90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004b94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b98:	f7fb ffa0 	bl	8000adc <__aeabi_dcmplt>
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	f040 827c 	bne.w	800509a <_dtoa_r+0x92a>
 8004ba2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ba6:	e9cd 2300 	strd	r2, r3, [sp]
 8004baa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f2c0 8150 	blt.w	8004e52 <_dtoa_r+0x6e2>
 8004bb2:	f1ba 0f0e 	cmp.w	sl, #14
 8004bb6:	f300 814c 	bgt.w	8004e52 <_dtoa_r+0x6e2>
 8004bba:	4b6a      	ldr	r3, [pc, #424]	; (8004d64 <_dtoa_r+0x5f4>)
 8004bbc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004bc0:	ed93 7b00 	vldr	d7, [r3]
 8004bc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004bcc:	f280 80d8 	bge.w	8004d80 <_dtoa_r+0x610>
 8004bd0:	f1b9 0f00 	cmp.w	r9, #0
 8004bd4:	f300 80d4 	bgt.w	8004d80 <_dtoa_r+0x610>
 8004bd8:	f040 825e 	bne.w	8005098 <_dtoa_r+0x928>
 8004bdc:	2200      	movs	r2, #0
 8004bde:	4b66      	ldr	r3, [pc, #408]	; (8004d78 <_dtoa_r+0x608>)
 8004be0:	ec51 0b17 	vmov	r0, r1, d7
 8004be4:	f7fb fd08 	bl	80005f8 <__aeabi_dmul>
 8004be8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bec:	f7fb ff8a 	bl	8000b04 <__aeabi_dcmpge>
 8004bf0:	464f      	mov	r7, r9
 8004bf2:	464e      	mov	r6, r9
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	f040 8234 	bne.w	8005062 <_dtoa_r+0x8f2>
 8004bfa:	2331      	movs	r3, #49	; 0x31
 8004bfc:	f10b 0501 	add.w	r5, fp, #1
 8004c00:	f88b 3000 	strb.w	r3, [fp]
 8004c04:	f10a 0a01 	add.w	sl, sl, #1
 8004c08:	e22f      	b.n	800506a <_dtoa_r+0x8fa>
 8004c0a:	07f2      	lsls	r2, r6, #31
 8004c0c:	d505      	bpl.n	8004c1a <_dtoa_r+0x4aa>
 8004c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c12:	f7fb fcf1 	bl	80005f8 <__aeabi_dmul>
 8004c16:	3501      	adds	r5, #1
 8004c18:	2301      	movs	r3, #1
 8004c1a:	1076      	asrs	r6, r6, #1
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	e772      	b.n	8004b06 <_dtoa_r+0x396>
 8004c20:	2502      	movs	r5, #2
 8004c22:	e774      	b.n	8004b0e <_dtoa_r+0x39e>
 8004c24:	f8cd a020 	str.w	sl, [sp, #32]
 8004c28:	464f      	mov	r7, r9
 8004c2a:	e791      	b.n	8004b50 <_dtoa_r+0x3e0>
 8004c2c:	4b4d      	ldr	r3, [pc, #308]	; (8004d64 <_dtoa_r+0x5f4>)
 8004c2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004c32:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d047      	beq.n	8004ccc <_dtoa_r+0x55c>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	2000      	movs	r0, #0
 8004c42:	494e      	ldr	r1, [pc, #312]	; (8004d7c <_dtoa_r+0x60c>)
 8004c44:	f7fb fe02 	bl	800084c <__aeabi_ddiv>
 8004c48:	462a      	mov	r2, r5
 8004c4a:	4633      	mov	r3, r6
 8004c4c:	f7fb fb1c 	bl	8000288 <__aeabi_dsub>
 8004c50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004c54:	465d      	mov	r5, fp
 8004c56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c5a:	f7fb ff7d 	bl	8000b58 <__aeabi_d2iz>
 8004c5e:	4606      	mov	r6, r0
 8004c60:	f7fb fc60 	bl	8000524 <__aeabi_i2d>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c6c:	f7fb fb0c 	bl	8000288 <__aeabi_dsub>
 8004c70:	3630      	adds	r6, #48	; 0x30
 8004c72:	f805 6b01 	strb.w	r6, [r5], #1
 8004c76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004c7a:	e9cd 0100 	strd	r0, r1, [sp]
 8004c7e:	f7fb ff2d 	bl	8000adc <__aeabi_dcmplt>
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d163      	bne.n	8004d4e <_dtoa_r+0x5de>
 8004c86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	4937      	ldr	r1, [pc, #220]	; (8004d6c <_dtoa_r+0x5fc>)
 8004c8e:	f7fb fafb 	bl	8000288 <__aeabi_dsub>
 8004c92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004c96:	f7fb ff21 	bl	8000adc <__aeabi_dcmplt>
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	f040 80b7 	bne.w	8004e0e <_dtoa_r+0x69e>
 8004ca0:	eba5 030b 	sub.w	r3, r5, fp
 8004ca4:	429f      	cmp	r7, r3
 8004ca6:	f77f af7c 	ble.w	8004ba2 <_dtoa_r+0x432>
 8004caa:	2200      	movs	r2, #0
 8004cac:	4b30      	ldr	r3, [pc, #192]	; (8004d70 <_dtoa_r+0x600>)
 8004cae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004cb2:	f7fb fca1 	bl	80005f8 <__aeabi_dmul>
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004cbc:	4b2c      	ldr	r3, [pc, #176]	; (8004d70 <_dtoa_r+0x600>)
 8004cbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004cc2:	f7fb fc99 	bl	80005f8 <__aeabi_dmul>
 8004cc6:	e9cd 0100 	strd	r0, r1, [sp]
 8004cca:	e7c4      	b.n	8004c56 <_dtoa_r+0x4e6>
 8004ccc:	462a      	mov	r2, r5
 8004cce:	4633      	mov	r3, r6
 8004cd0:	f7fb fc92 	bl	80005f8 <__aeabi_dmul>
 8004cd4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004cd8:	eb0b 0507 	add.w	r5, fp, r7
 8004cdc:	465e      	mov	r6, fp
 8004cde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ce2:	f7fb ff39 	bl	8000b58 <__aeabi_d2iz>
 8004ce6:	4607      	mov	r7, r0
 8004ce8:	f7fb fc1c 	bl	8000524 <__aeabi_i2d>
 8004cec:	3730      	adds	r7, #48	; 0x30
 8004cee:	4602      	mov	r2, r0
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004cf6:	f7fb fac7 	bl	8000288 <__aeabi_dsub>
 8004cfa:	f806 7b01 	strb.w	r7, [r6], #1
 8004cfe:	42ae      	cmp	r6, r5
 8004d00:	e9cd 0100 	strd	r0, r1, [sp]
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	d126      	bne.n	8004d58 <_dtoa_r+0x5e8>
 8004d0a:	4b1c      	ldr	r3, [pc, #112]	; (8004d7c <_dtoa_r+0x60c>)
 8004d0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d10:	f7fb fabc 	bl	800028c <__adddf3>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d1c:	f7fb fefc 	bl	8000b18 <__aeabi_dcmpgt>
 8004d20:	2800      	cmp	r0, #0
 8004d22:	d174      	bne.n	8004e0e <_dtoa_r+0x69e>
 8004d24:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004d28:	2000      	movs	r0, #0
 8004d2a:	4914      	ldr	r1, [pc, #80]	; (8004d7c <_dtoa_r+0x60c>)
 8004d2c:	f7fb faac 	bl	8000288 <__aeabi_dsub>
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d38:	f7fb fed0 	bl	8000adc <__aeabi_dcmplt>
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	f43f af30 	beq.w	8004ba2 <_dtoa_r+0x432>
 8004d42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004d46:	2b30      	cmp	r3, #48	; 0x30
 8004d48:	f105 32ff 	add.w	r2, r5, #4294967295
 8004d4c:	d002      	beq.n	8004d54 <_dtoa_r+0x5e4>
 8004d4e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004d52:	e04a      	b.n	8004dea <_dtoa_r+0x67a>
 8004d54:	4615      	mov	r5, r2
 8004d56:	e7f4      	b.n	8004d42 <_dtoa_r+0x5d2>
 8004d58:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <_dtoa_r+0x600>)
 8004d5a:	f7fb fc4d 	bl	80005f8 <__aeabi_dmul>
 8004d5e:	e9cd 0100 	strd	r0, r1, [sp]
 8004d62:	e7bc      	b.n	8004cde <_dtoa_r+0x56e>
 8004d64:	08005ed0 	.word	0x08005ed0
 8004d68:	08005ea8 	.word	0x08005ea8
 8004d6c:	3ff00000 	.word	0x3ff00000
 8004d70:	40240000 	.word	0x40240000
 8004d74:	401c0000 	.word	0x401c0000
 8004d78:	40140000 	.word	0x40140000
 8004d7c:	3fe00000 	.word	0x3fe00000
 8004d80:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004d84:	465d      	mov	r5, fp
 8004d86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	4639      	mov	r1, r7
 8004d8e:	f7fb fd5d 	bl	800084c <__aeabi_ddiv>
 8004d92:	f7fb fee1 	bl	8000b58 <__aeabi_d2iz>
 8004d96:	4680      	mov	r8, r0
 8004d98:	f7fb fbc4 	bl	8000524 <__aeabi_i2d>
 8004d9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004da0:	f7fb fc2a 	bl	80005f8 <__aeabi_dmul>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4630      	mov	r0, r6
 8004daa:	4639      	mov	r1, r7
 8004dac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004db0:	f7fb fa6a 	bl	8000288 <__aeabi_dsub>
 8004db4:	f805 6b01 	strb.w	r6, [r5], #1
 8004db8:	eba5 060b 	sub.w	r6, r5, fp
 8004dbc:	45b1      	cmp	r9, r6
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	d139      	bne.n	8004e38 <_dtoa_r+0x6c8>
 8004dc4:	f7fb fa62 	bl	800028c <__adddf3>
 8004dc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004dcc:	4606      	mov	r6, r0
 8004dce:	460f      	mov	r7, r1
 8004dd0:	f7fb fea2 	bl	8000b18 <__aeabi_dcmpgt>
 8004dd4:	b9c8      	cbnz	r0, 8004e0a <_dtoa_r+0x69a>
 8004dd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004dda:	4630      	mov	r0, r6
 8004ddc:	4639      	mov	r1, r7
 8004dde:	f7fb fe73 	bl	8000ac8 <__aeabi_dcmpeq>
 8004de2:	b110      	cbz	r0, 8004dea <_dtoa_r+0x67a>
 8004de4:	f018 0f01 	tst.w	r8, #1
 8004de8:	d10f      	bne.n	8004e0a <_dtoa_r+0x69a>
 8004dea:	9904      	ldr	r1, [sp, #16]
 8004dec:	4620      	mov	r0, r4
 8004dee:	f000 facc 	bl	800538a <_Bfree>
 8004df2:	2300      	movs	r3, #0
 8004df4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004df6:	702b      	strb	r3, [r5, #0]
 8004df8:	f10a 0301 	add.w	r3, sl, #1
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 8241 	beq.w	8005288 <_dtoa_r+0xb18>
 8004e06:	601d      	str	r5, [r3, #0]
 8004e08:	e23e      	b.n	8005288 <_dtoa_r+0xb18>
 8004e0a:	f8cd a020 	str.w	sl, [sp, #32]
 8004e0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004e12:	2a39      	cmp	r2, #57	; 0x39
 8004e14:	f105 33ff 	add.w	r3, r5, #4294967295
 8004e18:	d108      	bne.n	8004e2c <_dtoa_r+0x6bc>
 8004e1a:	459b      	cmp	fp, r3
 8004e1c:	d10a      	bne.n	8004e34 <_dtoa_r+0x6c4>
 8004e1e:	9b08      	ldr	r3, [sp, #32]
 8004e20:	3301      	adds	r3, #1
 8004e22:	9308      	str	r3, [sp, #32]
 8004e24:	2330      	movs	r3, #48	; 0x30
 8004e26:	f88b 3000 	strb.w	r3, [fp]
 8004e2a:	465b      	mov	r3, fp
 8004e2c:	781a      	ldrb	r2, [r3, #0]
 8004e2e:	3201      	adds	r2, #1
 8004e30:	701a      	strb	r2, [r3, #0]
 8004e32:	e78c      	b.n	8004d4e <_dtoa_r+0x5de>
 8004e34:	461d      	mov	r5, r3
 8004e36:	e7ea      	b.n	8004e0e <_dtoa_r+0x69e>
 8004e38:	2200      	movs	r2, #0
 8004e3a:	4b9b      	ldr	r3, [pc, #620]	; (80050a8 <_dtoa_r+0x938>)
 8004e3c:	f7fb fbdc 	bl	80005f8 <__aeabi_dmul>
 8004e40:	2200      	movs	r2, #0
 8004e42:	2300      	movs	r3, #0
 8004e44:	4606      	mov	r6, r0
 8004e46:	460f      	mov	r7, r1
 8004e48:	f7fb fe3e 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	d09a      	beq.n	8004d86 <_dtoa_r+0x616>
 8004e50:	e7cb      	b.n	8004dea <_dtoa_r+0x67a>
 8004e52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e54:	2a00      	cmp	r2, #0
 8004e56:	f000 808b 	beq.w	8004f70 <_dtoa_r+0x800>
 8004e5a:	9a06      	ldr	r2, [sp, #24]
 8004e5c:	2a01      	cmp	r2, #1
 8004e5e:	dc6e      	bgt.n	8004f3e <_dtoa_r+0x7ce>
 8004e60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004e62:	2a00      	cmp	r2, #0
 8004e64:	d067      	beq.n	8004f36 <_dtoa_r+0x7c6>
 8004e66:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004e6a:	9f07      	ldr	r7, [sp, #28]
 8004e6c:	9d05      	ldr	r5, [sp, #20]
 8004e6e:	9a05      	ldr	r2, [sp, #20]
 8004e70:	2101      	movs	r1, #1
 8004e72:	441a      	add	r2, r3
 8004e74:	4620      	mov	r0, r4
 8004e76:	9205      	str	r2, [sp, #20]
 8004e78:	4498      	add	r8, r3
 8004e7a:	f000 fb26 	bl	80054ca <__i2b>
 8004e7e:	4606      	mov	r6, r0
 8004e80:	2d00      	cmp	r5, #0
 8004e82:	dd0c      	ble.n	8004e9e <_dtoa_r+0x72e>
 8004e84:	f1b8 0f00 	cmp.w	r8, #0
 8004e88:	dd09      	ble.n	8004e9e <_dtoa_r+0x72e>
 8004e8a:	4545      	cmp	r5, r8
 8004e8c:	9a05      	ldr	r2, [sp, #20]
 8004e8e:	462b      	mov	r3, r5
 8004e90:	bfa8      	it	ge
 8004e92:	4643      	movge	r3, r8
 8004e94:	1ad2      	subs	r2, r2, r3
 8004e96:	9205      	str	r2, [sp, #20]
 8004e98:	1aed      	subs	r5, r5, r3
 8004e9a:	eba8 0803 	sub.w	r8, r8, r3
 8004e9e:	9b07      	ldr	r3, [sp, #28]
 8004ea0:	b1eb      	cbz	r3, 8004ede <_dtoa_r+0x76e>
 8004ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d067      	beq.n	8004f78 <_dtoa_r+0x808>
 8004ea8:	b18f      	cbz	r7, 8004ece <_dtoa_r+0x75e>
 8004eaa:	4631      	mov	r1, r6
 8004eac:	463a      	mov	r2, r7
 8004eae:	4620      	mov	r0, r4
 8004eb0:	f000 fbaa 	bl	8005608 <__pow5mult>
 8004eb4:	9a04      	ldr	r2, [sp, #16]
 8004eb6:	4601      	mov	r1, r0
 8004eb8:	4606      	mov	r6, r0
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f000 fb0e 	bl	80054dc <__multiply>
 8004ec0:	9904      	ldr	r1, [sp, #16]
 8004ec2:	9008      	str	r0, [sp, #32]
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f000 fa60 	bl	800538a <_Bfree>
 8004eca:	9b08      	ldr	r3, [sp, #32]
 8004ecc:	9304      	str	r3, [sp, #16]
 8004ece:	9b07      	ldr	r3, [sp, #28]
 8004ed0:	1bda      	subs	r2, r3, r7
 8004ed2:	d004      	beq.n	8004ede <_dtoa_r+0x76e>
 8004ed4:	9904      	ldr	r1, [sp, #16]
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	f000 fb96 	bl	8005608 <__pow5mult>
 8004edc:	9004      	str	r0, [sp, #16]
 8004ede:	2101      	movs	r1, #1
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	f000 faf2 	bl	80054ca <__i2b>
 8004ee6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ee8:	4607      	mov	r7, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 81d0 	beq.w	8005290 <_dtoa_r+0xb20>
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	4601      	mov	r1, r0
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	f000 fb87 	bl	8005608 <__pow5mult>
 8004efa:	9b06      	ldr	r3, [sp, #24]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	4607      	mov	r7, r0
 8004f00:	dc40      	bgt.n	8004f84 <_dtoa_r+0x814>
 8004f02:	9b00      	ldr	r3, [sp, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d139      	bne.n	8004f7c <_dtoa_r+0x80c>
 8004f08:	9b01      	ldr	r3, [sp, #4]
 8004f0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d136      	bne.n	8004f80 <_dtoa_r+0x810>
 8004f12:	9b01      	ldr	r3, [sp, #4]
 8004f14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f18:	0d1b      	lsrs	r3, r3, #20
 8004f1a:	051b      	lsls	r3, r3, #20
 8004f1c:	b12b      	cbz	r3, 8004f2a <_dtoa_r+0x7ba>
 8004f1e:	9b05      	ldr	r3, [sp, #20]
 8004f20:	3301      	adds	r3, #1
 8004f22:	9305      	str	r3, [sp, #20]
 8004f24:	f108 0801 	add.w	r8, r8, #1
 8004f28:	2301      	movs	r3, #1
 8004f2a:	9307      	str	r3, [sp, #28]
 8004f2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d12a      	bne.n	8004f88 <_dtoa_r+0x818>
 8004f32:	2001      	movs	r0, #1
 8004f34:	e030      	b.n	8004f98 <_dtoa_r+0x828>
 8004f36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004f38:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004f3c:	e795      	b.n	8004e6a <_dtoa_r+0x6fa>
 8004f3e:	9b07      	ldr	r3, [sp, #28]
 8004f40:	f109 37ff 	add.w	r7, r9, #4294967295
 8004f44:	42bb      	cmp	r3, r7
 8004f46:	bfbf      	itttt	lt
 8004f48:	9b07      	ldrlt	r3, [sp, #28]
 8004f4a:	9707      	strlt	r7, [sp, #28]
 8004f4c:	1afa      	sublt	r2, r7, r3
 8004f4e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004f50:	bfbb      	ittet	lt
 8004f52:	189b      	addlt	r3, r3, r2
 8004f54:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004f56:	1bdf      	subge	r7, r3, r7
 8004f58:	2700      	movlt	r7, #0
 8004f5a:	f1b9 0f00 	cmp.w	r9, #0
 8004f5e:	bfb5      	itete	lt
 8004f60:	9b05      	ldrlt	r3, [sp, #20]
 8004f62:	9d05      	ldrge	r5, [sp, #20]
 8004f64:	eba3 0509 	sublt.w	r5, r3, r9
 8004f68:	464b      	movge	r3, r9
 8004f6a:	bfb8      	it	lt
 8004f6c:	2300      	movlt	r3, #0
 8004f6e:	e77e      	b.n	8004e6e <_dtoa_r+0x6fe>
 8004f70:	9f07      	ldr	r7, [sp, #28]
 8004f72:	9d05      	ldr	r5, [sp, #20]
 8004f74:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004f76:	e783      	b.n	8004e80 <_dtoa_r+0x710>
 8004f78:	9a07      	ldr	r2, [sp, #28]
 8004f7a:	e7ab      	b.n	8004ed4 <_dtoa_r+0x764>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	e7d4      	b.n	8004f2a <_dtoa_r+0x7ba>
 8004f80:	9b00      	ldr	r3, [sp, #0]
 8004f82:	e7d2      	b.n	8004f2a <_dtoa_r+0x7ba>
 8004f84:	2300      	movs	r3, #0
 8004f86:	9307      	str	r3, [sp, #28]
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8004f8e:	6918      	ldr	r0, [r3, #16]
 8004f90:	f000 fa4d 	bl	800542e <__hi0bits>
 8004f94:	f1c0 0020 	rsb	r0, r0, #32
 8004f98:	4440      	add	r0, r8
 8004f9a:	f010 001f 	ands.w	r0, r0, #31
 8004f9e:	d047      	beq.n	8005030 <_dtoa_r+0x8c0>
 8004fa0:	f1c0 0320 	rsb	r3, r0, #32
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	dd3b      	ble.n	8005020 <_dtoa_r+0x8b0>
 8004fa8:	9b05      	ldr	r3, [sp, #20]
 8004faa:	f1c0 001c 	rsb	r0, r0, #28
 8004fae:	4403      	add	r3, r0
 8004fb0:	9305      	str	r3, [sp, #20]
 8004fb2:	4405      	add	r5, r0
 8004fb4:	4480      	add	r8, r0
 8004fb6:	9b05      	ldr	r3, [sp, #20]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	dd05      	ble.n	8004fc8 <_dtoa_r+0x858>
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	9904      	ldr	r1, [sp, #16]
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f000 fb6f 	bl	80056a4 <__lshift>
 8004fc6:	9004      	str	r0, [sp, #16]
 8004fc8:	f1b8 0f00 	cmp.w	r8, #0
 8004fcc:	dd05      	ble.n	8004fda <_dtoa_r+0x86a>
 8004fce:	4639      	mov	r1, r7
 8004fd0:	4642      	mov	r2, r8
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	f000 fb66 	bl	80056a4 <__lshift>
 8004fd8:	4607      	mov	r7, r0
 8004fda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fdc:	b353      	cbz	r3, 8005034 <_dtoa_r+0x8c4>
 8004fde:	4639      	mov	r1, r7
 8004fe0:	9804      	ldr	r0, [sp, #16]
 8004fe2:	f000 fbb3 	bl	800574c <__mcmp>
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	da24      	bge.n	8005034 <_dtoa_r+0x8c4>
 8004fea:	2300      	movs	r3, #0
 8004fec:	220a      	movs	r2, #10
 8004fee:	9904      	ldr	r1, [sp, #16]
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	f000 f9e1 	bl	80053b8 <__multadd>
 8004ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ff8:	9004      	str	r0, [sp, #16]
 8004ffa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 814d 	beq.w	800529e <_dtoa_r+0xb2e>
 8005004:	2300      	movs	r3, #0
 8005006:	4631      	mov	r1, r6
 8005008:	220a      	movs	r2, #10
 800500a:	4620      	mov	r0, r4
 800500c:	f000 f9d4 	bl	80053b8 <__multadd>
 8005010:	9b02      	ldr	r3, [sp, #8]
 8005012:	2b00      	cmp	r3, #0
 8005014:	4606      	mov	r6, r0
 8005016:	dc4f      	bgt.n	80050b8 <_dtoa_r+0x948>
 8005018:	9b06      	ldr	r3, [sp, #24]
 800501a:	2b02      	cmp	r3, #2
 800501c:	dd4c      	ble.n	80050b8 <_dtoa_r+0x948>
 800501e:	e011      	b.n	8005044 <_dtoa_r+0x8d4>
 8005020:	d0c9      	beq.n	8004fb6 <_dtoa_r+0x846>
 8005022:	9a05      	ldr	r2, [sp, #20]
 8005024:	331c      	adds	r3, #28
 8005026:	441a      	add	r2, r3
 8005028:	9205      	str	r2, [sp, #20]
 800502a:	441d      	add	r5, r3
 800502c:	4498      	add	r8, r3
 800502e:	e7c2      	b.n	8004fb6 <_dtoa_r+0x846>
 8005030:	4603      	mov	r3, r0
 8005032:	e7f6      	b.n	8005022 <_dtoa_r+0x8b2>
 8005034:	f1b9 0f00 	cmp.w	r9, #0
 8005038:	dc38      	bgt.n	80050ac <_dtoa_r+0x93c>
 800503a:	9b06      	ldr	r3, [sp, #24]
 800503c:	2b02      	cmp	r3, #2
 800503e:	dd35      	ble.n	80050ac <_dtoa_r+0x93c>
 8005040:	f8cd 9008 	str.w	r9, [sp, #8]
 8005044:	9b02      	ldr	r3, [sp, #8]
 8005046:	b963      	cbnz	r3, 8005062 <_dtoa_r+0x8f2>
 8005048:	4639      	mov	r1, r7
 800504a:	2205      	movs	r2, #5
 800504c:	4620      	mov	r0, r4
 800504e:	f000 f9b3 	bl	80053b8 <__multadd>
 8005052:	4601      	mov	r1, r0
 8005054:	4607      	mov	r7, r0
 8005056:	9804      	ldr	r0, [sp, #16]
 8005058:	f000 fb78 	bl	800574c <__mcmp>
 800505c:	2800      	cmp	r0, #0
 800505e:	f73f adcc 	bgt.w	8004bfa <_dtoa_r+0x48a>
 8005062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005064:	465d      	mov	r5, fp
 8005066:	ea6f 0a03 	mvn.w	sl, r3
 800506a:	f04f 0900 	mov.w	r9, #0
 800506e:	4639      	mov	r1, r7
 8005070:	4620      	mov	r0, r4
 8005072:	f000 f98a 	bl	800538a <_Bfree>
 8005076:	2e00      	cmp	r6, #0
 8005078:	f43f aeb7 	beq.w	8004dea <_dtoa_r+0x67a>
 800507c:	f1b9 0f00 	cmp.w	r9, #0
 8005080:	d005      	beq.n	800508e <_dtoa_r+0x91e>
 8005082:	45b1      	cmp	r9, r6
 8005084:	d003      	beq.n	800508e <_dtoa_r+0x91e>
 8005086:	4649      	mov	r1, r9
 8005088:	4620      	mov	r0, r4
 800508a:	f000 f97e 	bl	800538a <_Bfree>
 800508e:	4631      	mov	r1, r6
 8005090:	4620      	mov	r0, r4
 8005092:	f000 f97a 	bl	800538a <_Bfree>
 8005096:	e6a8      	b.n	8004dea <_dtoa_r+0x67a>
 8005098:	2700      	movs	r7, #0
 800509a:	463e      	mov	r6, r7
 800509c:	e7e1      	b.n	8005062 <_dtoa_r+0x8f2>
 800509e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80050a2:	463e      	mov	r6, r7
 80050a4:	e5a9      	b.n	8004bfa <_dtoa_r+0x48a>
 80050a6:	bf00      	nop
 80050a8:	40240000 	.word	0x40240000
 80050ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 80fa 	beq.w	80052ac <_dtoa_r+0xb3c>
 80050b8:	2d00      	cmp	r5, #0
 80050ba:	dd05      	ble.n	80050c8 <_dtoa_r+0x958>
 80050bc:	4631      	mov	r1, r6
 80050be:	462a      	mov	r2, r5
 80050c0:	4620      	mov	r0, r4
 80050c2:	f000 faef 	bl	80056a4 <__lshift>
 80050c6:	4606      	mov	r6, r0
 80050c8:	9b07      	ldr	r3, [sp, #28]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d04c      	beq.n	8005168 <_dtoa_r+0x9f8>
 80050ce:	6871      	ldr	r1, [r6, #4]
 80050d0:	4620      	mov	r0, r4
 80050d2:	f000 f926 	bl	8005322 <_Balloc>
 80050d6:	6932      	ldr	r2, [r6, #16]
 80050d8:	3202      	adds	r2, #2
 80050da:	4605      	mov	r5, r0
 80050dc:	0092      	lsls	r2, r2, #2
 80050de:	f106 010c 	add.w	r1, r6, #12
 80050e2:	300c      	adds	r0, #12
 80050e4:	f000 f912 	bl	800530c <memcpy>
 80050e8:	2201      	movs	r2, #1
 80050ea:	4629      	mov	r1, r5
 80050ec:	4620      	mov	r0, r4
 80050ee:	f000 fad9 	bl	80056a4 <__lshift>
 80050f2:	9b00      	ldr	r3, [sp, #0]
 80050f4:	f8cd b014 	str.w	fp, [sp, #20]
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	46b1      	mov	r9, r6
 80050fe:	9307      	str	r3, [sp, #28]
 8005100:	4606      	mov	r6, r0
 8005102:	4639      	mov	r1, r7
 8005104:	9804      	ldr	r0, [sp, #16]
 8005106:	f7ff faa7 	bl	8004658 <quorem>
 800510a:	4649      	mov	r1, r9
 800510c:	4605      	mov	r5, r0
 800510e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005112:	9804      	ldr	r0, [sp, #16]
 8005114:	f000 fb1a 	bl	800574c <__mcmp>
 8005118:	4632      	mov	r2, r6
 800511a:	9000      	str	r0, [sp, #0]
 800511c:	4639      	mov	r1, r7
 800511e:	4620      	mov	r0, r4
 8005120:	f000 fb2e 	bl	8005780 <__mdiff>
 8005124:	68c3      	ldr	r3, [r0, #12]
 8005126:	4602      	mov	r2, r0
 8005128:	bb03      	cbnz	r3, 800516c <_dtoa_r+0x9fc>
 800512a:	4601      	mov	r1, r0
 800512c:	9008      	str	r0, [sp, #32]
 800512e:	9804      	ldr	r0, [sp, #16]
 8005130:	f000 fb0c 	bl	800574c <__mcmp>
 8005134:	9a08      	ldr	r2, [sp, #32]
 8005136:	4603      	mov	r3, r0
 8005138:	4611      	mov	r1, r2
 800513a:	4620      	mov	r0, r4
 800513c:	9308      	str	r3, [sp, #32]
 800513e:	f000 f924 	bl	800538a <_Bfree>
 8005142:	9b08      	ldr	r3, [sp, #32]
 8005144:	b9a3      	cbnz	r3, 8005170 <_dtoa_r+0xa00>
 8005146:	9a06      	ldr	r2, [sp, #24]
 8005148:	b992      	cbnz	r2, 8005170 <_dtoa_r+0xa00>
 800514a:	9a07      	ldr	r2, [sp, #28]
 800514c:	b982      	cbnz	r2, 8005170 <_dtoa_r+0xa00>
 800514e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005152:	d029      	beq.n	80051a8 <_dtoa_r+0xa38>
 8005154:	9b00      	ldr	r3, [sp, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	dd01      	ble.n	800515e <_dtoa_r+0x9ee>
 800515a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800515e:	9b05      	ldr	r3, [sp, #20]
 8005160:	1c5d      	adds	r5, r3, #1
 8005162:	f883 8000 	strb.w	r8, [r3]
 8005166:	e782      	b.n	800506e <_dtoa_r+0x8fe>
 8005168:	4630      	mov	r0, r6
 800516a:	e7c2      	b.n	80050f2 <_dtoa_r+0x982>
 800516c:	2301      	movs	r3, #1
 800516e:	e7e3      	b.n	8005138 <_dtoa_r+0x9c8>
 8005170:	9a00      	ldr	r2, [sp, #0]
 8005172:	2a00      	cmp	r2, #0
 8005174:	db04      	blt.n	8005180 <_dtoa_r+0xa10>
 8005176:	d125      	bne.n	80051c4 <_dtoa_r+0xa54>
 8005178:	9a06      	ldr	r2, [sp, #24]
 800517a:	bb1a      	cbnz	r2, 80051c4 <_dtoa_r+0xa54>
 800517c:	9a07      	ldr	r2, [sp, #28]
 800517e:	bb0a      	cbnz	r2, 80051c4 <_dtoa_r+0xa54>
 8005180:	2b00      	cmp	r3, #0
 8005182:	ddec      	ble.n	800515e <_dtoa_r+0x9ee>
 8005184:	2201      	movs	r2, #1
 8005186:	9904      	ldr	r1, [sp, #16]
 8005188:	4620      	mov	r0, r4
 800518a:	f000 fa8b 	bl	80056a4 <__lshift>
 800518e:	4639      	mov	r1, r7
 8005190:	9004      	str	r0, [sp, #16]
 8005192:	f000 fadb 	bl	800574c <__mcmp>
 8005196:	2800      	cmp	r0, #0
 8005198:	dc03      	bgt.n	80051a2 <_dtoa_r+0xa32>
 800519a:	d1e0      	bne.n	800515e <_dtoa_r+0x9ee>
 800519c:	f018 0f01 	tst.w	r8, #1
 80051a0:	d0dd      	beq.n	800515e <_dtoa_r+0x9ee>
 80051a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80051a6:	d1d8      	bne.n	800515a <_dtoa_r+0x9ea>
 80051a8:	9b05      	ldr	r3, [sp, #20]
 80051aa:	9a05      	ldr	r2, [sp, #20]
 80051ac:	1c5d      	adds	r5, r3, #1
 80051ae:	2339      	movs	r3, #57	; 0x39
 80051b0:	7013      	strb	r3, [r2, #0]
 80051b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80051b6:	2b39      	cmp	r3, #57	; 0x39
 80051b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80051bc:	d04f      	beq.n	800525e <_dtoa_r+0xaee>
 80051be:	3301      	adds	r3, #1
 80051c0:	7013      	strb	r3, [r2, #0]
 80051c2:	e754      	b.n	800506e <_dtoa_r+0x8fe>
 80051c4:	9a05      	ldr	r2, [sp, #20]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f102 0501 	add.w	r5, r2, #1
 80051cc:	dd06      	ble.n	80051dc <_dtoa_r+0xa6c>
 80051ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80051d2:	d0e9      	beq.n	80051a8 <_dtoa_r+0xa38>
 80051d4:	f108 0801 	add.w	r8, r8, #1
 80051d8:	9b05      	ldr	r3, [sp, #20]
 80051da:	e7c2      	b.n	8005162 <_dtoa_r+0x9f2>
 80051dc:	9a02      	ldr	r2, [sp, #8]
 80051de:	f805 8c01 	strb.w	r8, [r5, #-1]
 80051e2:	eba5 030b 	sub.w	r3, r5, fp
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d021      	beq.n	800522e <_dtoa_r+0xabe>
 80051ea:	2300      	movs	r3, #0
 80051ec:	220a      	movs	r2, #10
 80051ee:	9904      	ldr	r1, [sp, #16]
 80051f0:	4620      	mov	r0, r4
 80051f2:	f000 f8e1 	bl	80053b8 <__multadd>
 80051f6:	45b1      	cmp	r9, r6
 80051f8:	9004      	str	r0, [sp, #16]
 80051fa:	f04f 0300 	mov.w	r3, #0
 80051fe:	f04f 020a 	mov.w	r2, #10
 8005202:	4649      	mov	r1, r9
 8005204:	4620      	mov	r0, r4
 8005206:	d105      	bne.n	8005214 <_dtoa_r+0xaa4>
 8005208:	f000 f8d6 	bl	80053b8 <__multadd>
 800520c:	4681      	mov	r9, r0
 800520e:	4606      	mov	r6, r0
 8005210:	9505      	str	r5, [sp, #20]
 8005212:	e776      	b.n	8005102 <_dtoa_r+0x992>
 8005214:	f000 f8d0 	bl	80053b8 <__multadd>
 8005218:	4631      	mov	r1, r6
 800521a:	4681      	mov	r9, r0
 800521c:	2300      	movs	r3, #0
 800521e:	220a      	movs	r2, #10
 8005220:	4620      	mov	r0, r4
 8005222:	f000 f8c9 	bl	80053b8 <__multadd>
 8005226:	4606      	mov	r6, r0
 8005228:	e7f2      	b.n	8005210 <_dtoa_r+0xaa0>
 800522a:	f04f 0900 	mov.w	r9, #0
 800522e:	2201      	movs	r2, #1
 8005230:	9904      	ldr	r1, [sp, #16]
 8005232:	4620      	mov	r0, r4
 8005234:	f000 fa36 	bl	80056a4 <__lshift>
 8005238:	4639      	mov	r1, r7
 800523a:	9004      	str	r0, [sp, #16]
 800523c:	f000 fa86 	bl	800574c <__mcmp>
 8005240:	2800      	cmp	r0, #0
 8005242:	dcb6      	bgt.n	80051b2 <_dtoa_r+0xa42>
 8005244:	d102      	bne.n	800524c <_dtoa_r+0xadc>
 8005246:	f018 0f01 	tst.w	r8, #1
 800524a:	d1b2      	bne.n	80051b2 <_dtoa_r+0xa42>
 800524c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005250:	2b30      	cmp	r3, #48	; 0x30
 8005252:	f105 32ff 	add.w	r2, r5, #4294967295
 8005256:	f47f af0a 	bne.w	800506e <_dtoa_r+0x8fe>
 800525a:	4615      	mov	r5, r2
 800525c:	e7f6      	b.n	800524c <_dtoa_r+0xadc>
 800525e:	4593      	cmp	fp, r2
 8005260:	d105      	bne.n	800526e <_dtoa_r+0xafe>
 8005262:	2331      	movs	r3, #49	; 0x31
 8005264:	f10a 0a01 	add.w	sl, sl, #1
 8005268:	f88b 3000 	strb.w	r3, [fp]
 800526c:	e6ff      	b.n	800506e <_dtoa_r+0x8fe>
 800526e:	4615      	mov	r5, r2
 8005270:	e79f      	b.n	80051b2 <_dtoa_r+0xa42>
 8005272:	f8df b064 	ldr.w	fp, [pc, #100]	; 80052d8 <_dtoa_r+0xb68>
 8005276:	e007      	b.n	8005288 <_dtoa_r+0xb18>
 8005278:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800527a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80052dc <_dtoa_r+0xb6c>
 800527e:	b11b      	cbz	r3, 8005288 <_dtoa_r+0xb18>
 8005280:	f10b 0308 	add.w	r3, fp, #8
 8005284:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005286:	6013      	str	r3, [r2, #0]
 8005288:	4658      	mov	r0, fp
 800528a:	b017      	add	sp, #92	; 0x5c
 800528c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005290:	9b06      	ldr	r3, [sp, #24]
 8005292:	2b01      	cmp	r3, #1
 8005294:	f77f ae35 	ble.w	8004f02 <_dtoa_r+0x792>
 8005298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800529a:	9307      	str	r3, [sp, #28]
 800529c:	e649      	b.n	8004f32 <_dtoa_r+0x7c2>
 800529e:	9b02      	ldr	r3, [sp, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	dc03      	bgt.n	80052ac <_dtoa_r+0xb3c>
 80052a4:	9b06      	ldr	r3, [sp, #24]
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	f73f aecc 	bgt.w	8005044 <_dtoa_r+0x8d4>
 80052ac:	465d      	mov	r5, fp
 80052ae:	4639      	mov	r1, r7
 80052b0:	9804      	ldr	r0, [sp, #16]
 80052b2:	f7ff f9d1 	bl	8004658 <quorem>
 80052b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80052ba:	f805 8b01 	strb.w	r8, [r5], #1
 80052be:	9a02      	ldr	r2, [sp, #8]
 80052c0:	eba5 030b 	sub.w	r3, r5, fp
 80052c4:	429a      	cmp	r2, r3
 80052c6:	ddb0      	ble.n	800522a <_dtoa_r+0xaba>
 80052c8:	2300      	movs	r3, #0
 80052ca:	220a      	movs	r2, #10
 80052cc:	9904      	ldr	r1, [sp, #16]
 80052ce:	4620      	mov	r0, r4
 80052d0:	f000 f872 	bl	80053b8 <__multadd>
 80052d4:	9004      	str	r0, [sp, #16]
 80052d6:	e7ea      	b.n	80052ae <_dtoa_r+0xb3e>
 80052d8:	08005e74 	.word	0x08005e74
 80052dc:	08005e98 	.word	0x08005e98

080052e0 <_localeconv_r>:
 80052e0:	4b04      	ldr	r3, [pc, #16]	; (80052f4 <_localeconv_r+0x14>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6a18      	ldr	r0, [r3, #32]
 80052e6:	4b04      	ldr	r3, [pc, #16]	; (80052f8 <_localeconv_r+0x18>)
 80052e8:	2800      	cmp	r0, #0
 80052ea:	bf08      	it	eq
 80052ec:	4618      	moveq	r0, r3
 80052ee:	30f0      	adds	r0, #240	; 0xf0
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	2000000c 	.word	0x2000000c
 80052f8:	20000070 	.word	0x20000070

080052fc <malloc>:
 80052fc:	4b02      	ldr	r3, [pc, #8]	; (8005308 <malloc+0xc>)
 80052fe:	4601      	mov	r1, r0
 8005300:	6818      	ldr	r0, [r3, #0]
 8005302:	f000 bb45 	b.w	8005990 <_malloc_r>
 8005306:	bf00      	nop
 8005308:	2000000c 	.word	0x2000000c

0800530c <memcpy>:
 800530c:	b510      	push	{r4, lr}
 800530e:	1e43      	subs	r3, r0, #1
 8005310:	440a      	add	r2, r1
 8005312:	4291      	cmp	r1, r2
 8005314:	d100      	bne.n	8005318 <memcpy+0xc>
 8005316:	bd10      	pop	{r4, pc}
 8005318:	f811 4b01 	ldrb.w	r4, [r1], #1
 800531c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005320:	e7f7      	b.n	8005312 <memcpy+0x6>

08005322 <_Balloc>:
 8005322:	b570      	push	{r4, r5, r6, lr}
 8005324:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005326:	4604      	mov	r4, r0
 8005328:	460e      	mov	r6, r1
 800532a:	b93d      	cbnz	r5, 800533c <_Balloc+0x1a>
 800532c:	2010      	movs	r0, #16
 800532e:	f7ff ffe5 	bl	80052fc <malloc>
 8005332:	6260      	str	r0, [r4, #36]	; 0x24
 8005334:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005338:	6005      	str	r5, [r0, #0]
 800533a:	60c5      	str	r5, [r0, #12]
 800533c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800533e:	68eb      	ldr	r3, [r5, #12]
 8005340:	b183      	cbz	r3, 8005364 <_Balloc+0x42>
 8005342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800534a:	b9b8      	cbnz	r0, 800537c <_Balloc+0x5a>
 800534c:	2101      	movs	r1, #1
 800534e:	fa01 f506 	lsl.w	r5, r1, r6
 8005352:	1d6a      	adds	r2, r5, #5
 8005354:	0092      	lsls	r2, r2, #2
 8005356:	4620      	mov	r0, r4
 8005358:	f000 fabe 	bl	80058d8 <_calloc_r>
 800535c:	b160      	cbz	r0, 8005378 <_Balloc+0x56>
 800535e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005362:	e00e      	b.n	8005382 <_Balloc+0x60>
 8005364:	2221      	movs	r2, #33	; 0x21
 8005366:	2104      	movs	r1, #4
 8005368:	4620      	mov	r0, r4
 800536a:	f000 fab5 	bl	80058d8 <_calloc_r>
 800536e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005370:	60e8      	str	r0, [r5, #12]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1e4      	bne.n	8005342 <_Balloc+0x20>
 8005378:	2000      	movs	r0, #0
 800537a:	bd70      	pop	{r4, r5, r6, pc}
 800537c:	6802      	ldr	r2, [r0, #0]
 800537e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005382:	2300      	movs	r3, #0
 8005384:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005388:	e7f7      	b.n	800537a <_Balloc+0x58>

0800538a <_Bfree>:
 800538a:	b570      	push	{r4, r5, r6, lr}
 800538c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800538e:	4606      	mov	r6, r0
 8005390:	460d      	mov	r5, r1
 8005392:	b93c      	cbnz	r4, 80053a4 <_Bfree+0x1a>
 8005394:	2010      	movs	r0, #16
 8005396:	f7ff ffb1 	bl	80052fc <malloc>
 800539a:	6270      	str	r0, [r6, #36]	; 0x24
 800539c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80053a0:	6004      	str	r4, [r0, #0]
 80053a2:	60c4      	str	r4, [r0, #12]
 80053a4:	b13d      	cbz	r5, 80053b6 <_Bfree+0x2c>
 80053a6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80053a8:	686a      	ldr	r2, [r5, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053b0:	6029      	str	r1, [r5, #0]
 80053b2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80053b6:	bd70      	pop	{r4, r5, r6, pc}

080053b8 <__multadd>:
 80053b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053bc:	690d      	ldr	r5, [r1, #16]
 80053be:	461f      	mov	r7, r3
 80053c0:	4606      	mov	r6, r0
 80053c2:	460c      	mov	r4, r1
 80053c4:	f101 0c14 	add.w	ip, r1, #20
 80053c8:	2300      	movs	r3, #0
 80053ca:	f8dc 0000 	ldr.w	r0, [ip]
 80053ce:	b281      	uxth	r1, r0
 80053d0:	fb02 7101 	mla	r1, r2, r1, r7
 80053d4:	0c0f      	lsrs	r7, r1, #16
 80053d6:	0c00      	lsrs	r0, r0, #16
 80053d8:	fb02 7000 	mla	r0, r2, r0, r7
 80053dc:	b289      	uxth	r1, r1
 80053de:	3301      	adds	r3, #1
 80053e0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80053e4:	429d      	cmp	r5, r3
 80053e6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80053ea:	f84c 1b04 	str.w	r1, [ip], #4
 80053ee:	dcec      	bgt.n	80053ca <__multadd+0x12>
 80053f0:	b1d7      	cbz	r7, 8005428 <__multadd+0x70>
 80053f2:	68a3      	ldr	r3, [r4, #8]
 80053f4:	42ab      	cmp	r3, r5
 80053f6:	dc12      	bgt.n	800541e <__multadd+0x66>
 80053f8:	6861      	ldr	r1, [r4, #4]
 80053fa:	4630      	mov	r0, r6
 80053fc:	3101      	adds	r1, #1
 80053fe:	f7ff ff90 	bl	8005322 <_Balloc>
 8005402:	6922      	ldr	r2, [r4, #16]
 8005404:	3202      	adds	r2, #2
 8005406:	f104 010c 	add.w	r1, r4, #12
 800540a:	4680      	mov	r8, r0
 800540c:	0092      	lsls	r2, r2, #2
 800540e:	300c      	adds	r0, #12
 8005410:	f7ff ff7c 	bl	800530c <memcpy>
 8005414:	4621      	mov	r1, r4
 8005416:	4630      	mov	r0, r6
 8005418:	f7ff ffb7 	bl	800538a <_Bfree>
 800541c:	4644      	mov	r4, r8
 800541e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005422:	3501      	adds	r5, #1
 8005424:	615f      	str	r7, [r3, #20]
 8005426:	6125      	str	r5, [r4, #16]
 8005428:	4620      	mov	r0, r4
 800542a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800542e <__hi0bits>:
 800542e:	0c02      	lsrs	r2, r0, #16
 8005430:	0412      	lsls	r2, r2, #16
 8005432:	4603      	mov	r3, r0
 8005434:	b9b2      	cbnz	r2, 8005464 <__hi0bits+0x36>
 8005436:	0403      	lsls	r3, r0, #16
 8005438:	2010      	movs	r0, #16
 800543a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800543e:	bf04      	itt	eq
 8005440:	021b      	lsleq	r3, r3, #8
 8005442:	3008      	addeq	r0, #8
 8005444:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005448:	bf04      	itt	eq
 800544a:	011b      	lsleq	r3, r3, #4
 800544c:	3004      	addeq	r0, #4
 800544e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005452:	bf04      	itt	eq
 8005454:	009b      	lsleq	r3, r3, #2
 8005456:	3002      	addeq	r0, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	db06      	blt.n	800546a <__hi0bits+0x3c>
 800545c:	005b      	lsls	r3, r3, #1
 800545e:	d503      	bpl.n	8005468 <__hi0bits+0x3a>
 8005460:	3001      	adds	r0, #1
 8005462:	4770      	bx	lr
 8005464:	2000      	movs	r0, #0
 8005466:	e7e8      	b.n	800543a <__hi0bits+0xc>
 8005468:	2020      	movs	r0, #32
 800546a:	4770      	bx	lr

0800546c <__lo0bits>:
 800546c:	6803      	ldr	r3, [r0, #0]
 800546e:	f013 0207 	ands.w	r2, r3, #7
 8005472:	4601      	mov	r1, r0
 8005474:	d00b      	beq.n	800548e <__lo0bits+0x22>
 8005476:	07da      	lsls	r2, r3, #31
 8005478:	d423      	bmi.n	80054c2 <__lo0bits+0x56>
 800547a:	0798      	lsls	r0, r3, #30
 800547c:	bf49      	itett	mi
 800547e:	085b      	lsrmi	r3, r3, #1
 8005480:	089b      	lsrpl	r3, r3, #2
 8005482:	2001      	movmi	r0, #1
 8005484:	600b      	strmi	r3, [r1, #0]
 8005486:	bf5c      	itt	pl
 8005488:	600b      	strpl	r3, [r1, #0]
 800548a:	2002      	movpl	r0, #2
 800548c:	4770      	bx	lr
 800548e:	b298      	uxth	r0, r3
 8005490:	b9a8      	cbnz	r0, 80054be <__lo0bits+0x52>
 8005492:	0c1b      	lsrs	r3, r3, #16
 8005494:	2010      	movs	r0, #16
 8005496:	f013 0fff 	tst.w	r3, #255	; 0xff
 800549a:	bf04      	itt	eq
 800549c:	0a1b      	lsreq	r3, r3, #8
 800549e:	3008      	addeq	r0, #8
 80054a0:	071a      	lsls	r2, r3, #28
 80054a2:	bf04      	itt	eq
 80054a4:	091b      	lsreq	r3, r3, #4
 80054a6:	3004      	addeq	r0, #4
 80054a8:	079a      	lsls	r2, r3, #30
 80054aa:	bf04      	itt	eq
 80054ac:	089b      	lsreq	r3, r3, #2
 80054ae:	3002      	addeq	r0, #2
 80054b0:	07da      	lsls	r2, r3, #31
 80054b2:	d402      	bmi.n	80054ba <__lo0bits+0x4e>
 80054b4:	085b      	lsrs	r3, r3, #1
 80054b6:	d006      	beq.n	80054c6 <__lo0bits+0x5a>
 80054b8:	3001      	adds	r0, #1
 80054ba:	600b      	str	r3, [r1, #0]
 80054bc:	4770      	bx	lr
 80054be:	4610      	mov	r0, r2
 80054c0:	e7e9      	b.n	8005496 <__lo0bits+0x2a>
 80054c2:	2000      	movs	r0, #0
 80054c4:	4770      	bx	lr
 80054c6:	2020      	movs	r0, #32
 80054c8:	4770      	bx	lr

080054ca <__i2b>:
 80054ca:	b510      	push	{r4, lr}
 80054cc:	460c      	mov	r4, r1
 80054ce:	2101      	movs	r1, #1
 80054d0:	f7ff ff27 	bl	8005322 <_Balloc>
 80054d4:	2201      	movs	r2, #1
 80054d6:	6144      	str	r4, [r0, #20]
 80054d8:	6102      	str	r2, [r0, #16]
 80054da:	bd10      	pop	{r4, pc}

080054dc <__multiply>:
 80054dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e0:	4614      	mov	r4, r2
 80054e2:	690a      	ldr	r2, [r1, #16]
 80054e4:	6923      	ldr	r3, [r4, #16]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	bfb8      	it	lt
 80054ea:	460b      	movlt	r3, r1
 80054ec:	4688      	mov	r8, r1
 80054ee:	bfbc      	itt	lt
 80054f0:	46a0      	movlt	r8, r4
 80054f2:	461c      	movlt	r4, r3
 80054f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80054f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80054fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005500:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005504:	eb07 0609 	add.w	r6, r7, r9
 8005508:	42b3      	cmp	r3, r6
 800550a:	bfb8      	it	lt
 800550c:	3101      	addlt	r1, #1
 800550e:	f7ff ff08 	bl	8005322 <_Balloc>
 8005512:	f100 0514 	add.w	r5, r0, #20
 8005516:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800551a:	462b      	mov	r3, r5
 800551c:	2200      	movs	r2, #0
 800551e:	4573      	cmp	r3, lr
 8005520:	d316      	bcc.n	8005550 <__multiply+0x74>
 8005522:	f104 0214 	add.w	r2, r4, #20
 8005526:	f108 0114 	add.w	r1, r8, #20
 800552a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800552e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	9b00      	ldr	r3, [sp, #0]
 8005536:	9201      	str	r2, [sp, #4]
 8005538:	4293      	cmp	r3, r2
 800553a:	d80c      	bhi.n	8005556 <__multiply+0x7a>
 800553c:	2e00      	cmp	r6, #0
 800553e:	dd03      	ble.n	8005548 <__multiply+0x6c>
 8005540:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005544:	2b00      	cmp	r3, #0
 8005546:	d05d      	beq.n	8005604 <__multiply+0x128>
 8005548:	6106      	str	r6, [r0, #16]
 800554a:	b003      	add	sp, #12
 800554c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005550:	f843 2b04 	str.w	r2, [r3], #4
 8005554:	e7e3      	b.n	800551e <__multiply+0x42>
 8005556:	f8b2 b000 	ldrh.w	fp, [r2]
 800555a:	f1bb 0f00 	cmp.w	fp, #0
 800555e:	d023      	beq.n	80055a8 <__multiply+0xcc>
 8005560:	4689      	mov	r9, r1
 8005562:	46ac      	mov	ip, r5
 8005564:	f04f 0800 	mov.w	r8, #0
 8005568:	f859 4b04 	ldr.w	r4, [r9], #4
 800556c:	f8dc a000 	ldr.w	sl, [ip]
 8005570:	b2a3      	uxth	r3, r4
 8005572:	fa1f fa8a 	uxth.w	sl, sl
 8005576:	fb0b a303 	mla	r3, fp, r3, sl
 800557a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800557e:	f8dc 4000 	ldr.w	r4, [ip]
 8005582:	4443      	add	r3, r8
 8005584:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005588:	fb0b 840a 	mla	r4, fp, sl, r8
 800558c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005590:	46e2      	mov	sl, ip
 8005592:	b29b      	uxth	r3, r3
 8005594:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005598:	454f      	cmp	r7, r9
 800559a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800559e:	f84a 3b04 	str.w	r3, [sl], #4
 80055a2:	d82b      	bhi.n	80055fc <__multiply+0x120>
 80055a4:	f8cc 8004 	str.w	r8, [ip, #4]
 80055a8:	9b01      	ldr	r3, [sp, #4]
 80055aa:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80055ae:	3204      	adds	r2, #4
 80055b0:	f1ba 0f00 	cmp.w	sl, #0
 80055b4:	d020      	beq.n	80055f8 <__multiply+0x11c>
 80055b6:	682b      	ldr	r3, [r5, #0]
 80055b8:	4689      	mov	r9, r1
 80055ba:	46a8      	mov	r8, r5
 80055bc:	f04f 0b00 	mov.w	fp, #0
 80055c0:	f8b9 c000 	ldrh.w	ip, [r9]
 80055c4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80055c8:	fb0a 440c 	mla	r4, sl, ip, r4
 80055cc:	445c      	add	r4, fp
 80055ce:	46c4      	mov	ip, r8
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80055d6:	f84c 3b04 	str.w	r3, [ip], #4
 80055da:	f859 3b04 	ldr.w	r3, [r9], #4
 80055de:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80055e2:	0c1b      	lsrs	r3, r3, #16
 80055e4:	fb0a b303 	mla	r3, sl, r3, fp
 80055e8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80055ec:	454f      	cmp	r7, r9
 80055ee:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80055f2:	d805      	bhi.n	8005600 <__multiply+0x124>
 80055f4:	f8c8 3004 	str.w	r3, [r8, #4]
 80055f8:	3504      	adds	r5, #4
 80055fa:	e79b      	b.n	8005534 <__multiply+0x58>
 80055fc:	46d4      	mov	ip, sl
 80055fe:	e7b3      	b.n	8005568 <__multiply+0x8c>
 8005600:	46e0      	mov	r8, ip
 8005602:	e7dd      	b.n	80055c0 <__multiply+0xe4>
 8005604:	3e01      	subs	r6, #1
 8005606:	e799      	b.n	800553c <__multiply+0x60>

08005608 <__pow5mult>:
 8005608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800560c:	4615      	mov	r5, r2
 800560e:	f012 0203 	ands.w	r2, r2, #3
 8005612:	4606      	mov	r6, r0
 8005614:	460f      	mov	r7, r1
 8005616:	d007      	beq.n	8005628 <__pow5mult+0x20>
 8005618:	3a01      	subs	r2, #1
 800561a:	4c21      	ldr	r4, [pc, #132]	; (80056a0 <__pow5mult+0x98>)
 800561c:	2300      	movs	r3, #0
 800561e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005622:	f7ff fec9 	bl	80053b8 <__multadd>
 8005626:	4607      	mov	r7, r0
 8005628:	10ad      	asrs	r5, r5, #2
 800562a:	d035      	beq.n	8005698 <__pow5mult+0x90>
 800562c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800562e:	b93c      	cbnz	r4, 8005640 <__pow5mult+0x38>
 8005630:	2010      	movs	r0, #16
 8005632:	f7ff fe63 	bl	80052fc <malloc>
 8005636:	6270      	str	r0, [r6, #36]	; 0x24
 8005638:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800563c:	6004      	str	r4, [r0, #0]
 800563e:	60c4      	str	r4, [r0, #12]
 8005640:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005644:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005648:	b94c      	cbnz	r4, 800565e <__pow5mult+0x56>
 800564a:	f240 2171 	movw	r1, #625	; 0x271
 800564e:	4630      	mov	r0, r6
 8005650:	f7ff ff3b 	bl	80054ca <__i2b>
 8005654:	2300      	movs	r3, #0
 8005656:	f8c8 0008 	str.w	r0, [r8, #8]
 800565a:	4604      	mov	r4, r0
 800565c:	6003      	str	r3, [r0, #0]
 800565e:	f04f 0800 	mov.w	r8, #0
 8005662:	07eb      	lsls	r3, r5, #31
 8005664:	d50a      	bpl.n	800567c <__pow5mult+0x74>
 8005666:	4639      	mov	r1, r7
 8005668:	4622      	mov	r2, r4
 800566a:	4630      	mov	r0, r6
 800566c:	f7ff ff36 	bl	80054dc <__multiply>
 8005670:	4639      	mov	r1, r7
 8005672:	4681      	mov	r9, r0
 8005674:	4630      	mov	r0, r6
 8005676:	f7ff fe88 	bl	800538a <_Bfree>
 800567a:	464f      	mov	r7, r9
 800567c:	106d      	asrs	r5, r5, #1
 800567e:	d00b      	beq.n	8005698 <__pow5mult+0x90>
 8005680:	6820      	ldr	r0, [r4, #0]
 8005682:	b938      	cbnz	r0, 8005694 <__pow5mult+0x8c>
 8005684:	4622      	mov	r2, r4
 8005686:	4621      	mov	r1, r4
 8005688:	4630      	mov	r0, r6
 800568a:	f7ff ff27 	bl	80054dc <__multiply>
 800568e:	6020      	str	r0, [r4, #0]
 8005690:	f8c0 8000 	str.w	r8, [r0]
 8005694:	4604      	mov	r4, r0
 8005696:	e7e4      	b.n	8005662 <__pow5mult+0x5a>
 8005698:	4638      	mov	r0, r7
 800569a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800569e:	bf00      	nop
 80056a0:	08005f98 	.word	0x08005f98

080056a4 <__lshift>:
 80056a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056a8:	460c      	mov	r4, r1
 80056aa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80056ae:	6923      	ldr	r3, [r4, #16]
 80056b0:	6849      	ldr	r1, [r1, #4]
 80056b2:	eb0a 0903 	add.w	r9, sl, r3
 80056b6:	68a3      	ldr	r3, [r4, #8]
 80056b8:	4607      	mov	r7, r0
 80056ba:	4616      	mov	r6, r2
 80056bc:	f109 0501 	add.w	r5, r9, #1
 80056c0:	42ab      	cmp	r3, r5
 80056c2:	db32      	blt.n	800572a <__lshift+0x86>
 80056c4:	4638      	mov	r0, r7
 80056c6:	f7ff fe2c 	bl	8005322 <_Balloc>
 80056ca:	2300      	movs	r3, #0
 80056cc:	4680      	mov	r8, r0
 80056ce:	f100 0114 	add.w	r1, r0, #20
 80056d2:	461a      	mov	r2, r3
 80056d4:	4553      	cmp	r3, sl
 80056d6:	db2b      	blt.n	8005730 <__lshift+0x8c>
 80056d8:	6920      	ldr	r0, [r4, #16]
 80056da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80056de:	f104 0314 	add.w	r3, r4, #20
 80056e2:	f016 021f 	ands.w	r2, r6, #31
 80056e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80056ea:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80056ee:	d025      	beq.n	800573c <__lshift+0x98>
 80056f0:	f1c2 0e20 	rsb	lr, r2, #32
 80056f4:	2000      	movs	r0, #0
 80056f6:	681e      	ldr	r6, [r3, #0]
 80056f8:	468a      	mov	sl, r1
 80056fa:	4096      	lsls	r6, r2
 80056fc:	4330      	orrs	r0, r6
 80056fe:	f84a 0b04 	str.w	r0, [sl], #4
 8005702:	f853 0b04 	ldr.w	r0, [r3], #4
 8005706:	459c      	cmp	ip, r3
 8005708:	fa20 f00e 	lsr.w	r0, r0, lr
 800570c:	d814      	bhi.n	8005738 <__lshift+0x94>
 800570e:	6048      	str	r0, [r1, #4]
 8005710:	b108      	cbz	r0, 8005716 <__lshift+0x72>
 8005712:	f109 0502 	add.w	r5, r9, #2
 8005716:	3d01      	subs	r5, #1
 8005718:	4638      	mov	r0, r7
 800571a:	f8c8 5010 	str.w	r5, [r8, #16]
 800571e:	4621      	mov	r1, r4
 8005720:	f7ff fe33 	bl	800538a <_Bfree>
 8005724:	4640      	mov	r0, r8
 8005726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800572a:	3101      	adds	r1, #1
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	e7c7      	b.n	80056c0 <__lshift+0x1c>
 8005730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005734:	3301      	adds	r3, #1
 8005736:	e7cd      	b.n	80056d4 <__lshift+0x30>
 8005738:	4651      	mov	r1, sl
 800573a:	e7dc      	b.n	80056f6 <__lshift+0x52>
 800573c:	3904      	subs	r1, #4
 800573e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005742:	f841 2f04 	str.w	r2, [r1, #4]!
 8005746:	459c      	cmp	ip, r3
 8005748:	d8f9      	bhi.n	800573e <__lshift+0x9a>
 800574a:	e7e4      	b.n	8005716 <__lshift+0x72>

0800574c <__mcmp>:
 800574c:	6903      	ldr	r3, [r0, #16]
 800574e:	690a      	ldr	r2, [r1, #16]
 8005750:	1a9b      	subs	r3, r3, r2
 8005752:	b530      	push	{r4, r5, lr}
 8005754:	d10c      	bne.n	8005770 <__mcmp+0x24>
 8005756:	0092      	lsls	r2, r2, #2
 8005758:	3014      	adds	r0, #20
 800575a:	3114      	adds	r1, #20
 800575c:	1884      	adds	r4, r0, r2
 800575e:	4411      	add	r1, r2
 8005760:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005764:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005768:	4295      	cmp	r5, r2
 800576a:	d003      	beq.n	8005774 <__mcmp+0x28>
 800576c:	d305      	bcc.n	800577a <__mcmp+0x2e>
 800576e:	2301      	movs	r3, #1
 8005770:	4618      	mov	r0, r3
 8005772:	bd30      	pop	{r4, r5, pc}
 8005774:	42a0      	cmp	r0, r4
 8005776:	d3f3      	bcc.n	8005760 <__mcmp+0x14>
 8005778:	e7fa      	b.n	8005770 <__mcmp+0x24>
 800577a:	f04f 33ff 	mov.w	r3, #4294967295
 800577e:	e7f7      	b.n	8005770 <__mcmp+0x24>

08005780 <__mdiff>:
 8005780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005784:	460d      	mov	r5, r1
 8005786:	4607      	mov	r7, r0
 8005788:	4611      	mov	r1, r2
 800578a:	4628      	mov	r0, r5
 800578c:	4614      	mov	r4, r2
 800578e:	f7ff ffdd 	bl	800574c <__mcmp>
 8005792:	1e06      	subs	r6, r0, #0
 8005794:	d108      	bne.n	80057a8 <__mdiff+0x28>
 8005796:	4631      	mov	r1, r6
 8005798:	4638      	mov	r0, r7
 800579a:	f7ff fdc2 	bl	8005322 <_Balloc>
 800579e:	2301      	movs	r3, #1
 80057a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80057a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057a8:	bfa4      	itt	ge
 80057aa:	4623      	movge	r3, r4
 80057ac:	462c      	movge	r4, r5
 80057ae:	4638      	mov	r0, r7
 80057b0:	6861      	ldr	r1, [r4, #4]
 80057b2:	bfa6      	itte	ge
 80057b4:	461d      	movge	r5, r3
 80057b6:	2600      	movge	r6, #0
 80057b8:	2601      	movlt	r6, #1
 80057ba:	f7ff fdb2 	bl	8005322 <_Balloc>
 80057be:	692b      	ldr	r3, [r5, #16]
 80057c0:	60c6      	str	r6, [r0, #12]
 80057c2:	6926      	ldr	r6, [r4, #16]
 80057c4:	f105 0914 	add.w	r9, r5, #20
 80057c8:	f104 0214 	add.w	r2, r4, #20
 80057cc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80057d0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80057d4:	f100 0514 	add.w	r5, r0, #20
 80057d8:	f04f 0e00 	mov.w	lr, #0
 80057dc:	f852 ab04 	ldr.w	sl, [r2], #4
 80057e0:	f859 4b04 	ldr.w	r4, [r9], #4
 80057e4:	fa1e f18a 	uxtah	r1, lr, sl
 80057e8:	b2a3      	uxth	r3, r4
 80057ea:	1ac9      	subs	r1, r1, r3
 80057ec:	0c23      	lsrs	r3, r4, #16
 80057ee:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80057f2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80057f6:	b289      	uxth	r1, r1
 80057f8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80057fc:	45c8      	cmp	r8, r9
 80057fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005802:	4694      	mov	ip, r2
 8005804:	f845 3b04 	str.w	r3, [r5], #4
 8005808:	d8e8      	bhi.n	80057dc <__mdiff+0x5c>
 800580a:	45bc      	cmp	ip, r7
 800580c:	d304      	bcc.n	8005818 <__mdiff+0x98>
 800580e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005812:	b183      	cbz	r3, 8005836 <__mdiff+0xb6>
 8005814:	6106      	str	r6, [r0, #16]
 8005816:	e7c5      	b.n	80057a4 <__mdiff+0x24>
 8005818:	f85c 1b04 	ldr.w	r1, [ip], #4
 800581c:	fa1e f381 	uxtah	r3, lr, r1
 8005820:	141a      	asrs	r2, r3, #16
 8005822:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005826:	b29b      	uxth	r3, r3
 8005828:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800582c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005830:	f845 3b04 	str.w	r3, [r5], #4
 8005834:	e7e9      	b.n	800580a <__mdiff+0x8a>
 8005836:	3e01      	subs	r6, #1
 8005838:	e7e9      	b.n	800580e <__mdiff+0x8e>

0800583a <__d2b>:
 800583a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800583e:	460e      	mov	r6, r1
 8005840:	2101      	movs	r1, #1
 8005842:	ec59 8b10 	vmov	r8, r9, d0
 8005846:	4615      	mov	r5, r2
 8005848:	f7ff fd6b 	bl	8005322 <_Balloc>
 800584c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005850:	4607      	mov	r7, r0
 8005852:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005856:	bb34      	cbnz	r4, 80058a6 <__d2b+0x6c>
 8005858:	9301      	str	r3, [sp, #4]
 800585a:	f1b8 0300 	subs.w	r3, r8, #0
 800585e:	d027      	beq.n	80058b0 <__d2b+0x76>
 8005860:	a802      	add	r0, sp, #8
 8005862:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005866:	f7ff fe01 	bl	800546c <__lo0bits>
 800586a:	9900      	ldr	r1, [sp, #0]
 800586c:	b1f0      	cbz	r0, 80058ac <__d2b+0x72>
 800586e:	9a01      	ldr	r2, [sp, #4]
 8005870:	f1c0 0320 	rsb	r3, r0, #32
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	430b      	orrs	r3, r1
 800587a:	40c2      	lsrs	r2, r0
 800587c:	617b      	str	r3, [r7, #20]
 800587e:	9201      	str	r2, [sp, #4]
 8005880:	9b01      	ldr	r3, [sp, #4]
 8005882:	61bb      	str	r3, [r7, #24]
 8005884:	2b00      	cmp	r3, #0
 8005886:	bf14      	ite	ne
 8005888:	2102      	movne	r1, #2
 800588a:	2101      	moveq	r1, #1
 800588c:	6139      	str	r1, [r7, #16]
 800588e:	b1c4      	cbz	r4, 80058c2 <__d2b+0x88>
 8005890:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005894:	4404      	add	r4, r0
 8005896:	6034      	str	r4, [r6, #0]
 8005898:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800589c:	6028      	str	r0, [r5, #0]
 800589e:	4638      	mov	r0, r7
 80058a0:	b003      	add	sp, #12
 80058a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058aa:	e7d5      	b.n	8005858 <__d2b+0x1e>
 80058ac:	6179      	str	r1, [r7, #20]
 80058ae:	e7e7      	b.n	8005880 <__d2b+0x46>
 80058b0:	a801      	add	r0, sp, #4
 80058b2:	f7ff fddb 	bl	800546c <__lo0bits>
 80058b6:	9b01      	ldr	r3, [sp, #4]
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	2101      	movs	r1, #1
 80058bc:	6139      	str	r1, [r7, #16]
 80058be:	3020      	adds	r0, #32
 80058c0:	e7e5      	b.n	800588e <__d2b+0x54>
 80058c2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80058c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80058ca:	6030      	str	r0, [r6, #0]
 80058cc:	6918      	ldr	r0, [r3, #16]
 80058ce:	f7ff fdae 	bl	800542e <__hi0bits>
 80058d2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80058d6:	e7e1      	b.n	800589c <__d2b+0x62>

080058d8 <_calloc_r>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	fb02 f401 	mul.w	r4, r2, r1
 80058de:	4621      	mov	r1, r4
 80058e0:	f000 f856 	bl	8005990 <_malloc_r>
 80058e4:	4605      	mov	r5, r0
 80058e6:	b118      	cbz	r0, 80058f0 <_calloc_r+0x18>
 80058e8:	4622      	mov	r2, r4
 80058ea:	2100      	movs	r1, #0
 80058ec:	f7fe fa30 	bl	8003d50 <memset>
 80058f0:	4628      	mov	r0, r5
 80058f2:	bd38      	pop	{r3, r4, r5, pc}

080058f4 <_free_r>:
 80058f4:	b538      	push	{r3, r4, r5, lr}
 80058f6:	4605      	mov	r5, r0
 80058f8:	2900      	cmp	r1, #0
 80058fa:	d045      	beq.n	8005988 <_free_r+0x94>
 80058fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005900:	1f0c      	subs	r4, r1, #4
 8005902:	2b00      	cmp	r3, #0
 8005904:	bfb8      	it	lt
 8005906:	18e4      	addlt	r4, r4, r3
 8005908:	f000 fa29 	bl	8005d5e <__malloc_lock>
 800590c:	4a1f      	ldr	r2, [pc, #124]	; (800598c <_free_r+0x98>)
 800590e:	6813      	ldr	r3, [r2, #0]
 8005910:	4610      	mov	r0, r2
 8005912:	b933      	cbnz	r3, 8005922 <_free_r+0x2e>
 8005914:	6063      	str	r3, [r4, #4]
 8005916:	6014      	str	r4, [r2, #0]
 8005918:	4628      	mov	r0, r5
 800591a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800591e:	f000 ba1f 	b.w	8005d60 <__malloc_unlock>
 8005922:	42a3      	cmp	r3, r4
 8005924:	d90c      	bls.n	8005940 <_free_r+0x4c>
 8005926:	6821      	ldr	r1, [r4, #0]
 8005928:	1862      	adds	r2, r4, r1
 800592a:	4293      	cmp	r3, r2
 800592c:	bf04      	itt	eq
 800592e:	681a      	ldreq	r2, [r3, #0]
 8005930:	685b      	ldreq	r3, [r3, #4]
 8005932:	6063      	str	r3, [r4, #4]
 8005934:	bf04      	itt	eq
 8005936:	1852      	addeq	r2, r2, r1
 8005938:	6022      	streq	r2, [r4, #0]
 800593a:	6004      	str	r4, [r0, #0]
 800593c:	e7ec      	b.n	8005918 <_free_r+0x24>
 800593e:	4613      	mov	r3, r2
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	b10a      	cbz	r2, 8005948 <_free_r+0x54>
 8005944:	42a2      	cmp	r2, r4
 8005946:	d9fa      	bls.n	800593e <_free_r+0x4a>
 8005948:	6819      	ldr	r1, [r3, #0]
 800594a:	1858      	adds	r0, r3, r1
 800594c:	42a0      	cmp	r0, r4
 800594e:	d10b      	bne.n	8005968 <_free_r+0x74>
 8005950:	6820      	ldr	r0, [r4, #0]
 8005952:	4401      	add	r1, r0
 8005954:	1858      	adds	r0, r3, r1
 8005956:	4282      	cmp	r2, r0
 8005958:	6019      	str	r1, [r3, #0]
 800595a:	d1dd      	bne.n	8005918 <_free_r+0x24>
 800595c:	6810      	ldr	r0, [r2, #0]
 800595e:	6852      	ldr	r2, [r2, #4]
 8005960:	605a      	str	r2, [r3, #4]
 8005962:	4401      	add	r1, r0
 8005964:	6019      	str	r1, [r3, #0]
 8005966:	e7d7      	b.n	8005918 <_free_r+0x24>
 8005968:	d902      	bls.n	8005970 <_free_r+0x7c>
 800596a:	230c      	movs	r3, #12
 800596c:	602b      	str	r3, [r5, #0]
 800596e:	e7d3      	b.n	8005918 <_free_r+0x24>
 8005970:	6820      	ldr	r0, [r4, #0]
 8005972:	1821      	adds	r1, r4, r0
 8005974:	428a      	cmp	r2, r1
 8005976:	bf04      	itt	eq
 8005978:	6811      	ldreq	r1, [r2, #0]
 800597a:	6852      	ldreq	r2, [r2, #4]
 800597c:	6062      	str	r2, [r4, #4]
 800597e:	bf04      	itt	eq
 8005980:	1809      	addeq	r1, r1, r0
 8005982:	6021      	streq	r1, [r4, #0]
 8005984:	605c      	str	r4, [r3, #4]
 8005986:	e7c7      	b.n	8005918 <_free_r+0x24>
 8005988:	bd38      	pop	{r3, r4, r5, pc}
 800598a:	bf00      	nop
 800598c:	20000204 	.word	0x20000204

08005990 <_malloc_r>:
 8005990:	b570      	push	{r4, r5, r6, lr}
 8005992:	1ccd      	adds	r5, r1, #3
 8005994:	f025 0503 	bic.w	r5, r5, #3
 8005998:	3508      	adds	r5, #8
 800599a:	2d0c      	cmp	r5, #12
 800599c:	bf38      	it	cc
 800599e:	250c      	movcc	r5, #12
 80059a0:	2d00      	cmp	r5, #0
 80059a2:	4606      	mov	r6, r0
 80059a4:	db01      	blt.n	80059aa <_malloc_r+0x1a>
 80059a6:	42a9      	cmp	r1, r5
 80059a8:	d903      	bls.n	80059b2 <_malloc_r+0x22>
 80059aa:	230c      	movs	r3, #12
 80059ac:	6033      	str	r3, [r6, #0]
 80059ae:	2000      	movs	r0, #0
 80059b0:	bd70      	pop	{r4, r5, r6, pc}
 80059b2:	f000 f9d4 	bl	8005d5e <__malloc_lock>
 80059b6:	4a21      	ldr	r2, [pc, #132]	; (8005a3c <_malloc_r+0xac>)
 80059b8:	6814      	ldr	r4, [r2, #0]
 80059ba:	4621      	mov	r1, r4
 80059bc:	b991      	cbnz	r1, 80059e4 <_malloc_r+0x54>
 80059be:	4c20      	ldr	r4, [pc, #128]	; (8005a40 <_malloc_r+0xb0>)
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	b91b      	cbnz	r3, 80059cc <_malloc_r+0x3c>
 80059c4:	4630      	mov	r0, r6
 80059c6:	f000 f98f 	bl	8005ce8 <_sbrk_r>
 80059ca:	6020      	str	r0, [r4, #0]
 80059cc:	4629      	mov	r1, r5
 80059ce:	4630      	mov	r0, r6
 80059d0:	f000 f98a 	bl	8005ce8 <_sbrk_r>
 80059d4:	1c43      	adds	r3, r0, #1
 80059d6:	d124      	bne.n	8005a22 <_malloc_r+0x92>
 80059d8:	230c      	movs	r3, #12
 80059da:	6033      	str	r3, [r6, #0]
 80059dc:	4630      	mov	r0, r6
 80059de:	f000 f9bf 	bl	8005d60 <__malloc_unlock>
 80059e2:	e7e4      	b.n	80059ae <_malloc_r+0x1e>
 80059e4:	680b      	ldr	r3, [r1, #0]
 80059e6:	1b5b      	subs	r3, r3, r5
 80059e8:	d418      	bmi.n	8005a1c <_malloc_r+0x8c>
 80059ea:	2b0b      	cmp	r3, #11
 80059ec:	d90f      	bls.n	8005a0e <_malloc_r+0x7e>
 80059ee:	600b      	str	r3, [r1, #0]
 80059f0:	50cd      	str	r5, [r1, r3]
 80059f2:	18cc      	adds	r4, r1, r3
 80059f4:	4630      	mov	r0, r6
 80059f6:	f000 f9b3 	bl	8005d60 <__malloc_unlock>
 80059fa:	f104 000b 	add.w	r0, r4, #11
 80059fe:	1d23      	adds	r3, r4, #4
 8005a00:	f020 0007 	bic.w	r0, r0, #7
 8005a04:	1ac3      	subs	r3, r0, r3
 8005a06:	d0d3      	beq.n	80059b0 <_malloc_r+0x20>
 8005a08:	425a      	negs	r2, r3
 8005a0a:	50e2      	str	r2, [r4, r3]
 8005a0c:	e7d0      	b.n	80059b0 <_malloc_r+0x20>
 8005a0e:	428c      	cmp	r4, r1
 8005a10:	684b      	ldr	r3, [r1, #4]
 8005a12:	bf16      	itet	ne
 8005a14:	6063      	strne	r3, [r4, #4]
 8005a16:	6013      	streq	r3, [r2, #0]
 8005a18:	460c      	movne	r4, r1
 8005a1a:	e7eb      	b.n	80059f4 <_malloc_r+0x64>
 8005a1c:	460c      	mov	r4, r1
 8005a1e:	6849      	ldr	r1, [r1, #4]
 8005a20:	e7cc      	b.n	80059bc <_malloc_r+0x2c>
 8005a22:	1cc4      	adds	r4, r0, #3
 8005a24:	f024 0403 	bic.w	r4, r4, #3
 8005a28:	42a0      	cmp	r0, r4
 8005a2a:	d005      	beq.n	8005a38 <_malloc_r+0xa8>
 8005a2c:	1a21      	subs	r1, r4, r0
 8005a2e:	4630      	mov	r0, r6
 8005a30:	f000 f95a 	bl	8005ce8 <_sbrk_r>
 8005a34:	3001      	adds	r0, #1
 8005a36:	d0cf      	beq.n	80059d8 <_malloc_r+0x48>
 8005a38:	6025      	str	r5, [r4, #0]
 8005a3a:	e7db      	b.n	80059f4 <_malloc_r+0x64>
 8005a3c:	20000204 	.word	0x20000204
 8005a40:	20000208 	.word	0x20000208

08005a44 <__ssputs_r>:
 8005a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a48:	688e      	ldr	r6, [r1, #8]
 8005a4a:	429e      	cmp	r6, r3
 8005a4c:	4682      	mov	sl, r0
 8005a4e:	460c      	mov	r4, r1
 8005a50:	4690      	mov	r8, r2
 8005a52:	4699      	mov	r9, r3
 8005a54:	d837      	bhi.n	8005ac6 <__ssputs_r+0x82>
 8005a56:	898a      	ldrh	r2, [r1, #12]
 8005a58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a5c:	d031      	beq.n	8005ac2 <__ssputs_r+0x7e>
 8005a5e:	6825      	ldr	r5, [r4, #0]
 8005a60:	6909      	ldr	r1, [r1, #16]
 8005a62:	1a6f      	subs	r7, r5, r1
 8005a64:	6965      	ldr	r5, [r4, #20]
 8005a66:	2302      	movs	r3, #2
 8005a68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a6c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005a70:	f109 0301 	add.w	r3, r9, #1
 8005a74:	443b      	add	r3, r7
 8005a76:	429d      	cmp	r5, r3
 8005a78:	bf38      	it	cc
 8005a7a:	461d      	movcc	r5, r3
 8005a7c:	0553      	lsls	r3, r2, #21
 8005a7e:	d530      	bpl.n	8005ae2 <__ssputs_r+0x9e>
 8005a80:	4629      	mov	r1, r5
 8005a82:	f7ff ff85 	bl	8005990 <_malloc_r>
 8005a86:	4606      	mov	r6, r0
 8005a88:	b950      	cbnz	r0, 8005aa0 <__ssputs_r+0x5c>
 8005a8a:	230c      	movs	r3, #12
 8005a8c:	f8ca 3000 	str.w	r3, [sl]
 8005a90:	89a3      	ldrh	r3, [r4, #12]
 8005a92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a96:	81a3      	strh	r3, [r4, #12]
 8005a98:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa0:	463a      	mov	r2, r7
 8005aa2:	6921      	ldr	r1, [r4, #16]
 8005aa4:	f7ff fc32 	bl	800530c <memcpy>
 8005aa8:	89a3      	ldrh	r3, [r4, #12]
 8005aaa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ab2:	81a3      	strh	r3, [r4, #12]
 8005ab4:	6126      	str	r6, [r4, #16]
 8005ab6:	6165      	str	r5, [r4, #20]
 8005ab8:	443e      	add	r6, r7
 8005aba:	1bed      	subs	r5, r5, r7
 8005abc:	6026      	str	r6, [r4, #0]
 8005abe:	60a5      	str	r5, [r4, #8]
 8005ac0:	464e      	mov	r6, r9
 8005ac2:	454e      	cmp	r6, r9
 8005ac4:	d900      	bls.n	8005ac8 <__ssputs_r+0x84>
 8005ac6:	464e      	mov	r6, r9
 8005ac8:	4632      	mov	r2, r6
 8005aca:	4641      	mov	r1, r8
 8005acc:	6820      	ldr	r0, [r4, #0]
 8005ace:	f000 f92d 	bl	8005d2c <memmove>
 8005ad2:	68a3      	ldr	r3, [r4, #8]
 8005ad4:	1b9b      	subs	r3, r3, r6
 8005ad6:	60a3      	str	r3, [r4, #8]
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	441e      	add	r6, r3
 8005adc:	6026      	str	r6, [r4, #0]
 8005ade:	2000      	movs	r0, #0
 8005ae0:	e7dc      	b.n	8005a9c <__ssputs_r+0x58>
 8005ae2:	462a      	mov	r2, r5
 8005ae4:	f000 f93d 	bl	8005d62 <_realloc_r>
 8005ae8:	4606      	mov	r6, r0
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d1e2      	bne.n	8005ab4 <__ssputs_r+0x70>
 8005aee:	6921      	ldr	r1, [r4, #16]
 8005af0:	4650      	mov	r0, sl
 8005af2:	f7ff feff 	bl	80058f4 <_free_r>
 8005af6:	e7c8      	b.n	8005a8a <__ssputs_r+0x46>

08005af8 <_svfiprintf_r>:
 8005af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afc:	461d      	mov	r5, r3
 8005afe:	898b      	ldrh	r3, [r1, #12]
 8005b00:	061f      	lsls	r7, r3, #24
 8005b02:	b09d      	sub	sp, #116	; 0x74
 8005b04:	4680      	mov	r8, r0
 8005b06:	460c      	mov	r4, r1
 8005b08:	4616      	mov	r6, r2
 8005b0a:	d50f      	bpl.n	8005b2c <_svfiprintf_r+0x34>
 8005b0c:	690b      	ldr	r3, [r1, #16]
 8005b0e:	b96b      	cbnz	r3, 8005b2c <_svfiprintf_r+0x34>
 8005b10:	2140      	movs	r1, #64	; 0x40
 8005b12:	f7ff ff3d 	bl	8005990 <_malloc_r>
 8005b16:	6020      	str	r0, [r4, #0]
 8005b18:	6120      	str	r0, [r4, #16]
 8005b1a:	b928      	cbnz	r0, 8005b28 <_svfiprintf_r+0x30>
 8005b1c:	230c      	movs	r3, #12
 8005b1e:	f8c8 3000 	str.w	r3, [r8]
 8005b22:	f04f 30ff 	mov.w	r0, #4294967295
 8005b26:	e0c8      	b.n	8005cba <_svfiprintf_r+0x1c2>
 8005b28:	2340      	movs	r3, #64	; 0x40
 8005b2a:	6163      	str	r3, [r4, #20]
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b30:	2320      	movs	r3, #32
 8005b32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b36:	2330      	movs	r3, #48	; 0x30
 8005b38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b3c:	9503      	str	r5, [sp, #12]
 8005b3e:	f04f 0b01 	mov.w	fp, #1
 8005b42:	4637      	mov	r7, r6
 8005b44:	463d      	mov	r5, r7
 8005b46:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005b4a:	b10b      	cbz	r3, 8005b50 <_svfiprintf_r+0x58>
 8005b4c:	2b25      	cmp	r3, #37	; 0x25
 8005b4e:	d13e      	bne.n	8005bce <_svfiprintf_r+0xd6>
 8005b50:	ebb7 0a06 	subs.w	sl, r7, r6
 8005b54:	d00b      	beq.n	8005b6e <_svfiprintf_r+0x76>
 8005b56:	4653      	mov	r3, sl
 8005b58:	4632      	mov	r2, r6
 8005b5a:	4621      	mov	r1, r4
 8005b5c:	4640      	mov	r0, r8
 8005b5e:	f7ff ff71 	bl	8005a44 <__ssputs_r>
 8005b62:	3001      	adds	r0, #1
 8005b64:	f000 80a4 	beq.w	8005cb0 <_svfiprintf_r+0x1b8>
 8005b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b6a:	4453      	add	r3, sl
 8005b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8005b6e:	783b      	ldrb	r3, [r7, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 809d 	beq.w	8005cb0 <_svfiprintf_r+0x1b8>
 8005b76:	2300      	movs	r3, #0
 8005b78:	f04f 32ff 	mov.w	r2, #4294967295
 8005b7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b80:	9304      	str	r3, [sp, #16]
 8005b82:	9307      	str	r3, [sp, #28]
 8005b84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b88:	931a      	str	r3, [sp, #104]	; 0x68
 8005b8a:	462f      	mov	r7, r5
 8005b8c:	2205      	movs	r2, #5
 8005b8e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005b92:	4850      	ldr	r0, [pc, #320]	; (8005cd4 <_svfiprintf_r+0x1dc>)
 8005b94:	f7fa fb24 	bl	80001e0 <memchr>
 8005b98:	9b04      	ldr	r3, [sp, #16]
 8005b9a:	b9d0      	cbnz	r0, 8005bd2 <_svfiprintf_r+0xda>
 8005b9c:	06d9      	lsls	r1, r3, #27
 8005b9e:	bf44      	itt	mi
 8005ba0:	2220      	movmi	r2, #32
 8005ba2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005ba6:	071a      	lsls	r2, r3, #28
 8005ba8:	bf44      	itt	mi
 8005baa:	222b      	movmi	r2, #43	; 0x2b
 8005bac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005bb0:	782a      	ldrb	r2, [r5, #0]
 8005bb2:	2a2a      	cmp	r2, #42	; 0x2a
 8005bb4:	d015      	beq.n	8005be2 <_svfiprintf_r+0xea>
 8005bb6:	9a07      	ldr	r2, [sp, #28]
 8005bb8:	462f      	mov	r7, r5
 8005bba:	2000      	movs	r0, #0
 8005bbc:	250a      	movs	r5, #10
 8005bbe:	4639      	mov	r1, r7
 8005bc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bc4:	3b30      	subs	r3, #48	; 0x30
 8005bc6:	2b09      	cmp	r3, #9
 8005bc8:	d94d      	bls.n	8005c66 <_svfiprintf_r+0x16e>
 8005bca:	b1b8      	cbz	r0, 8005bfc <_svfiprintf_r+0x104>
 8005bcc:	e00f      	b.n	8005bee <_svfiprintf_r+0xf6>
 8005bce:	462f      	mov	r7, r5
 8005bd0:	e7b8      	b.n	8005b44 <_svfiprintf_r+0x4c>
 8005bd2:	4a40      	ldr	r2, [pc, #256]	; (8005cd4 <_svfiprintf_r+0x1dc>)
 8005bd4:	1a80      	subs	r0, r0, r2
 8005bd6:	fa0b f000 	lsl.w	r0, fp, r0
 8005bda:	4318      	orrs	r0, r3
 8005bdc:	9004      	str	r0, [sp, #16]
 8005bde:	463d      	mov	r5, r7
 8005be0:	e7d3      	b.n	8005b8a <_svfiprintf_r+0x92>
 8005be2:	9a03      	ldr	r2, [sp, #12]
 8005be4:	1d11      	adds	r1, r2, #4
 8005be6:	6812      	ldr	r2, [r2, #0]
 8005be8:	9103      	str	r1, [sp, #12]
 8005bea:	2a00      	cmp	r2, #0
 8005bec:	db01      	blt.n	8005bf2 <_svfiprintf_r+0xfa>
 8005bee:	9207      	str	r2, [sp, #28]
 8005bf0:	e004      	b.n	8005bfc <_svfiprintf_r+0x104>
 8005bf2:	4252      	negs	r2, r2
 8005bf4:	f043 0302 	orr.w	r3, r3, #2
 8005bf8:	9207      	str	r2, [sp, #28]
 8005bfa:	9304      	str	r3, [sp, #16]
 8005bfc:	783b      	ldrb	r3, [r7, #0]
 8005bfe:	2b2e      	cmp	r3, #46	; 0x2e
 8005c00:	d10c      	bne.n	8005c1c <_svfiprintf_r+0x124>
 8005c02:	787b      	ldrb	r3, [r7, #1]
 8005c04:	2b2a      	cmp	r3, #42	; 0x2a
 8005c06:	d133      	bne.n	8005c70 <_svfiprintf_r+0x178>
 8005c08:	9b03      	ldr	r3, [sp, #12]
 8005c0a:	1d1a      	adds	r2, r3, #4
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	9203      	str	r2, [sp, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	bfb8      	it	lt
 8005c14:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c18:	3702      	adds	r7, #2
 8005c1a:	9305      	str	r3, [sp, #20]
 8005c1c:	4d2e      	ldr	r5, [pc, #184]	; (8005cd8 <_svfiprintf_r+0x1e0>)
 8005c1e:	7839      	ldrb	r1, [r7, #0]
 8005c20:	2203      	movs	r2, #3
 8005c22:	4628      	mov	r0, r5
 8005c24:	f7fa fadc 	bl	80001e0 <memchr>
 8005c28:	b138      	cbz	r0, 8005c3a <_svfiprintf_r+0x142>
 8005c2a:	2340      	movs	r3, #64	; 0x40
 8005c2c:	1b40      	subs	r0, r0, r5
 8005c2e:	fa03 f000 	lsl.w	r0, r3, r0
 8005c32:	9b04      	ldr	r3, [sp, #16]
 8005c34:	4303      	orrs	r3, r0
 8005c36:	3701      	adds	r7, #1
 8005c38:	9304      	str	r3, [sp, #16]
 8005c3a:	7839      	ldrb	r1, [r7, #0]
 8005c3c:	4827      	ldr	r0, [pc, #156]	; (8005cdc <_svfiprintf_r+0x1e4>)
 8005c3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c42:	2206      	movs	r2, #6
 8005c44:	1c7e      	adds	r6, r7, #1
 8005c46:	f7fa facb 	bl	80001e0 <memchr>
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	d038      	beq.n	8005cc0 <_svfiprintf_r+0x1c8>
 8005c4e:	4b24      	ldr	r3, [pc, #144]	; (8005ce0 <_svfiprintf_r+0x1e8>)
 8005c50:	bb13      	cbnz	r3, 8005c98 <_svfiprintf_r+0x1a0>
 8005c52:	9b03      	ldr	r3, [sp, #12]
 8005c54:	3307      	adds	r3, #7
 8005c56:	f023 0307 	bic.w	r3, r3, #7
 8005c5a:	3308      	adds	r3, #8
 8005c5c:	9303      	str	r3, [sp, #12]
 8005c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c60:	444b      	add	r3, r9
 8005c62:	9309      	str	r3, [sp, #36]	; 0x24
 8005c64:	e76d      	b.n	8005b42 <_svfiprintf_r+0x4a>
 8005c66:	fb05 3202 	mla	r2, r5, r2, r3
 8005c6a:	2001      	movs	r0, #1
 8005c6c:	460f      	mov	r7, r1
 8005c6e:	e7a6      	b.n	8005bbe <_svfiprintf_r+0xc6>
 8005c70:	2300      	movs	r3, #0
 8005c72:	3701      	adds	r7, #1
 8005c74:	9305      	str	r3, [sp, #20]
 8005c76:	4619      	mov	r1, r3
 8005c78:	250a      	movs	r5, #10
 8005c7a:	4638      	mov	r0, r7
 8005c7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c80:	3a30      	subs	r2, #48	; 0x30
 8005c82:	2a09      	cmp	r2, #9
 8005c84:	d903      	bls.n	8005c8e <_svfiprintf_r+0x196>
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0c8      	beq.n	8005c1c <_svfiprintf_r+0x124>
 8005c8a:	9105      	str	r1, [sp, #20]
 8005c8c:	e7c6      	b.n	8005c1c <_svfiprintf_r+0x124>
 8005c8e:	fb05 2101 	mla	r1, r5, r1, r2
 8005c92:	2301      	movs	r3, #1
 8005c94:	4607      	mov	r7, r0
 8005c96:	e7f0      	b.n	8005c7a <_svfiprintf_r+0x182>
 8005c98:	ab03      	add	r3, sp, #12
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	4622      	mov	r2, r4
 8005c9e:	4b11      	ldr	r3, [pc, #68]	; (8005ce4 <_svfiprintf_r+0x1ec>)
 8005ca0:	a904      	add	r1, sp, #16
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	f7fe f8f0 	bl	8003e88 <_printf_float>
 8005ca8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005cac:	4681      	mov	r9, r0
 8005cae:	d1d6      	bne.n	8005c5e <_svfiprintf_r+0x166>
 8005cb0:	89a3      	ldrh	r3, [r4, #12]
 8005cb2:	065b      	lsls	r3, r3, #25
 8005cb4:	f53f af35 	bmi.w	8005b22 <_svfiprintf_r+0x2a>
 8005cb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cba:	b01d      	add	sp, #116	; 0x74
 8005cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc0:	ab03      	add	r3, sp, #12
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	4622      	mov	r2, r4
 8005cc6:	4b07      	ldr	r3, [pc, #28]	; (8005ce4 <_svfiprintf_r+0x1ec>)
 8005cc8:	a904      	add	r1, sp, #16
 8005cca:	4640      	mov	r0, r8
 8005ccc:	f7fe fb92 	bl	80043f4 <_printf_i>
 8005cd0:	e7ea      	b.n	8005ca8 <_svfiprintf_r+0x1b0>
 8005cd2:	bf00      	nop
 8005cd4:	08005fa4 	.word	0x08005fa4
 8005cd8:	08005faa 	.word	0x08005faa
 8005cdc:	08005fae 	.word	0x08005fae
 8005ce0:	08003e89 	.word	0x08003e89
 8005ce4:	08005a45 	.word	0x08005a45

08005ce8 <_sbrk_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	4c06      	ldr	r4, [pc, #24]	; (8005d04 <_sbrk_r+0x1c>)
 8005cec:	2300      	movs	r3, #0
 8005cee:	4605      	mov	r5, r0
 8005cf0:	4608      	mov	r0, r1
 8005cf2:	6023      	str	r3, [r4, #0]
 8005cf4:	f000 f870 	bl	8005dd8 <_sbrk>
 8005cf8:	1c43      	adds	r3, r0, #1
 8005cfa:	d102      	bne.n	8005d02 <_sbrk_r+0x1a>
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	b103      	cbz	r3, 8005d02 <_sbrk_r+0x1a>
 8005d00:	602b      	str	r3, [r5, #0]
 8005d02:	bd38      	pop	{r3, r4, r5, pc}
 8005d04:	200002f4 	.word	0x200002f4

08005d08 <__ascii_mbtowc>:
 8005d08:	b082      	sub	sp, #8
 8005d0a:	b901      	cbnz	r1, 8005d0e <__ascii_mbtowc+0x6>
 8005d0c:	a901      	add	r1, sp, #4
 8005d0e:	b142      	cbz	r2, 8005d22 <__ascii_mbtowc+0x1a>
 8005d10:	b14b      	cbz	r3, 8005d26 <__ascii_mbtowc+0x1e>
 8005d12:	7813      	ldrb	r3, [r2, #0]
 8005d14:	600b      	str	r3, [r1, #0]
 8005d16:	7812      	ldrb	r2, [r2, #0]
 8005d18:	1c10      	adds	r0, r2, #0
 8005d1a:	bf18      	it	ne
 8005d1c:	2001      	movne	r0, #1
 8005d1e:	b002      	add	sp, #8
 8005d20:	4770      	bx	lr
 8005d22:	4610      	mov	r0, r2
 8005d24:	e7fb      	b.n	8005d1e <__ascii_mbtowc+0x16>
 8005d26:	f06f 0001 	mvn.w	r0, #1
 8005d2a:	e7f8      	b.n	8005d1e <__ascii_mbtowc+0x16>

08005d2c <memmove>:
 8005d2c:	4288      	cmp	r0, r1
 8005d2e:	b510      	push	{r4, lr}
 8005d30:	eb01 0302 	add.w	r3, r1, r2
 8005d34:	d807      	bhi.n	8005d46 <memmove+0x1a>
 8005d36:	1e42      	subs	r2, r0, #1
 8005d38:	4299      	cmp	r1, r3
 8005d3a:	d00a      	beq.n	8005d52 <memmove+0x26>
 8005d3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d40:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005d44:	e7f8      	b.n	8005d38 <memmove+0xc>
 8005d46:	4283      	cmp	r3, r0
 8005d48:	d9f5      	bls.n	8005d36 <memmove+0xa>
 8005d4a:	1881      	adds	r1, r0, r2
 8005d4c:	1ad2      	subs	r2, r2, r3
 8005d4e:	42d3      	cmn	r3, r2
 8005d50:	d100      	bne.n	8005d54 <memmove+0x28>
 8005d52:	bd10      	pop	{r4, pc}
 8005d54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d58:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005d5c:	e7f7      	b.n	8005d4e <memmove+0x22>

08005d5e <__malloc_lock>:
 8005d5e:	4770      	bx	lr

08005d60 <__malloc_unlock>:
 8005d60:	4770      	bx	lr

08005d62 <_realloc_r>:
 8005d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d64:	4607      	mov	r7, r0
 8005d66:	4614      	mov	r4, r2
 8005d68:	460e      	mov	r6, r1
 8005d6a:	b921      	cbnz	r1, 8005d76 <_realloc_r+0x14>
 8005d6c:	4611      	mov	r1, r2
 8005d6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005d72:	f7ff be0d 	b.w	8005990 <_malloc_r>
 8005d76:	b922      	cbnz	r2, 8005d82 <_realloc_r+0x20>
 8005d78:	f7ff fdbc 	bl	80058f4 <_free_r>
 8005d7c:	4625      	mov	r5, r4
 8005d7e:	4628      	mov	r0, r5
 8005d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d82:	f000 f821 	bl	8005dc8 <_malloc_usable_size_r>
 8005d86:	42a0      	cmp	r0, r4
 8005d88:	d20f      	bcs.n	8005daa <_realloc_r+0x48>
 8005d8a:	4621      	mov	r1, r4
 8005d8c:	4638      	mov	r0, r7
 8005d8e:	f7ff fdff 	bl	8005990 <_malloc_r>
 8005d92:	4605      	mov	r5, r0
 8005d94:	2800      	cmp	r0, #0
 8005d96:	d0f2      	beq.n	8005d7e <_realloc_r+0x1c>
 8005d98:	4631      	mov	r1, r6
 8005d9a:	4622      	mov	r2, r4
 8005d9c:	f7ff fab6 	bl	800530c <memcpy>
 8005da0:	4631      	mov	r1, r6
 8005da2:	4638      	mov	r0, r7
 8005da4:	f7ff fda6 	bl	80058f4 <_free_r>
 8005da8:	e7e9      	b.n	8005d7e <_realloc_r+0x1c>
 8005daa:	4635      	mov	r5, r6
 8005dac:	e7e7      	b.n	8005d7e <_realloc_r+0x1c>

08005dae <__ascii_wctomb>:
 8005dae:	b149      	cbz	r1, 8005dc4 <__ascii_wctomb+0x16>
 8005db0:	2aff      	cmp	r2, #255	; 0xff
 8005db2:	bf85      	ittet	hi
 8005db4:	238a      	movhi	r3, #138	; 0x8a
 8005db6:	6003      	strhi	r3, [r0, #0]
 8005db8:	700a      	strbls	r2, [r1, #0]
 8005dba:	f04f 30ff 	movhi.w	r0, #4294967295
 8005dbe:	bf98      	it	ls
 8005dc0:	2001      	movls	r0, #1
 8005dc2:	4770      	bx	lr
 8005dc4:	4608      	mov	r0, r1
 8005dc6:	4770      	bx	lr

08005dc8 <_malloc_usable_size_r>:
 8005dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dcc:	1f18      	subs	r0, r3, #4
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	bfbc      	itt	lt
 8005dd2:	580b      	ldrlt	r3, [r1, r0]
 8005dd4:	18c0      	addlt	r0, r0, r3
 8005dd6:	4770      	bx	lr

08005dd8 <_sbrk>:
 8005dd8:	4b04      	ldr	r3, [pc, #16]	; (8005dec <_sbrk+0x14>)
 8005dda:	6819      	ldr	r1, [r3, #0]
 8005ddc:	4602      	mov	r2, r0
 8005dde:	b909      	cbnz	r1, 8005de4 <_sbrk+0xc>
 8005de0:	4903      	ldr	r1, [pc, #12]	; (8005df0 <_sbrk+0x18>)
 8005de2:	6019      	str	r1, [r3, #0]
 8005de4:	6818      	ldr	r0, [r3, #0]
 8005de6:	4402      	add	r2, r0
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	4770      	bx	lr
 8005dec:	2000020c 	.word	0x2000020c
 8005df0:	200002f8 	.word	0x200002f8

08005df4 <_init>:
 8005df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df6:	bf00      	nop
 8005df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dfa:	bc08      	pop	{r3}
 8005dfc:	469e      	mov	lr, r3
 8005dfe:	4770      	bx	lr

08005e00 <_fini>:
 8005e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e02:	bf00      	nop
 8005e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e06:	bc08      	pop	{r3}
 8005e08:	469e      	mov	lr, r3
 8005e0a:	4770      	bx	lr
